openapi: 3.0.3
info:
  title: Domaine Vallot E-Commerce API
  description: API for boutique winery direct-to-consumer e-commerce website
  version: 1.0.0
  contact:
    name: Domaine Vallot
    email: info@domainevallot.com

servers:
  - url: https://domainevallot.com/api
    description: Production server
  - url: http://localhost:3000/api
    description: Development server

paths:
  /products:
    get:
      summary: Get product catalog
      description: Retrieve paginated list of wine products with filtering
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: category
          in: query
          schema:
            type: string
        - name: featured
          in: query
          schema:
            type: boolean
        - name: in_stock
          in: query
          schema:
            type: boolean
            default: true
        - name: lang
          in: query
          schema:
            type: string
            enum: [en, fr]
            default: en
      responses:
        '200':
          description: Product list retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/{productId}:
    get:
      summary: Get product details
      description: Retrieve detailed information for a specific wine product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: lang
          in: query
          schema:
            type: string
            enum: [en, fr]
            default: en
      responses:
        '200':
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cart:
    get:
      summary: Get cart contents
      description: Retrieve current cart items for authenticated customer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cart contents retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Add item to cart
      description: Add a wine product to the customer's cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - product_id
                - quantity
              properties:
                product_id:
                  type: string
                  format: uuid
                quantity:
                  type: integer
                  minimum: 1
                  maximum: 12
      responses:
        '201':
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cart/{itemId}:
    put:
      summary: Update cart item quantity
      description: Update the quantity of a specific cart item
      security:
        - bearerAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  maximum: 12
      responses:
        '200':
          description: Cart item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Cart item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Remove item from cart
      description: Remove a specific item from the customer's cart
      security:
        - bearerAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Item removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Cart item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders:
    get:
      summary: Get customer orders
      description: Retrieve order history for authenticated customer
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            maximum: 50
      responses:
        '200':
          description: Order history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      summary: Create new order
      description: Create a new order from cart contents
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - shipping_address
                - billing_address
                - shipping_method
              properties:
                shipping_address:
                  $ref: '#/components/schemas/Address'
                billing_address:
                  $ref: '#/components/schemas/Address'
                shipping_method:
                  type: string
                notes:
                  type: string
                  maxLength: 500
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  order:
                    $ref: '#/components/schemas/Order'
                  payment_url:
                    type: string
                    format: uri
        '400':
          description: Invalid order data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders/{orderId}:
    get:
      summary: Get order details
      description: Retrieve detailed information for a specific order
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vat/calculate:
    post:
      summary: Calculate VAT
      description: Calculate VAT amount for given price and country
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - country_code
              properties:
                amount:
                  type: number
                  format: decimal
                country_code:
                  type: string
                  pattern: '^[A-Z]{2}$'
                is_business:
                  type: boolean
                  default: false
                vat_number:
                  type: string
      responses:
        '200':
          description: VAT calculated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  net_amount:
                    type: number
                    format: decimal
                  vat_rate:
                    type: number
                    format: decimal
                  vat_amount:
                    type: number
                    format: decimal
                  gross_amount:
                    type: number
                    format: decimal
                  reverse_charge:
                    type: boolean

  /age-verification:
    post:
      summary: Verify customer age
      description: Perform age verification for wine purchases
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - birth_date
              properties:
                birth_date:
                  type: string
                  format: date
                document_type:
                  type: string
                  enum: [passport, drivers_license, id_card]
                document_image:
                  type: string
                  format: base64
      responses:
        '200':
          description: Age verification completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  verified:
                    type: boolean
                  method:
                    type: string
                  verified_at:
                    type: string
                    format: date-time
        '400':
          description: Verification failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shipping/rates:
    post:
      summary: Get shipping rates
      description: Calculate shipping costs for given destination and items
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - destination
                - items
              properties:
                destination:
                  $ref: '#/components/schemas/Address'
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      product_id:
                        type: string
                        format: uuid
                      quantity:
                        type: integer
      responses:
        '200':
          description: Shipping rates calculated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  rates:
                    type: array
                    items:
                      type: object
                      properties:
                        carrier:
                          type: string
                        service:
                          type: string
                        price:
                          type: number
                          format: decimal
                        estimated_days:
                          type: integer
                        service_points:
                          type: boolean

  /webhooks/mollie:
    post:
      summary: Mollie payment webhook
      description: Handle payment status updates from Mollie
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Webhook processed successfully
        '400':
          description: Invalid webhook data

  /sync/meta:
    post:
      summary: Sync products to Meta Catalog
      description: Synchronize product data with Facebook/Instagram catalog
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sync completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  synced_count:
                    type: integer
                  errors:
                    type: array
                    items:
                      type: string

  /sync/google:
    post:
      summary: Sync products to Google Shopping
      description: Synchronize product data with Google Merchant Center
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sync completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  synced_count:
                    type: integer
                  errors:
                    type: array
                    items:
                      type: string

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        sku:
          type: string
        name:
          type: string
        vintage:
          type: integer
        varietal:
          type: string
        price_eur:
          type: number
          format: decimal
        stock_quantity:
          type: integer
        description:
          type: string
        tasting_notes:
          type: string
        food_pairing:
          type: string
        images:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
                format: uri
              alt_text:
                type: string
              is_primary:
                type: boolean
        certifications:
          type: array
          items:
            type: string
            enum: [organic, biodynamic, vegan]
        slug:
          type: string

    ProductDetail:
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          properties:
            alcohol_content:
              type: number
              format: decimal
            volume_ml:
              type: integer
            region:
              type: string
            production_notes:
              type: string
            allergens:
              type: array
              items:
                type: string

    Cart:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        subtotal:
          type: number
          format: decimal
        item_count:
          type: integer

    CartItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
        line_total:
          type: number
          format: decimal

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        order_number:
          type: string
        status:
          type: string
          enum: [pending, confirmed, processing, shipped, delivered, cancelled, refunded]
        total_eur:
          type: number
          format: decimal
        created_at:
          type: string
          format: date-time
        shipping_address:
          $ref: '#/components/schemas/Address'
        tracking_number:
          type: string

    OrderDetail:
      allOf:
        - $ref: '#/components/schemas/Order'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/OrderItem'
            subtotal_eur:
              type: number
              format: decimal
            vat_amount_eur:
              type: number
              format: decimal
            shipping_cost_eur:
              type: number
              format: decimal
            billing_address:
              $ref: '#/components/schemas/Address'

    OrderItem:
      type: object
      properties:
        product_id:
          type: string
          format: uuid
        product_name:
          type: string
        quantity:
          type: integer
        unit_price_eur:
          type: number
          format: decimal
        line_total_eur:
          type: number
          format: decimal

    Address:
      type: object
      required:
        - first_name
        - last_name
        - address_line1
        - city
        - postal_code
        - country_code
      properties:
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
        company:
          type: string
          maxLength: 100
        address_line1:
          type: string
          maxLength: 100
        address_line2:
          type: string
          maxLength: 100
        city:
          type: string
          maxLength: 50
        state_province:
          type: string
          maxLength: 50
        postal_code:
          type: string
          maxLength: 20
        country_code:
          type: string
          pattern: '^[A-Z]{2}$'
        phone:
          type: string
          maxLength: 20

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        total_pages:
          type: integer
        has_next:
          type: boolean
        has_prev:
          type: boolean

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object