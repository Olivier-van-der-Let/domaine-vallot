/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/orders/route";
exports.ids = ["app/api/orders/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Forders%2Froute&page=%2Fapi%2Forders%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2Froute.ts&appDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Forders%2Froute&page=%2Fapi%2Forders%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2Froute.ts&appDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var C_Users_olivi_Domaine_Vallot_src_app_api_orders_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/orders/route.ts */ \"(rsc)/./src/app/api/orders/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/orders/route\",\n        pathname: \"/api/orders\",\n        filename: \"route\",\n        bundlePath: \"app/api/orders/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"C:\\\\Users\\\\olivi\\\\Domaine Vallot\\\\src\\\\app\\\\api\\\\orders\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_olivi_Domaine_Vallot_src_app_api_orders_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/orders/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        if (!(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZvcmRlcnMlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRm9yZGVycyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRm9yZGVycyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNvbGl2aSU1Q0RvbWFpbmUlMjBWYWxsb3QlNUNzcmMlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUMlM0ElNUNVc2VycyU1Q29saXZpJTVDRG9tYWluZSUyMFZhbGxvdCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCZpc0dsb2JhbE5vdEZvdW5kRW5hYmxlZD0hIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ3FCO0FBQ2Q7QUFDUztBQUNPO0FBQ0s7QUFDbUM7QUFDakQ7QUFDTztBQUNmO0FBQ3NDO0FBQ3pCO0FBQ007QUFDQztBQUNoQjtBQUM0QjtBQUM5RjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxhQUFhLE9BQW9DLElBQUksQ0FBRTtBQUN2RCx3QkFBd0IsTUFBdUM7QUFDL0Q7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBc0Q7QUFDOUQ7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDMEY7QUFDbkY7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxLQUFxQixFQUFFLEVBRTFCLENBQUM7QUFDTjtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsS0FBd0M7QUFDdkU7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0pBQW9KO0FBQ2hLLDhCQUE4Qiw2RkFBZ0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLDZGQUFlO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDRFQUFTO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSw4QkFBOEIsNkVBQWM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDRFQUFlO0FBQzNDLDRCQUE0Qiw2RUFBZ0I7QUFDNUMsb0JBQW9CLHlHQUFrQixrQ0FBa0MsaUhBQXNCO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsZ0ZBQWM7QUFDL0UsK0RBQStELHlDQUF5QztBQUN4RztBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxRQUFRLEVBQUUsTUFBTTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLGtCQUFrQjtBQUNsQix1Q0FBdUMsUUFBUSxFQUFFLFFBQVE7QUFDekQ7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLG9CQUFvQjtBQUNuRTtBQUNBLHlCQUF5Qiw2RUFBYztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLHNGQUF5QjtBQUNqRTtBQUNBLG9DQUFvQyw0RUFBc0I7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzSkFBc0osb0VBQWM7QUFDcEssMElBQTBJLG9FQUFjO0FBQ3hKO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyw2RUFBZTtBQUNyRDtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0EsOEJBQThCLDZFQUFZO0FBQzFDO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsMkZBQW1CO0FBQ2pFO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsa0VBQVM7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxSUFBcUksNkVBQWU7QUFDcEo7QUFDQSwyR0FBMkcsaUhBQWlIO0FBQzVOO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlCQUFpQiw2RUFBYztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsd0ZBQTJCO0FBQ3ZELGtCQUFrQiw2RUFBYztBQUNoQywrQkFBK0IsNEVBQXNCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLDBGQUFxQjtBQUNsRTtBQUNBLGtCQUFrQiw2RUFBWTtBQUM5QjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDViw2RUFBNkUsZ0ZBQWM7QUFDM0YsaUNBQWlDLFFBQVEsRUFBRSxRQUFRO0FBQ25ELDBCQUEwQix1RUFBUTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLE1BQU07QUFDTiw2QkFBNkIsNkZBQWU7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsMkZBQW1CO0FBQ3JEO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDZFQUFZO0FBQzFCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCB7IGdldFJlcXVlc3RNZXRhIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcmVxdWVzdC1tZXRhXCI7XG5pbXBvcnQgeyBnZXRUcmFjZXIsIFNwYW5LaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3RyYWNlL3RyYWNlclwiO1xuaW1wb3J0IHsgbm9ybWFsaXplQXBwUGF0aCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvYXBwLXBhdGhzXCI7XG5pbXBvcnQgeyBOb2RlTmV4dFJlcXVlc3QsIE5vZGVOZXh0UmVzcG9uc2UgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9iYXNlLWh0dHAvbm9kZVwiO1xuaW1wb3J0IHsgTmV4dFJlcXVlc3RBZGFwdGVyLCBzaWduYWxGcm9tTm9kZVJlc3BvbnNlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvd2ViL3NwZWMtZXh0ZW5zaW9uL2FkYXB0ZXJzL25leHQtcmVxdWVzdFwiO1xuaW1wb3J0IHsgQmFzZVNlcnZlclNwYW4gfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvdHJhY2UvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBnZXRSZXZhbGlkYXRlUmVhc29uIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvaW5zdHJ1bWVudGF0aW9uL3V0aWxzXCI7XG5pbXBvcnQgeyBzZW5kUmVzcG9uc2UgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9zZW5kLXJlc3BvbnNlXCI7XG5pbXBvcnQgeyBmcm9tTm9kZU91dGdvaW5nSHR0cEhlYWRlcnMsIHRvTm9kZU91dGdvaW5nSHR0cEhlYWRlcnMgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci93ZWIvdXRpbHNcIjtcbmltcG9ydCB7IGdldENhY2hlQ29udHJvbEhlYWRlciB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9jYWNoZS1jb250cm9sXCI7XG5pbXBvcnQgeyBJTkZJTklURV9DQUNIRSwgTkVYVF9DQUNIRV9UQUdTX0hFQURFUiB9IGZyb20gXCJuZXh0L2Rpc3QvbGliL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgTm9GYWxsYmFja0Vycm9yIH0gZnJvbSBcIm5leHQvZGlzdC9zaGFyZWQvbGliL25vLWZhbGxiYWNrLWVycm9yLmV4dGVybmFsXCI7XG5pbXBvcnQgeyBDYWNoZWRSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yZXNwb25zZS1jYWNoZVwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXFVzZXJzXFxcXG9saXZpXFxcXERvbWFpbmUgVmFsbG90XFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXG9yZGVyc1xcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvb3JkZXJzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvb3JkZXJzXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9vcmRlcnMvcm91dGVcIlxuICAgIH0sXG4gICAgZGlzdERpcjogcHJvY2Vzcy5lbnYuX19ORVhUX1JFTEFUSVZFX0RJU1RfRElSIHx8ICcnLFxuICAgIHJlbGF0aXZlUHJvamVjdERpcjogcHJvY2Vzcy5lbnYuX19ORVhUX1JFTEFUSVZFX1BST0pFQ1RfRElSIHx8ICcnLFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcb2xpdmlcXFxcRG9tYWluZSBWYWxsb3RcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcb3JkZXJzXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgd29ya0FzeW5jU3RvcmFnZSxcbiAgICAgICAgd29ya1VuaXRBc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIHBhdGNoRmV0Y2gsICB9O1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxLCByZXMsIGN0eCkge1xuICAgIHZhciBfbmV4dENvbmZpZ19leHBlcmltZW50YWw7XG4gICAgbGV0IHNyY1BhZ2UgPSBcIi9hcGkvb3JkZXJzL3JvdXRlXCI7XG4gICAgLy8gdHVyYm9wYWNrIGRvZXNuJ3Qgbm9ybWFsaXplIGAvaW5kZXhgIGluIHRoZSBwYWdlIG5hbWVcbiAgICAvLyBzbyB3ZSBuZWVkIHRvIHRvIHByb2Nlc3MgZHluYW1pYyByb3V0ZXMgcHJvcGVybHlcbiAgICAvLyBUT0RPOiBmaXggdHVyYm9wYWNrIHByb3ZpZGluZyBkaWZmZXJpbmcgdmFsdWUgZnJvbSB3ZWJwYWNrXG4gICAgaWYgKHByb2Nlc3MuZW52LlRVUkJPUEFDSykge1xuICAgICAgICBzcmNQYWdlID0gc3JjUGFnZS5yZXBsYWNlKC9cXC9pbmRleCQvLCAnJykgfHwgJy8nO1xuICAgIH0gZWxzZSBpZiAoc3JjUGFnZSA9PT0gJy9pbmRleCcpIHtcbiAgICAgICAgLy8gd2UgYWx3YXlzIG5vcm1hbGl6ZSAvaW5kZXggc3BlY2lmaWNhbGx5XG4gICAgICAgIHNyY1BhZ2UgPSAnLyc7XG4gICAgfVxuICAgIGNvbnN0IG11bHRpWm9uZURyYWZ0TW9kZSA9IHByb2Nlc3MuZW52Ll9fTkVYVF9NVUxUSV9aT05FX0RSQUZUX01PREU7XG4gICAgY29uc3QgcHJlcGFyZVJlc3VsdCA9IGF3YWl0IHJvdXRlTW9kdWxlLnByZXBhcmUocmVxLCByZXMsIHtcbiAgICAgICAgc3JjUGFnZSxcbiAgICAgICAgbXVsdGlab25lRHJhZnRNb2RlXG4gICAgfSk7XG4gICAgaWYgKCFwcmVwYXJlUmVzdWx0KSB7XG4gICAgICAgIHJlcy5zdGF0dXNDb2RlID0gNDAwO1xuICAgICAgICByZXMuZW5kKCdCYWQgUmVxdWVzdCcpO1xuICAgICAgICBjdHgud2FpdFVudGlsID09IG51bGwgPyB2b2lkIDAgOiBjdHgud2FpdFVudGlsLmNhbGwoY3R4LCBQcm9taXNlLnJlc29sdmUoKSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCB7IGJ1aWxkSWQsIHBhcmFtcywgbmV4dENvbmZpZywgaXNEcmFmdE1vZGUsIHByZXJlbmRlck1hbmlmZXN0LCByb3V0ZXJTZXJ2ZXJDb250ZXh0LCBpc09uRGVtYW5kUmV2YWxpZGF0ZSwgcmV2YWxpZGF0ZU9ubHlHZW5lcmF0ZWQsIHJlc29sdmVkUGF0aG5hbWUgfSA9IHByZXBhcmVSZXN1bHQ7XG4gICAgY29uc3Qgbm9ybWFsaXplZFNyY1BhZ2UgPSBub3JtYWxpemVBcHBQYXRoKHNyY1BhZ2UpO1xuICAgIGxldCBpc0lzciA9IEJvb2xlYW4ocHJlcmVuZGVyTWFuaWZlc3QuZHluYW1pY1JvdXRlc1tub3JtYWxpemVkU3JjUGFnZV0gfHwgcHJlcmVuZGVyTWFuaWZlc3Qucm91dGVzW3Jlc29sdmVkUGF0aG5hbWVdKTtcbiAgICBpZiAoaXNJc3IgJiYgIWlzRHJhZnRNb2RlKSB7XG4gICAgICAgIGNvbnN0IGlzUHJlcmVuZGVyZWQgPSBCb29sZWFuKHByZXJlbmRlck1hbmlmZXN0LnJvdXRlc1tyZXNvbHZlZFBhdGhuYW1lXSk7XG4gICAgICAgIGNvbnN0IHByZXJlbmRlckluZm8gPSBwcmVyZW5kZXJNYW5pZmVzdC5keW5hbWljUm91dGVzW25vcm1hbGl6ZWRTcmNQYWdlXTtcbiAgICAgICAgaWYgKHByZXJlbmRlckluZm8pIHtcbiAgICAgICAgICAgIGlmIChwcmVyZW5kZXJJbmZvLmZhbGxiYWNrID09PSBmYWxzZSAmJiAhaXNQcmVyZW5kZXJlZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBOb0ZhbGxiYWNrRXJyb3IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgY2FjaGVLZXkgPSBudWxsO1xuICAgIGlmIChpc0lzciAmJiAhcm91dGVNb2R1bGUuaXNEZXYgJiYgIWlzRHJhZnRNb2RlKSB7XG4gICAgICAgIGNhY2hlS2V5ID0gcmVzb2x2ZWRQYXRobmFtZTtcbiAgICAgICAgLy8gZW5zdXJlIC9pbmRleCBhbmQgLyBpcyBub3JtYWxpemVkIHRvIG9uZSBrZXlcbiAgICAgICAgY2FjaGVLZXkgPSBjYWNoZUtleSA9PT0gJy9pbmRleCcgPyAnLycgOiBjYWNoZUtleTtcbiAgICB9XG4gICAgY29uc3Qgc3VwcG9ydHNEeW5hbWljUmVzcG9uc2UgPSAvLyBJZiB3ZSdyZSBpbiBkZXZlbG9wbWVudCwgd2UgYWx3YXlzIHN1cHBvcnQgZHluYW1pYyBIVE1MXG4gICAgcm91dGVNb2R1bGUuaXNEZXYgPT09IHRydWUgfHwgLy8gSWYgdGhpcyBpcyBub3QgU1NHIG9yIGRvZXMgbm90IGhhdmUgc3RhdGljIHBhdGhzLCB0aGVuIGl0IHN1cHBvcnRzXG4gICAgLy8gZHluYW1pYyBIVE1MLlxuICAgICFpc0lzcjtcbiAgICAvLyBUaGlzIGlzIGEgcmV2YWxpZGF0aW9uIHJlcXVlc3QgaWYgdGhlIHJlcXVlc3QgaXMgZm9yIGEgc3RhdGljXG4gICAgLy8gcGFnZSBhbmQgaXQgaXMgbm90IGJlaW5nIHJlc3VtZWQgZnJvbSBhIHBvc3Rwb25lZCByZW5kZXIgYW5kXG4gICAgLy8gaXQgaXMgbm90IGEgZHluYW1pYyBSU0MgcmVxdWVzdCB0aGVuIGl0IGlzIGEgcmV2YWxpZGF0aW9uXG4gICAgLy8gcmVxdWVzdC5cbiAgICBjb25zdCBpc1JldmFsaWRhdGUgPSBpc0lzciAmJiAhc3VwcG9ydHNEeW5hbWljUmVzcG9uc2U7XG4gICAgY29uc3QgbWV0aG9kID0gcmVxLm1ldGhvZCB8fCAnR0VUJztcbiAgICBjb25zdCB0cmFjZXIgPSBnZXRUcmFjZXIoKTtcbiAgICBjb25zdCBhY3RpdmVTcGFuID0gdHJhY2VyLmdldEFjdGl2ZVNjb3BlU3BhbigpO1xuICAgIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgICAgIHBhcmFtcyxcbiAgICAgICAgcHJlcmVuZGVyTWFuaWZlc3QsXG4gICAgICAgIHJlbmRlck9wdHM6IHtcbiAgICAgICAgICAgIGV4cGVyaW1lbnRhbDoge1xuICAgICAgICAgICAgICAgIGNhY2hlQ29tcG9uZW50czogQm9vbGVhbihuZXh0Q29uZmlnLmV4cGVyaW1lbnRhbC5jYWNoZUNvbXBvbmVudHMpLFxuICAgICAgICAgICAgICAgIGF1dGhJbnRlcnJ1cHRzOiBCb29sZWFuKG5leHRDb25maWcuZXhwZXJpbWVudGFsLmF1dGhJbnRlcnJ1cHRzKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN1cHBvcnRzRHluYW1pY1Jlc3BvbnNlLFxuICAgICAgICAgICAgaW5jcmVtZW50YWxDYWNoZTogZ2V0UmVxdWVzdE1ldGEocmVxLCAnaW5jcmVtZW50YWxDYWNoZScpLFxuICAgICAgICAgICAgY2FjaGVMaWZlUHJvZmlsZXM6IChfbmV4dENvbmZpZ19leHBlcmltZW50YWwgPSBuZXh0Q29uZmlnLmV4cGVyaW1lbnRhbCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9uZXh0Q29uZmlnX2V4cGVyaW1lbnRhbC5jYWNoZUxpZmUsXG4gICAgICAgICAgICBpc1JldmFsaWRhdGUsXG4gICAgICAgICAgICB3YWl0VW50aWw6IGN0eC53YWl0VW50aWwsXG4gICAgICAgICAgICBvbkNsb3NlOiAoY2IpPT57XG4gICAgICAgICAgICAgICAgcmVzLm9uKCdjbG9zZScsIGNiKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkFmdGVyVGFza0Vycm9yOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBvbkluc3RydW1lbnRhdGlvblJlcXVlc3RFcnJvcjogKGVycm9yLCBfcmVxdWVzdCwgZXJyb3JDb250ZXh0KT0+cm91dGVNb2R1bGUub25SZXF1ZXN0RXJyb3IocmVxLCBlcnJvciwgZXJyb3JDb250ZXh0LCByb3V0ZXJTZXJ2ZXJDb250ZXh0KVxuICAgICAgICB9LFxuICAgICAgICBzaGFyZWRDb250ZXh0OiB7XG4gICAgICAgICAgICBidWlsZElkXG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG5vZGVOZXh0UmVxID0gbmV3IE5vZGVOZXh0UmVxdWVzdChyZXEpO1xuICAgIGNvbnN0IG5vZGVOZXh0UmVzID0gbmV3IE5vZGVOZXh0UmVzcG9uc2UocmVzKTtcbiAgICBjb25zdCBuZXh0UmVxID0gTmV4dFJlcXVlc3RBZGFwdGVyLmZyb21Ob2RlTmV4dFJlcXVlc3Qobm9kZU5leHRSZXEsIHNpZ25hbEZyb21Ob2RlUmVzcG9uc2UocmVzKSk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaW52b2tlUm91dGVNb2R1bGUgPSBhc3luYyAoc3Bhbik9PntcbiAgICAgICAgICAgIHJldHVybiByb3V0ZU1vZHVsZS5oYW5kbGUobmV4dFJlcSwgY29udGV4dCkuZmluYWxseSgoKT0+e1xuICAgICAgICAgICAgICAgIGlmICghc3BhbikgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlcyh7XG4gICAgICAgICAgICAgICAgICAgICdodHRwLnN0YXR1c19jb2RlJzogcmVzLnN0YXR1c0NvZGUsXG4gICAgICAgICAgICAgICAgICAgICduZXh0LnJzYyc6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgcm9vdFNwYW5BdHRyaWJ1dGVzID0gdHJhY2VyLmdldFJvb3RTcGFuQXR0cmlidXRlcygpO1xuICAgICAgICAgICAgICAgIC8vIFdlIHdlcmUgdW5hYmxlIHRvIGdldCBhdHRyaWJ1dGVzLCBwcm9iYWJseSBPVEVMIGlzIG5vdCBlbmFibGVkXG4gICAgICAgICAgICAgICAgaWYgKCFyb290U3BhbkF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocm9vdFNwYW5BdHRyaWJ1dGVzLmdldCgnbmV4dC5zcGFuX3R5cGUnKSAhPT0gQmFzZVNlcnZlclNwYW4uaGFuZGxlUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFVuZXhwZWN0ZWQgcm9vdCBzcGFuIHR5cGUgJyR7cm9vdFNwYW5BdHRyaWJ1dGVzLmdldCgnbmV4dC5zcGFuX3R5cGUnKX0nLiBQbGVhc2UgcmVwb3J0IHRoaXMgTmV4dC5qcyBpc3N1ZSBodHRwczovL2dpdGh1Yi5jb20vdmVyY2VsL25leHQuanNgKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCByb3V0ZSA9IHJvb3RTcGFuQXR0cmlidXRlcy5nZXQoJ25leHQucm91dGUnKTtcbiAgICAgICAgICAgICAgICBpZiAocm91dGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGAke21ldGhvZH0gJHtyb3V0ZX1gO1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ25leHQucm91dGUnOiByb3V0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdodHRwLnJvdXRlJzogcm91dGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAnbmV4dC5zcGFuX25hbWUnOiBuYW1lXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnVwZGF0ZU5hbWUobmFtZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi51cGRhdGVOYW1lKGAke21ldGhvZH0gJHtyZXEudXJsfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBoYW5kbGVSZXNwb25zZSA9IGFzeW5jIChjdXJyZW50U3Bhbik9PntcbiAgICAgICAgICAgIHZhciBfY2FjaGVFbnRyeV92YWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlR2VuZXJhdG9yID0gYXN5bmMgKHsgcHJldmlvdXNDYWNoZUVudHJ5IH0pPT57XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFnZXRSZXF1ZXN0TWV0YShyZXEsICdtaW5pbWFsTW9kZScpICYmIGlzT25EZW1hbmRSZXZhbGlkYXRlICYmIHJldmFsaWRhdGVPbmx5R2VuZXJhdGVkICYmICFwcmV2aW91c0NhY2hlRW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5zdGF0dXNDb2RlID0gNDA0O1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb24tZGVtYW5kIHJldmFsaWRhdGUgYWx3YXlzIHNldHMgdGhpcyBoZWFkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5zZXRIZWFkZXIoJ3gtbmV4dGpzLWNhY2hlJywgJ1JFVkFMSURBVEVEJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMuZW5kKCdUaGlzIHBhZ2UgY291bGQgbm90IGJlIGZvdW5kJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGludm9rZVJvdXRlTW9kdWxlKGN1cnJlbnRTcGFuKTtcbiAgICAgICAgICAgICAgICAgICAgcmVxLmZldGNoTWV0cmljcyA9IGNvbnRleHQucmVuZGVyT3B0cy5mZXRjaE1ldHJpY3M7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwZW5kaW5nV2FpdFVudGlsID0gY29udGV4dC5yZW5kZXJPcHRzLnBlbmRpbmdXYWl0VW50aWw7XG4gICAgICAgICAgICAgICAgICAgIC8vIEF0dGVtcHQgdXNpbmcgcHJvdmlkZWQgd2FpdFVudGlsIGlmIGF2YWlsYWJsZVxuICAgICAgICAgICAgICAgICAgICAvLyBpZiBpdCdzIG5vdCB3ZSBmYWxsYmFjayB0byBzZW5kUmVzcG9uc2UncyBoYW5kbGluZ1xuICAgICAgICAgICAgICAgICAgICBpZiAocGVuZGluZ1dhaXRVbnRpbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN0eC53YWl0VW50aWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgud2FpdFVudGlsKHBlbmRpbmdXYWl0VW50aWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmdXYWl0VW50aWwgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FjaGVUYWdzID0gY29udGV4dC5yZW5kZXJPcHRzLmNvbGxlY3RlZFRhZ3M7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSByZXF1ZXN0IGlzIGZvciBhIHN0YXRpYyByZXNwb25zZSwgd2UgY2FuIGNhY2hlIGl0IHNvIGxvbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gYXMgaXQncyBub3QgZWRnZS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzSXNyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBibG9iID0gYXdhaXQgcmVzcG9uc2UuYmxvYigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29weSB0aGUgaGVhZGVycyBmcm9tIHRoZSByZXNwb25zZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSB0b05vZGVPdXRnb2luZ0h0dHBIZWFkZXJzKHJlc3BvbnNlLmhlYWRlcnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhY2hlVGFncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbTkVYVF9DQUNIRV9UQUdTX0hFQURFUl0gPSBjYWNoZVRhZ3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddICYmIGJsb2IudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddID0gYmxvYi50eXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmV2YWxpZGF0ZSA9IHR5cGVvZiBjb250ZXh0LnJlbmRlck9wdHMuY29sbGVjdGVkUmV2YWxpZGF0ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgY29udGV4dC5yZW5kZXJPcHRzLmNvbGxlY3RlZFJldmFsaWRhdGUgPj0gSU5GSU5JVEVfQ0FDSEUgPyBmYWxzZSA6IGNvbnRleHQucmVuZGVyT3B0cy5jb2xsZWN0ZWRSZXZhbGlkYXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhwaXJlID0gdHlwZW9mIGNvbnRleHQucmVuZGVyT3B0cy5jb2xsZWN0ZWRFeHBpcmUgPT09ICd1bmRlZmluZWQnIHx8IGNvbnRleHQucmVuZGVyT3B0cy5jb2xsZWN0ZWRFeHBpcmUgPj0gSU5GSU5JVEVfQ0FDSEUgPyB1bmRlZmluZWQgOiBjb250ZXh0LnJlbmRlck9wdHMuY29sbGVjdGVkRXhwaXJlO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBjYWNoZSBlbnRyeSBmb3IgdGhlIHJlc3BvbnNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FjaGVFbnRyeSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBraW5kOiBDYWNoZWRSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogQnVmZmVyLmZyb20oYXdhaXQgYmxvYi5hcnJheUJ1ZmZlcigpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVDb250cm9sOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldmFsaWRhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGlyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVFbnRyeTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNlbmQgcmVzcG9uc2Ugd2l0aG91dCBjYWNoaW5nIGlmIG5vdCBJU1JcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHNlbmRSZXNwb25zZShub2RlTmV4dFJlcSwgbm9kZU5leHRSZXMsIHJlc3BvbnNlLCBjb250ZXh0LnJlbmRlck9wdHMucGVuZGluZ1dhaXRVbnRpbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGlzIGlzIGEgYmFja2dyb3VuZCByZXZhbGlkYXRlIHdlIG5lZWQgdG8gcmVwb3J0XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSByZXF1ZXN0IGVycm9yIGhlcmUgYXMgaXQgd29uJ3QgYmUgYnViYmxlZFxuICAgICAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNDYWNoZUVudHJ5ID09IG51bGwgPyB2b2lkIDAgOiBwcmV2aW91c0NhY2hlRW50cnkuaXNTdGFsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgcm91dGVNb2R1bGUub25SZXF1ZXN0RXJyb3IocmVxLCBlcnIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJLaW5kOiAnQXBwIFJvdXRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVQYXRoOiBzcmNQYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlVHlwZTogJ3JvdXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXZhbGlkYXRlUmVhc29uOiBnZXRSZXZhbGlkYXRlUmVhc29uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNSZXZhbGlkYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc09uRGVtYW5kUmV2YWxpZGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCByb3V0ZXJTZXJ2ZXJDb250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlRW50cnkgPSBhd2FpdCByb3V0ZU1vZHVsZS5oYW5kbGVSZXNwb25zZSh7XG4gICAgICAgICAgICAgICAgcmVxLFxuICAgICAgICAgICAgICAgIG5leHRDb25maWcsXG4gICAgICAgICAgICAgICAgY2FjaGVLZXksXG4gICAgICAgICAgICAgICAgcm91dGVLaW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICAgICAgICAgIGlzRmFsbGJhY2s6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHByZXJlbmRlck1hbmlmZXN0LFxuICAgICAgICAgICAgICAgIGlzUm91dGVQUFJFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc09uRGVtYW5kUmV2YWxpZGF0ZSxcbiAgICAgICAgICAgICAgICByZXZhbGlkYXRlT25seUdlbmVyYXRlZCxcbiAgICAgICAgICAgICAgICByZXNwb25zZUdlbmVyYXRvcixcbiAgICAgICAgICAgICAgICB3YWl0VW50aWw6IGN0eC53YWl0VW50aWxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gd2UgZG9uJ3QgY3JlYXRlIGEgY2FjaGVFbnRyeSBmb3IgSVNSXG4gICAgICAgICAgICBpZiAoIWlzSXNyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKGNhY2hlRW50cnkgPT0gbnVsbCA/IHZvaWQgMCA6IChfY2FjaGVFbnRyeV92YWx1ZSA9IGNhY2hlRW50cnkudmFsdWUpID09IG51bGwgPyB2b2lkIDAgOiBfY2FjaGVFbnRyeV92YWx1ZS5raW5kKSAhPT0gQ2FjaGVkUm91dGVLaW5kLkFQUF9ST1VURSkge1xuICAgICAgICAgICAgICAgIHZhciBfY2FjaGVFbnRyeV92YWx1ZTE7XG4gICAgICAgICAgICAgICAgdGhyb3cgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ldyBFcnJvcihgSW52YXJpYW50OiBhcHAtcm91dGUgcmVjZWl2ZWQgaW52YWxpZCBjYWNoZSBlbnRyeSAke2NhY2hlRW50cnkgPT0gbnVsbCA/IHZvaWQgMCA6IChfY2FjaGVFbnRyeV92YWx1ZTEgPSBjYWNoZUVudHJ5LnZhbHVlKSA9PSBudWxsID8gdm9pZCAwIDogX2NhY2hlRW50cnlfdmFsdWUxLmtpbmR9YCksIFwiX19ORVhUX0VSUk9SX0NPREVcIiwge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogXCJFNzAxXCIsXG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZ2V0UmVxdWVzdE1ldGEocmVxLCAnbWluaW1hbE1vZGUnKSkge1xuICAgICAgICAgICAgICAgIHJlcy5zZXRIZWFkZXIoJ3gtbmV4dGpzLWNhY2hlJywgaXNPbkRlbWFuZFJldmFsaWRhdGUgPyAnUkVWQUxJREFURUQnIDogY2FjaGVFbnRyeS5pc01pc3MgPyAnTUlTUycgOiBjYWNoZUVudHJ5LmlzU3RhbGUgPyAnU1RBTEUnIDogJ0hJVCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRHJhZnQgbW9kZSBzaG91bGQgbmV2ZXIgYmUgY2FjaGVkXG4gICAgICAgICAgICBpZiAoaXNEcmFmdE1vZGUpIHtcbiAgICAgICAgICAgICAgICByZXMuc2V0SGVhZGVyKCdDYWNoZS1Db250cm9sJywgJ3ByaXZhdGUsIG5vLWNhY2hlLCBuby1zdG9yZSwgbWF4LWFnZT0wLCBtdXN0LXJldmFsaWRhdGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSBmcm9tTm9kZU91dGdvaW5nSHR0cEhlYWRlcnMoY2FjaGVFbnRyeS52YWx1ZS5oZWFkZXJzKTtcbiAgICAgICAgICAgIGlmICghKGdldFJlcXVlc3RNZXRhKHJlcSwgJ21pbmltYWxNb2RlJykgJiYgaXNJc3IpKSB7XG4gICAgICAgICAgICAgICAgaGVhZGVycy5kZWxldGUoTkVYVF9DQUNIRV9UQUdTX0hFQURFUik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiBjYWNoZSBjb250cm9sIGlzIGFscmVhZHkgc2V0IG9uIHRoZSByZXNwb25zZSB3ZSBkb24ndFxuICAgICAgICAgICAgLy8gb3ZlcnJpZGUgaXQgdG8gYWxsb3cgdXNlcnMgdG8gY3VzdG9taXplIGl0IHZpYSBuZXh0LmNvbmZpZ1xuICAgICAgICAgICAgaWYgKGNhY2hlRW50cnkuY2FjaGVDb250cm9sICYmICFyZXMuZ2V0SGVhZGVyKCdDYWNoZS1Db250cm9sJykgJiYgIWhlYWRlcnMuZ2V0KCdDYWNoZS1Db250cm9sJykpIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzLnNldCgnQ2FjaGUtQ29udHJvbCcsIGdldENhY2hlQ29udHJvbEhlYWRlcihjYWNoZUVudHJ5LmNhY2hlQ29udHJvbCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgc2VuZFJlc3BvbnNlKG5vZGVOZXh0UmVxLCBub2RlTmV4dFJlcywgbmV3IFJlc3BvbnNlKGNhY2hlRW50cnkudmFsdWUuYm9keSwge1xuICAgICAgICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgc3RhdHVzOiBjYWNoZUVudHJ5LnZhbHVlLnN0YXR1cyB8fCAyMDBcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9O1xuICAgICAgICAvLyBUT0RPOiBhY3RpdmVTcGFuIGNvZGUgcGF0aCBpcyBmb3Igd2hlbiB3cmFwcGVkIGJ5XG4gICAgICAgIC8vIG5leHQtc2VydmVyIGNhbiBiZSByZW1vdmVkIHdoZW4gdGhpcyBpcyBubyBsb25nZXIgdXNlZFxuICAgICAgICBpZiAoYWN0aXZlU3Bhbikge1xuICAgICAgICAgICAgYXdhaXQgaGFuZGxlUmVzcG9uc2UoYWN0aXZlU3Bhbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCB0cmFjZXIud2l0aFByb3BhZ2F0ZWRDb250ZXh0KHJlcS5oZWFkZXJzLCAoKT0+dHJhY2VyLnRyYWNlKEJhc2VTZXJ2ZXJTcGFuLmhhbmRsZVJlcXVlc3QsIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbk5hbWU6IGAke21ldGhvZH0gJHtyZXEudXJsfWAsXG4gICAgICAgICAgICAgICAgICAgIGtpbmQ6IFNwYW5LaW5kLlNFUlZFUixcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2h0dHAubWV0aG9kJzogbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2h0dHAudGFyZ2V0JzogcmVxLnVybFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgaGFuZGxlUmVzcG9uc2UpKTtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAoIShlcnIgaW5zdGFuY2VvZiBOb0ZhbGxiYWNrRXJyb3IpKSB7XG4gICAgICAgICAgICBhd2FpdCByb3V0ZU1vZHVsZS5vblJlcXVlc3RFcnJvcihyZXEsIGVyciwge1xuICAgICAgICAgICAgICAgIHJvdXRlcktpbmQ6ICdBcHAgUm91dGVyJyxcbiAgICAgICAgICAgICAgICByb3V0ZVBhdGg6IG5vcm1hbGl6ZWRTcmNQYWdlLFxuICAgICAgICAgICAgICAgIHJvdXRlVHlwZTogJ3JvdXRlJyxcbiAgICAgICAgICAgICAgICByZXZhbGlkYXRlUmVhc29uOiBnZXRSZXZhbGlkYXRlUmVhc29uKHtcbiAgICAgICAgICAgICAgICAgICAgaXNSZXZhbGlkYXRlLFxuICAgICAgICAgICAgICAgICAgICBpc09uRGVtYW5kUmV2YWxpZGF0ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZXRocm93IHNvIHRoYXQgd2UgY2FuIGhhbmRsZSBzZXJ2aW5nIGVycm9yIHBhZ2VcbiAgICAgICAgLy8gSWYgdGhpcyBpcyBkdXJpbmcgc3RhdGljIGdlbmVyYXRpb24sIHRocm93IHRoZSBlcnJvciBhZ2Fpbi5cbiAgICAgICAgaWYgKGlzSXNyKSB0aHJvdyBlcnI7XG4gICAgICAgIC8vIE90aGVyd2lzZSwgc2VuZCBhIDUwMCByZXNwb25zZS5cbiAgICAgICAgYXdhaXQgc2VuZFJlc3BvbnNlKG5vZGVOZXh0UmVxLCBub2RlTmV4dFJlcywgbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgICAgIHN0YXR1czogNTAwXG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Forders%2Froute&page=%2Fapi%2Forders%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2Froute.ts&appDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/orders/route.ts":
/*!*************************************!*\
  !*** ./src/app/api/orders/route.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_supabase_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase/server */ \"(rsc)/./src/lib/supabase/server.ts\");\n/* harmony import */ var _lib_validators_schemas__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/validators/schemas */ \"(rsc)/./src/lib/validators/schemas.ts\");\n/* harmony import */ var _lib_vat_calculator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/vat/calculator */ \"(rsc)/./src/lib/vat/calculator.ts\");\n/* harmony import */ var _lib_mollie_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/mollie/client */ \"(rsc)/./src/lib/mollie/client.ts\");\n/* harmony import */ var _lib_sendcloud_client__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/sendcloud/client */ \"(rsc)/./src/lib/sendcloud/client.ts\");\n\n\n\n\n\n\nasync function POST(request) {\n    try {\n        // Get authenticated user\n        const user = await (0,_lib_supabase_server__WEBPACK_IMPORTED_MODULE_1__.getServerUser)();\n        if (!user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Authentication required'\n            }, {\n                status: 401\n            });\n        }\n        // Parse and validate request body\n        const body = await request.json();\n        const validation = (0,_lib_validators_schemas__WEBPACK_IMPORTED_MODULE_2__.validateSchema)(_lib_validators_schemas__WEBPACK_IMPORTED_MODULE_2__.orderSchema, body);\n        if (!validation.success) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Invalid order data',\n                details: validation.errors\n            }, {\n                status: 400\n            });\n        }\n        const orderData = validation.data;\n        // Get current cart items\n        const cartItems = await (0,_lib_supabase_server__WEBPACK_IMPORTED_MODULE_1__.getCartItems)(user.id);\n        if (cartItems.length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Cart is empty'\n            }, {\n                status: 400\n            });\n        }\n        // Validate stock availability\n        const stockIssues = cartItems.filter((item)=>item.wine_products.stock_quantity < item.quantity || !item.wine_products.is_active);\n        if (stockIssues.length > 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Stock issues found',\n                issues: stockIssues.map((item)=>({\n                        product_id: item.product_id,\n                        product_name: item.wine_products.name,\n                        requested: item.quantity,\n                        available: item.wine_products.stock_quantity,\n                        is_active: item.wine_products.is_active\n                    }))\n            }, {\n                status: 409\n            });\n        }\n        // Calculate order totals\n        const orderItems = cartItems.map((item)=>({\n                product_id: item.product_id,\n                quantity: item.quantity,\n                unit_price: item.wine_products.price\n            }));\n        const subtotal = orderItems.reduce((sum, item)=>sum + item.quantity * item.unit_price, 0);\n        // Calculate shipping\n        const totalBottles = orderItems.reduce((sum, item)=>sum + item.quantity, 0);\n        const shippingRates = await (0,_lib_sendcloud_client__WEBPACK_IMPORTED_MODULE_5__.calculateWineShipping)(orderData.shippingAddress, totalBottles, subtotal);\n        const shippingCost = shippingRates.length > 0 ? shippingRates[0].price : 0;\n        // Calculate VAT\n        const vatCalculation = (0,_lib_vat_calculator__WEBPACK_IMPORTED_MODULE_3__.calculateVat)({\n            amount: subtotal,\n            shipping_amount: shippingCost,\n            country_code: orderData.shippingAddress.country,\n            customer_type: 'consumer'\n        });\n        const totalAmount = vatCalculation.total_amount;\n        // Validate calculated totals match provided totals (prevent tampering)\n        const toleranceInCents = 10 // Allow 10 cent tolerance for rounding\n        ;\n        if (Math.abs(orderData.subtotal - subtotal) > toleranceInCents || Math.abs(orderData.vatAmount - vatCalculation.vat_amount) > toleranceInCents || Math.abs(orderData.shippingCost - shippingCost) > toleranceInCents || Math.abs(orderData.totalAmount - totalAmount) > toleranceInCents) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Order total mismatch',\n                calculated: {\n                    subtotal,\n                    vatAmount: vatCalculation.vat_amount,\n                    shippingCost,\n                    totalAmount\n                },\n                provided: {\n                    subtotal: orderData.subtotal,\n                    vatAmount: orderData.vatAmount,\n                    shippingCost: orderData.shippingCost,\n                    totalAmount: orderData.totalAmount\n                }\n            }, {\n                status: 400\n            });\n        }\n        // Create order in database\n        const order = await (0,_lib_supabase_server__WEBPACK_IMPORTED_MODULE_1__.createOrder)({\n            user_id: user.id,\n            customer_email: orderData.customerEmail,\n            customer_first_name: orderData.customerFirstName,\n            customer_last_name: orderData.customerLastName,\n            shipping_address: orderData.shippingAddress,\n            billing_address: orderData.billingAddress,\n            items: orderItems,\n            subtotal,\n            vat_amount: vatCalculation.vat_amount,\n            shipping_cost: shippingCost,\n            total_amount: totalAmount,\n            payment_method: orderData.paymentMethod,\n            status: 'pending'\n        });\n        // Create payment with Mollie\n        let paymentUrl = null;\n        try {\n            const payment = await (0,_lib_mollie_client__WEBPACK_IMPORTED_MODULE_4__.createWinePayment)({\n                orderId: order.id,\n                amount: totalAmount,\n                customerEmail: orderData.customerEmail,\n                customerName: `${orderData.customerFirstName} ${orderData.customerLastName}`,\n                description: `Wine order ${order.id.substring(0, 8)}`,\n                locale: request.headers.get('accept-language')?.includes('fr') ? 'fr_FR' : 'en_US'\n            });\n            paymentUrl = payment.links.checkout;\n        } catch (paymentError) {\n            console.error('Payment creation failed:', paymentError);\n            // Return order info but indicate payment issue\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                order: {\n                    id: order.id,\n                    status: 'payment_failed',\n                    total_amount: totalAmount,\n                    currency: 'EUR'\n                },\n                error: 'Payment processing failed',\n                details: 'Please try again or contact support'\n            }, {\n                status: 402\n            });\n        }\n        // Clear cart after successful order creation\n        try {\n            for (const item of cartItems){\n                await (0,_lib_supabase_server__WEBPACK_IMPORTED_MODULE_1__.removeFromCart)(user.id, item.id);\n            }\n        } catch (cartError) {\n            console.error('Failed to clear cart:', cartError);\n        // Don't fail the order for cart clearing issues\n        }\n        // Format order response\n        const orderResponse = {\n            id: order.id,\n            order_number: order.id.substring(0, 8).toUpperCase(),\n            status: order.status,\n            created_at: order.created_at,\n            customer: {\n                email: order.customer_email,\n                first_name: order.customer_first_name,\n                last_name: order.customer_last_name\n            },\n            addresses: {\n                shipping: order.shipping_address,\n                billing: order.billing_address\n            },\n            items: orderItems.map((item)=>{\n                const product = cartItems.find((ci)=>ci.product_id === item.product_id)?.wine_products;\n                return {\n                    product_id: item.product_id,\n                    product_name: product?.name,\n                    product_sku: product?.sku,\n                    quantity: item.quantity,\n                    unit_price: item.unit_price,\n                    unit_price_display: (item.unit_price / 100).toFixed(2),\n                    total_price: item.quantity * item.unit_price,\n                    total_price_display: (item.quantity * item.unit_price / 100).toFixed(2)\n                };\n            }),\n            totals: {\n                subtotal,\n                subtotal_display: (subtotal / 100).toFixed(2),\n                vat_amount: vatCalculation.vat_amount,\n                vat_amount_display: (vatCalculation.vat_amount / 100).toFixed(2),\n                vat_rate: vatCalculation.vat_rate,\n                vat_rate_display: `${(vatCalculation.vat_rate * 100).toFixed(0)}%`,\n                shipping_cost: shippingCost,\n                shipping_cost_display: (shippingCost / 100).toFixed(2),\n                total_amount: totalAmount,\n                total_amount_display: (totalAmount / 100).toFixed(2),\n                currency: 'EUR'\n            },\n            vat_details: {\n                country: vatCalculation.country,\n                country_code: vatCalculation.country_code,\n                is_reverse_charge: vatCalculation.is_reverse_charge,\n                breakdown: vatCalculation.breakdown\n            },\n            payment: {\n                method: orderData.paymentMethod,\n                status: 'pending',\n                payment_url: paymentUrl,\n                instructions: paymentUrl ? 'Complete your payment using the provided link' : 'Payment processing failed - please contact support'\n            },\n            next_steps: [\n                'Complete payment using the provided link',\n                'You will receive an email confirmation',\n                'Track your order status in your account',\n                'Prepare valid ID for age verification upon delivery'\n            ]\n        };\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: 'Order created successfully',\n            order: orderResponse\n        }, {\n            status: 201\n        });\n    } catch (error) {\n        console.error('Error creating order:', error);\n        // Handle specific error types\n        if (error instanceof Error) {\n            if (error.message.includes('stock')) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Insufficient stock for one or more items'\n                }, {\n                    status: 409\n                });\n            }\n            if (error.message.includes('payment')) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Payment processing failed'\n                }, {\n                    status: 402\n                });\n            }\n            if (error.message.includes('shipping')) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Shipping calculation failed'\n                }, {\n                    status: 400\n                });\n            }\n            if (error.message.includes('vat')) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'VAT calculation failed'\n                }, {\n                    status: 400\n                });\n            }\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Failed to create order'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/orders/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/mollie/client.ts":
/*!**********************************!*\
  !*** ./src/lib/mollie/client.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MollieError: () => (/* binding */ MollieError),\n/* harmony export */   createWinePayment: () => (/* binding */ createWinePayment),\n/* harmony export */   formatPaymentAmount: () => (/* binding */ formatPaymentAmount),\n/* harmony export */   getPaymentStatusColor: () => (/* binding */ getPaymentStatusColor),\n/* harmony export */   getPaymentStatusLabel: () => (/* binding */ getPaymentStatusLabel),\n/* harmony export */   handlePaymentWebhook: () => (/* binding */ handlePaymentWebhook),\n/* harmony export */   mollieClient: () => (/* binding */ mollieClient)\n/* harmony export */ });\n/* harmony import */ var _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @mollie/api-client */ \"(rsc)/./node_modules/@mollie/api-client/dist/mollie.esm.js\");\n// Mollie payment service for wine e-commerce\n// Updated to use latest @mollie/api-client patterns\n\nclass MollieClient {\n    constructor(){\n        this.apiKey = process.env.MOLLIE_API_KEY || '';\n        this.isTestMode = this.apiKey.startsWith('test_');\n        if (!this.apiKey) {\n            throw new Error('MOLLIE_API_KEY environment variable is required');\n        }\n        // Use the official @mollie/api-client factory function\n        this.mollieClient = (0,_mollie_api_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n            apiKey: this.apiKey\n        });\n    }\n    /**\n   * Create a new payment using the official client\n   */ async createPayment(paymentData) {\n        const payload = {\n            amount: {\n                currency: paymentData.currency || 'EUR',\n                value: this.formatAmount(paymentData.amount, paymentData.currency || 'EUR')\n            },\n            description: paymentData.description,\n            redirectUrl: paymentData.redirectUrl,\n            webhookUrl: paymentData.webhookUrl,\n            metadata: {\n                orderId: paymentData.orderId,\n                customerEmail: paymentData.customerEmail,\n                ...paymentData.metadata\n            },\n            locale: paymentData.locale || 'en_US',\n            method: paymentData.method || undefined\n        };\n        try {\n            const payment = await this.mollieClient.payments.create(payload);\n            return this.transformPayment(payment);\n        } catch (error) {\n            throw new MollieError(error.title || 'Payment creation failed', error.status || 500, error.detail || error.message || 'Unknown error', error);\n        }\n    }\n    /**\n   * Get payment details using the official client\n   */ async getPayment(paymentId) {\n        try {\n            const payment = await this.mollieClient.payments.get(paymentId);\n            return this.transformPayment(payment);\n        } catch (error) {\n            throw new MollieError(error.title || 'Payment fetch failed', error.status || 500, error.detail || error.message || 'Unknown error', error);\n        }\n    }\n    /**\n   * Cancel a payment using the official client\n   */ async cancelPayment(paymentId) {\n        try {\n            const payment = await this.mollieClient.payments.cancel(paymentId);\n            return this.transformPayment(payment);\n        } catch (error) {\n            throw new MollieError(error.title || 'Payment cancellation failed', error.status || 500, error.detail || error.message || 'Unknown error', error);\n        }\n    }\n    /**\n   * Create a refund\n   */ async createRefund(paymentId, amount, description, currency = 'EUR') {\n        const payload = {};\n        if (amount) {\n            payload.amount = {\n                currency,\n                value: this.formatAmount(amount, currency)\n            };\n        }\n        if (description) {\n            payload.description = description;\n        }\n        const response = await this.makeRequest('POST', `/payments/${paymentId}/refunds`, payload);\n        return response;\n    }\n    /**\n   * Get available payment methods using the official client\n   */ async getPaymentMethods(amount, currency = 'EUR', locale) {\n        try {\n            const options = {};\n            if (amount) {\n                options.amount = {\n                    currency,\n                    value: this.formatAmount(amount, currency)\n                };\n            }\n            if (locale) {\n                options.locale = locale;\n            }\n            const methodsResponse = await this.mollieClient.methods.list(options);\n            return methodsResponse.map((method)=>({\n                    id: method.id,\n                    name: method.description,\n                    minimumAmount: method.minimumAmount ? parseFloat(method.minimumAmount.value) * 100 : undefined,\n                    maximumAmount: method.maximumAmount ? parseFloat(method.maximumAmount.value) * 100 : undefined,\n                    image: method.image?.size2x || method.image?.size1x\n                }));\n        } catch (error) {\n            throw new MollieError(error.title || 'Payment methods fetch failed', error.status || 500, error.detail || error.message || 'Unknown error', error);\n        }\n    }\n    /**\n   * Verify webhook signature\n   */ verifyWebhookSignature(body, signature) {\n        // Mollie doesn't use webhook signatures by default\n        // Instead, verify by making API call to get payment status\n        // This is handled in the webhook verification method\n        return true;\n    }\n    /**\n   * Verify webhook by fetching payment from Mollie\n   */ async verifyWebhook(paymentId) {\n        try {\n            return await this.getPayment(paymentId);\n        } catch (error) {\n            console.error('Failed to verify webhook:', error);\n            return null;\n        }\n    }\n    /**\n   * Check if payment is successful (using official enum)\n   */ isPaymentSuccessful(status) {\n        return status === _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.paid || status === _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.authorized;\n    }\n    /**\n   * Check if payment is pending (using official enum)\n   */ isPaymentPending(status) {\n        return status === _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.open || status === _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.pending;\n    }\n    /**\n   * Check if payment failed (using official enum)\n   */ isPaymentFailed(status) {\n        return status === _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.failed || status === _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.canceled || status === _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.expired;\n    }\n    /**\n   * Get wine-appropriate payment methods (using official enum)\n   * Excludes methods not suitable for alcohol sales\n   */ getWineCompatibleMethods() {\n        return [\n            _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentMethod.ideal,\n            _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentMethod.creditcard,\n            _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentMethod.bancontact,\n            _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentMethod.sofort,\n            _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentMethod.eps,\n            _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentMethod.giropay,\n            _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentMethod.belfius,\n            _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentMethod.paypal,\n            _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentMethod.applepay,\n            _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentMethod.przelewy24\n        ];\n    }\n    /**\n   * Format amount for Mollie API (string with 2 decimals)\n   */ formatAmount(amount, currency) {\n        // Amount is in cents, convert to decimal string\n        const decimalAmount = amount / 100;\n        return decimalAmount.toFixed(2);\n    }\n    /**\n   * Transform Mollie API response to our internal format\n   */ transformPayment(payment) {\n        return {\n            id: payment.id,\n            status: payment.status,\n            amount: {\n                value: payment.amount.value,\n                currency: payment.amount.currency\n            },\n            description: payment.description,\n            method: payment.method,\n            metadata: payment.metadata,\n            createdAt: payment.createdAt,\n            paidAt: payment.paidAt,\n            canceledAt: payment.canceledAt,\n            expiredAt: payment.expiredAt,\n            failedAt: payment.failedAt,\n            links: {\n                checkout: payment.getCheckoutUrl?.() || payment._links?.checkout?.href,\n                self: payment._links?.self?.href\n            },\n            orderId: payment.metadata?.orderId\n        };\n    }\n}\nclass MollieError extends Error {\n    constructor(message, status, detail, data){\n        super(message);\n        this.name = 'MollieError';\n        this.status = status;\n        this.detail = detail;\n        this.data = data;\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            status: this.status,\n            detail: this.detail,\n            data: this.data\n        };\n    }\n}\n// Export singleton instance\nconst mollieClient = new MollieClient();\n// Helper functions\nconst createWinePayment = async (orderData)=>{\n    const baseUrl = \"http://localhost:3000\" || 0 || (0);\n    return mollieClient.createPayment({\n        orderId: orderData.orderId,\n        amount: orderData.amount,\n        currency: 'EUR',\n        description: orderData.description || `Wine order ${orderData.orderId}`,\n        customerEmail: orderData.customerEmail,\n        customerName: orderData.customerName,\n        redirectUrl: `${baseUrl}/orders/${orderData.orderId}?payment=success`,\n        webhookUrl: `${baseUrl}/api/webhooks/mollie`,\n        locale: orderData.locale || 'en_US',\n        method: mollieClient.getWineCompatibleMethods(),\n        metadata: {\n            orderType: 'wine',\n            customerAge: 'verified' // Assume age verification completed\n        }\n    });\n};\nconst handlePaymentWebhook = async (paymentId)=>{\n    const payment = await mollieClient.verifyWebhook(paymentId);\n    if (!payment) {\n        throw new Error('Invalid payment webhook');\n    }\n    return {\n        payment,\n        isSuccessful: mollieClient.isPaymentSuccessful(payment.status),\n        isPending: mollieClient.isPaymentPending(payment.status),\n        isFailed: mollieClient.isPaymentFailed(payment.status)\n    };\n};\nconst formatPaymentAmount = (amount, currency = 'EUR')=>{\n    return new Intl.NumberFormat('fr-FR', {\n        style: 'currency',\n        currency\n    }).format(amount / 100);\n};\n// Payment status helpers for UI\nconst getPaymentStatusColor = (status)=>{\n    switch(status){\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.paid:\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.authorized:\n            return 'green';\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.open:\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.pending:\n            return 'blue';\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.failed:\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.canceled:\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.expired:\n            return 'red';\n        default:\n            return 'gray';\n    }\n};\nconst getPaymentStatusLabel = (status)=>{\n    switch(status){\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.open:\n            return 'Awaiting payment';\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.paid:\n            return 'Paid';\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.authorized:\n            return 'Authorized';\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.pending:\n            return 'Processing';\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.canceled:\n            return 'Canceled';\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.expired:\n            return 'Expired';\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.failed:\n            return 'Failed';\n        default:\n            return 'Unknown';\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/mollie/client.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/sendcloud/client.ts":
/*!*************************************!*\
  !*** ./src/lib/sendcloud/client.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SendcloudError: () => (/* binding */ SendcloudError),\n/* harmony export */   calculateWineShipping: () => (/* binding */ calculateWineShipping),\n/* harmony export */   createWineShipment: () => (/* binding */ createWineShipment),\n/* harmony export */   formatShippingPrice: () => (/* binding */ formatShippingPrice),\n/* harmony export */   getDeliveryEstimate: () => (/* binding */ getDeliveryEstimate),\n/* harmony export */   sendcloudClient: () => (/* binding */ sendcloudClient),\n/* harmony export */   validateWineShipment: () => (/* binding */ validateWineShipment)\n/* harmony export */ });\n// Sendcloud shipping service for wine e-commerce\nclass SendcloudClient {\n    constructor(){\n        this.apiKey = process.env.SENDCLOUD_PUBLIC_KEY || '';\n        this.apiSecret = process.env.SENDCLOUD_SECRET_KEY || '';\n        this.baseUrl = 'https://panel.sendcloud.sc/api/v2';\n        this.isTestMode = \"development\" !== 'production';\n        if (!this.apiKey || !this.apiSecret) {\n            throw new Error('SENDCLOUD_PUBLIC_KEY and SENDCLOUD_SECRET_KEY environment variables are required');\n        }\n    }\n    /**\n   * Get available shipping methods for destination\n   */ async getShippingMethods(country, weight, value) {\n        const params = new URLSearchParams({\n            to_country: country.toUpperCase()\n        });\n        if (weight) {\n            params.append('weight', weight.toString());\n        }\n        if (value) {\n            params.append('value', (value / 100).toString()); // Convert from cents\n        }\n        const response = await this.makeRequest('GET', `/shipping_methods?${params.toString()}`);\n        return response.shipping_methods || [];\n    }\n    /**\n   * Calculate shipping rates for specific destination and package\n   */ async calculateRates(destination, packageInfo) {\n        // Get available shipping methods\n        const methods = await this.getShippingMethods(destination.country, packageInfo.weight, packageInfo.value);\n        // Filter methods suitable for wine shipping\n        const wineCompatibleMethods = methods.filter((method)=>this.isWineCompatibleMethod(method, destination.country));\n        // Calculate rates\n        return wineCompatibleMethods.map((method)=>({\n                shipping_method: method,\n                price: method.price,\n                currency: method.currency,\n                delivery_time: method.delivery_time,\n                service_point_required: method.service_point_input === 'required'\n            }));\n    }\n    /**\n   * Create a shipment\n   */ async createShipment(parcel, shippingMethodId, servicePointId) {\n        const payload = {\n            parcel: {\n                ...parcel,\n                weight: parcel.weight.toString(),\n                shipping_method: shippingMethodId,\n                service_point: servicePointId,\n                // Wine-specific handling\n                customs_declaration: {\n                    contents: 1,\n                    invoice_number: parcel.order_number,\n                    weight: parcel.weight,\n                    items: [\n                        {\n                            description: 'Wine',\n                            quantity: parcel.quantity || 1,\n                            weight: parcel.weight,\n                            value: Math.round((parcel.total_order_value || 0) / 100),\n                            hs_code: '220421',\n                            origin_country: 'FR' // Assuming French wine\n                        }\n                    ]\n                }\n            }\n        };\n        const response = await this.makeRequest('POST', '/parcels', payload);\n        return response.parcel;\n    }\n    /**\n   * Get shipment details\n   */ async getShipment(shipmentId) {\n        const response = await this.makeRequest('GET', `/parcels/${shipmentId}`);\n        return response.parcel;\n    }\n    /**\n   * Cancel a shipment\n   */ async cancelShipment(shipmentId) {\n        try {\n            await this.makeRequest('POST', `/parcels/${shipmentId}/cancel`);\n            return true;\n        } catch (error) {\n            console.error('Failed to cancel shipment:', error);\n            return false;\n        }\n    }\n    /**\n   * Get tracking information\n   */ async getTracking(shipmentId) {\n        const shipment = await this.getShipment(shipmentId);\n        return {\n            tracking_number: shipment.tracking_number || '',\n            tracking_url: shipment.tracking_url || '',\n            status: shipment.status,\n            status_message: this.getStatusMessage(shipment.status)\n        };\n    }\n    /**\n   * Find service points near address\n   */ async findServicePoints(country, postalCode, carrier, limit = 5) {\n        const params = new URLSearchParams({\n            country: country.toUpperCase(),\n            postal_code: postalCode,\n            limit: limit.toString()\n        });\n        if (carrier) {\n            params.append('carrier', carrier);\n        }\n        const response = await this.makeRequest('GET', `/service_points?${params.toString()}`);\n        return response.service_points || [];\n    }\n    /**\n   * Generate shipping labels\n   */ async generateLabel(shipmentId, format = 'pdf') {\n        const response = await this.makeRequest('GET', `/labels/${format}?ids=${shipmentId}`);\n        return response;\n    }\n    /**\n   * Check if shipping method is compatible with wine\n   */ isWineCompatibleMethod(method, destinationCountry) {\n        // Wine shipping restrictions\n        // Must support tracking for valuable items\n        if (!method.characteristics.is_tracked) {\n            return false;\n        }\n        // Some carriers don't support alcohol shipping\n        const alcoholRestrictedCarriers = [\n            'amazon',\n            'fedex_envelope'\n        ];\n        if (alcoholRestrictedCarriers.includes(method.carrier.toLowerCase())) {\n            return false;\n        }\n        // Country-specific restrictions\n        const restrictedCountries = [\n            'US',\n            'CA',\n            'AU'\n        ] // Countries with strict alcohol import laws\n        ;\n        if (restrictedCountries.includes(destinationCountry.toUpperCase())) {\n            // Only allow express/registered methods for restricted countries\n            return method.characteristics.is_express || method.characteristics.requires_signature;\n        }\n        return true;\n    }\n    /**\n   * Get human-readable status message\n   */ getStatusMessage(status) {\n        const messages = {\n            announced: 'Shipment announced',\n            en_route_to_sorting_center: 'En route to sorting center',\n            delivered_at_sorting_center: 'Delivered at sorting center',\n            sorted: 'Package sorted',\n            en_route: 'Out for delivery',\n            delivered: 'Delivered',\n            exception: 'Delivery exception',\n            unknown: 'Status unknown'\n        };\n        return messages[status] || 'Unknown status';\n    }\n    /**\n   * Make HTTP request to Sendcloud API\n   */ async makeRequest(method, endpoint, body) {\n        const url = `${this.baseUrl}${endpoint}`;\n        // Create basic auth header\n        const credentials = Buffer.from(`${this.apiKey}:${this.apiSecret}`).toString('base64');\n        const headers = {\n            'Authorization': `Basic ${credentials}`,\n            'Content-Type': 'application/json'\n        };\n        const config = {\n            method,\n            headers\n        };\n        if (body) {\n            config.body = JSON.stringify(body);\n        }\n        try {\n            const response = await fetch(url, config);\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({}));\n                throw new SendcloudError(errorData.error?.message || 'Shipping API error', response.status, errorData.error?.code || response.statusText, errorData);\n            }\n            return await response.json();\n        } catch (error) {\n            if (error instanceof SendcloudError) {\n                throw error;\n            }\n            throw new SendcloudError('Shipping service unavailable', 500, 'Unable to connect to shipping provider', {\n                originalError: error\n            });\n        }\n    }\n}\nclass SendcloudError extends Error {\n    constructor(message, status, code, data){\n        super(message);\n        this.name = 'SendcloudError';\n        this.status = status;\n        this.code = code;\n        this.data = data;\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            status: this.status,\n            code: this.code,\n            data: this.data\n        };\n    }\n}\n// Export singleton instance\nconst sendcloudClient = new SendcloudClient();\n// Helper functions for wine shipping\nconst calculateWineShipping = async (destination, bottles, totalValue // in cents\n)=>{\n    // Calculate weight (average wine bottle ~750g + packaging)\n    const bottleWeight = 750 // grams\n    ;\n    const packagingWeight = Math.max(200, bottles * 50) // Base packaging + per bottle\n    ;\n    const totalWeight = bottles * bottleWeight + packagingWeight;\n    return sendcloudClient.calculateRates({\n        country: destination.country,\n        postal_code: destination.postal_code,\n        city: destination.city\n    }, {\n        weight: totalWeight,\n        value: totalValue,\n        length: bottles <= 6 ? 35 : 45,\n        width: bottles <= 6 ? 25 : 35,\n        height: bottles <= 6 ? 30 : 35 // cm\n    });\n};\nconst createWineShipment = async (orderData, shippingMethodId)=>{\n    const weight = orderData.weight || orderData.bottles * 750 + 200;\n    const parcel = {\n        name: orderData.recipient.name,\n        company: orderData.recipient.company,\n        address: orderData.recipient.address,\n        address_2: orderData.recipient.address_2,\n        city: orderData.recipient.city,\n        postal_code: orderData.recipient.postal_code,\n        country: orderData.recipient.country,\n        telephone: orderData.recipient.telephone,\n        email: orderData.recipient.email,\n        weight,\n        order_number: orderData.orderId,\n        insured_value: orderData.totalValue,\n        total_order_value: orderData.totalValue,\n        total_order_value_currency: 'EUR',\n        quantity: orderData.bottles,\n        external_reference: `wine-order-${orderData.orderId}`\n    };\n    return sendcloudClient.createShipment(parcel, shippingMethodId);\n};\nconst formatShippingPrice = (price, currency = 'EUR')=>{\n    return new Intl.NumberFormat('fr-FR', {\n        style: 'currency',\n        currency\n    }).format(price / 100);\n};\nconst getDeliveryEstimate = (method)=>{\n    if (method.delivery_time) {\n        return method.delivery_time;\n    }\n    // Fallback estimates based on method characteristics\n    if (method.characteristics.is_express) {\n        return '1-2 business days';\n    }\n    return '3-5 business days';\n};\n// Wine-specific shipping validations\nconst validateWineShipment = (destination, bottles)=>{\n    const errors = [];\n    // Age verification required countries\n    const ageVerificationCountries = [\n        'US',\n        'CA',\n        'AU',\n        'NO',\n        'SE'\n    ];\n    if (ageVerificationCountries.includes(destination.country.toUpperCase())) {\n        errors.push('Age verification required for this destination');\n    }\n    // Bottle limits for certain countries\n    if (destination.country.toUpperCase() === 'NO' && bottles > 1) {\n        errors.push('Norway allows maximum 1 bottle per shipment');\n    }\n    // Postal code validation for wine shipping\n    if (!destination.postal_code || destination.postal_code.trim().length === 0) {\n        errors.push('Postal code is required for wine shipping');\n    }\n    return errors;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/sendcloud/client.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/supabase/server.ts":
/*!************************************!*\
  !*** ./src/lib/supabase/server.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addToCart: () => (/* binding */ addToCart),\n/* harmony export */   bulkUpdateProductFeatured: () => (/* binding */ bulkUpdateProductFeatured),\n/* harmony export */   bulkUpdateProductStatus: () => (/* binding */ bulkUpdateProductStatus),\n/* harmony export */   createAdminProduct: () => (/* binding */ createAdminProduct),\n/* harmony export */   createAnonymousSupabaseClient: () => (/* binding */ createAnonymousSupabaseClient),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   createOrUpdateCustomer: () => (/* binding */ createOrUpdateCustomer),\n/* harmony export */   createOrder: () => (/* binding */ createOrder),\n/* harmony export */   createProductImage: () => (/* binding */ createProductImage),\n/* harmony export */   createRouteHandlerSupabaseClient: () => (/* binding */ createRouteHandlerSupabaseClient),\n/* harmony export */   createServerSupabaseClient: () => (/* binding */ createServerSupabaseClient),\n/* harmony export */   deleteAdminProduct: () => (/* binding */ deleteAdminProduct),\n/* harmony export */   deleteProductImage: () => (/* binding */ deleteProductImage),\n/* harmony export */   duplicateProduct: () => (/* binding */ duplicateProduct),\n/* harmony export */   fixSupabaseImageUrl: () => (/* binding */ fixSupabaseImageUrl),\n/* harmony export */   getAdminProductById: () => (/* binding */ getAdminProductById),\n/* harmony export */   getAdminProducts: () => (/* binding */ getAdminProducts),\n/* harmony export */   getCartItems: () => (/* binding */ getCartItems),\n/* harmony export */   getFeaturedProducts: () => (/* binding */ getFeaturedProducts),\n/* harmony export */   getLowStockProducts: () => (/* binding */ getLowStockProducts),\n/* harmony export */   getOrderById: () => (/* binding */ getOrderById),\n/* harmony export */   getProductById: () => (/* binding */ getProductById),\n/* harmony export */   getProductBySlug: () => (/* binding */ getProductBySlug),\n/* harmony export */   getProducts: () => (/* binding */ getProducts),\n/* harmony export */   getServerAdminUser: () => (/* binding */ getServerAdminUser),\n/* harmony export */   getServerSession: () => (/* binding */ getServerSession),\n/* harmony export */   getServerUser: () => (/* binding */ getServerUser),\n/* harmony export */   getVatRateByCountry: () => (/* binding */ getVatRateByCountry),\n/* harmony export */   getWineFallbackImage: () => (/* binding */ getWineFallbackImage),\n/* harmony export */   hardDeleteAdminProduct: () => (/* binding */ hardDeleteAdminProduct),\n/* harmony export */   removeFromCart: () => (/* binding */ removeFromCart),\n/* harmony export */   safeAdminQuery: () => (/* binding */ safeAdminQuery),\n/* harmony export */   safeAnonymousQuery: () => (/* binding */ safeAnonymousQuery),\n/* harmony export */   safeQuery: () => (/* binding */ safeQuery),\n/* harmony export */   updateAdminProduct: () => (/* binding */ updateAdminProduct),\n/* harmony export */   updateCartItem: () => (/* binding */ updateCartItem),\n/* harmony export */   updateProductImage: () => (/* binding */ updateProductImage),\n/* harmony export */   updateProductStock: () => (/* binding */ updateProductStock)\n/* harmony export */ });\n/* harmony import */ var _supabase_ssr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/ssr */ \"(rsc)/./node_modules/@supabase/ssr/dist/module/index.js\");\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n\n\n// Helper function to fix Supabase image URLs\nfunction fixSupabaseImageUrl(url) {\n    if (url.includes('supabase.co/storage/v1/object/public/wines/')) {\n        // Fix missing /Public/ in the URL path\n        return url.replace('/object/public/wines/', '/object/public/Public/wines/');\n    }\n    return url;\n}\n// Helper function to get wine-specific fallback images\nfunction getWineFallbackImage(wineName) {\n    const name = wineName.toLowerCase();\n    if (name.includes('magnaneraie')) {\n        return '/images/wine-magnaneraie.svg';\n    } else if (name.includes('rosé') || name.includes('rose')) {\n        return '/images/wine-bottle-rose.svg';\n    } else if (name.includes('blanc') || name.includes('white')) {\n        return '/images/wine-bottle-white.svg';\n    } else if (name.includes('rouge') || name.includes('red')) {\n        return '/images/wine-bottle-red.svg';\n    } else {\n        return '/images/default-wine.svg';\n    }\n}\n// Helper function to generate slug from product name\nfunction generateSlug(name) {\n    return name.toLowerCase().replace(/[àáâãäå]/g, 'a').replace(/[èéêë]/g, 'e').replace(/[ìíîï]/g, 'i').replace(/[òóôõö]/g, 'o').replace(/[ùúûü]/g, 'u').replace(/[ÿý]/g, 'y').replace(/[ñ]/g, 'n').replace(/[ç]/g, 'c').replace(/[«»\\\"']/g, '') // Remove quotes and guillemets\n    .replace(/[^\\w\\s-]/g, '') // Remove special characters\n    .replace(/[\\s_-]+/g, '-') // Replace spaces and underscores with hyphens\n    .replace(/^-+|-+$/g, '') // Remove leading/trailing hyphens\n    ;\n}\n// Create read-only server client for Server Components (cannot modify cookies)\nconst createServerSupabaseClient = async ()=>{\n    // Check if we're in a build context where cookies are not available\n    try {\n        const cookieStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n        return (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createServerClient)(\"https://vmtudbupajnjyauvqnej.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZtdHVkYnVwYWpuanlhdXZxbmVqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5MzkwNTcsImV4cCI6MjA3MzUxNTA1N30.7SZ6RUgXQdI-nf1Dun7XnQ2sRIL-R_KcV2EoECuXsGs\", {\n            cookies: {\n                get (name) {\n                    return cookieStore.get(name)?.value;\n                },\n                set (name, value, options) {\n                // Don't set cookies in Server Components - this prevents the error\n                // Cookie modifications should only happen in Route Handlers or Server Actions\n                },\n                remove (name, options) {\n                // Don't remove cookies in Server Components - this prevents the error\n                }\n            }\n        });\n    } catch (error) {\n        // During build time or when cookies are not available, create a client without cookies\n        return (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createServerClient)(\"https://vmtudbupajnjyauvqnej.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZtdHVkYnVwYWpuanlhdXZxbmVqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5MzkwNTcsImV4cCI6MjA3MzUxNTA1N30.7SZ6RUgXQdI-nf1Dun7XnQ2sRIL-R_KcV2EoECuXsGs\", {\n            cookies: {\n                get () {\n                    return undefined;\n                },\n                set () {},\n                remove () {}\n            }\n        });\n    }\n};\n// Create a completely anonymous client for public data queries (no auth)\nconst createAnonymousSupabaseClient = ()=>{\n    return (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createServerClient)(\"https://vmtudbupajnjyauvqnej.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZtdHVkYnVwYWpuanlhdXZxbmVqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5MzkwNTcsImV4cCI6MjA3MzUxNTA1N30.7SZ6RUgXQdI-nf1Dun7XnQ2sRIL-R_KcV2EoECuXsGs\", {\n        cookies: {\n            get () {\n                return undefined;\n            },\n            set () {},\n            remove () {}\n        }\n    });\n};\n// Create client for API Route Handlers\nconst createRouteHandlerSupabaseClient = (request)=>{\n    return (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createServerClient)(\"https://vmtudbupajnjyauvqnej.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZtdHVkYnVwYWpuanlhdXZxbmVqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5MzkwNTcsImV4cCI6MjA3MzUxNTA1N30.7SZ6RUgXQdI-nf1Dun7XnQ2sRIL-R_KcV2EoECuXsGs\", {\n        cookies: {\n            get (name) {\n                return request?.cookies.get(name)?.value;\n            },\n            set (name, value, options) {\n            // For route handlers, we need to set cookies differently\n            // This will be handled by the response\n            },\n            remove (name, options) {\n            // For route handlers, we need to remove cookies differently\n            // This will be handled by the response\n            }\n        }\n    });\n};\n// Export createClient alias for backward compatibility\nconst createClient = createServerSupabaseClient;\n// Authentication helpers for server-side\nconst getServerUser = async ()=>{\n    try {\n        const supabase = await createServerSupabaseClient();\n        const { data: { user }, error } = await supabase.auth.getUser();\n        if (error) {\n            console.error('Error getting server user:', error);\n            return null;\n        }\n        return user;\n    } catch (error) {\n        // During build time, return null for user\n        return null;\n    }\n};\nconst getServerSession = async ()=>{\n    try {\n        const supabase = await createServerSupabaseClient();\n        const { data: { session }, error } = await supabase.auth.getSession();\n        if (error) {\n            console.error('Error getting server session:', error);\n            return null;\n        }\n        return session;\n    } catch (error) {\n        // During build time, return null for session\n        return null;\n    }\n};\n// Admin authentication helper\nconst getServerAdminUser = async ()=>{\n    try {\n        const user = await getServerUser();\n        if (!user) {\n            throw new Error('Not authenticated');\n        }\n        // Check if user has admin role in user metadata or in a separate admin table\n        const supabase = await createServerSupabaseClient();\n        // Option 1: Check user metadata\n        if (user.user_metadata?.role === 'admin') {\n            return user;\n        }\n        // Option 2: Check admin table (if exists)\n        try {\n            const { data: adminRecord, error } = await supabase.from('admin_users').select('*').eq('user_id', user.id).single();\n            if (error && error.code !== 'PGRST116') {\n                console.warn('Admin table check failed:', error);\n                throw new Error('Admin access required');\n            }\n            if (!adminRecord) {\n                throw new Error('Admin access required');\n            }\n        } catch (error) {\n            console.warn('Admin table not found or accessible, falling back to metadata check');\n            throw new Error('Admin access required');\n        }\n        return user;\n    } catch (error) {\n        // During build time, throw error for admin access\n        throw new Error('Admin access required');\n    }\n};\n// Database query helpers with error handling\nconst safeQuery = async (queryFn)=>{\n    const supabase = await createServerSupabaseClient();\n    const { data, error } = await queryFn(supabase);\n    if (error) {\n        console.error('Database query error:', error);\n        if (error.code === 'PGRST116') {\n            throw new Error('Resource not found');\n        }\n        if (error.code === '42501') {\n            throw new Error('Access denied');\n        }\n        throw new Error(error.message || 'Database query failed');\n    }\n    return data;\n};\n// Database query helper for public data (no authentication required)\nconst safeAnonymousQuery = async (queryFn)=>{\n    const supabase = createAnonymousSupabaseClient();\n    const { data, error } = await queryFn(supabase);\n    if (error) {\n        console.error('Database query error:', error);\n        if (error.code === 'PGRST116') {\n            throw new Error('Resource not found');\n        }\n        if (error.code === '42501') {\n            throw new Error('Access denied');\n        }\n        throw new Error(error.message || 'Database query failed');\n    }\n    return data;\n};\n// Product queries - using anonymous client for public data\nconst getProducts = async (options)=>{\n    return safeAnonymousQuery(async (supabase)=>{\n        let query = supabase.from('wine_products').select(`\n        *,\n        product_images(\n          url,\n          alt_text_en,\n          alt_text_fr,\n          is_primary,\n          display_order\n        )\n      `).eq('is_active', true);\n        if (options?.category) {\n            query = query.eq('category', options.category);\n        }\n        if (options?.inStock) {\n            query = query.gt('stock_quantity', 0);\n        }\n        if (options?.featured) {\n            query = query.eq('featured', true);\n        }\n        if (options?.limit) {\n            query = query.limit(options.limit);\n        }\n        if (options?.offset) {\n            query = query.range(options.offset, options.offset + (options.limit || 10) - 1);\n        }\n        return query.order('created_at', {\n            ascending: false\n        });\n    });\n};\n// Get featured products for homepage\nconst getFeaturedProducts = async (limit = 6)=>{\n    try {\n        const products = await getProducts({\n            featured: true,\n            limit,\n            inStock: true\n        });\n        // Transform the data to match the expected format\n        return products.map((product)=>({\n                ...product,\n                // Map key fields to expected names for backward compatibility\n                description: product.description_en || product.description_fr || 'Fine wine from Domaine Vallot',\n                grape_variety: product.varietal,\n                producer: 'Domaine Vallot',\n                alcohol_content: product.alcohol_content || 13.5,\n                // Price handling\n                price_display: product.price_eur ? product.price_eur.toString() : '0.00',\n                price: product.price_eur ? Math.round(parseFloat(product.price_eur.toString()) * 100) : 0,\n                // Stock status\n                in_stock: product.stock_quantity > 0,\n                // Image handling with proper fallback and URL fix\n                image_url: product.product_images?.[0]?.url ? fixSupabaseImageUrl(product.product_images[0].url) : getWineFallbackImage(product.name),\n                image: product.product_images?.[0]?.url ? fixSupabaseImageUrl(product.product_images[0].url) : getWineFallbackImage(product.name),\n                // Additional fields for UI\n                is_organic: product.organic_certified || false,\n                is_biodynamic: product.biodynamic_certified || false,\n                is_featured: product.featured || false,\n                // Ensure proper slug generation\n                slug: product.slug_en || product.slug_fr || generateSlug(`${product.name}-${product.vintage}`)\n            }));\n    } catch (error) {\n        console.error('Error fetching featured products from database:', error);\n        // Return fallback mock data if database fails\n        return getFallbackProducts();\n    }\n};\n// Fallback mock data for development\nfunction getFallbackProducts() {\n    return [\n        {\n            id: '1',\n            name: 'Vinsobres rouge « François »',\n            slug: 'vinsobres-rouge-francois-2022',\n            description: 'A premium red wine with notes of dark fruit and traditional terroir expression.',\n            price_eur: 12.00,\n            price: 1200,\n            vintage: 2022,\n            grape_variety: 'Syrah blend',\n            producer: 'Domaine Vallot',\n            region: 'Vinsobres',\n            stock_quantity: 50,\n            is_organic: true,\n            is_biodynamic: true,\n            featured: true,\n            image_url: '/images/wine-bottle-red.svg',\n            image: '/images/wine-bottle-red.svg',\n            created_at: new Date().toISOString()\n        },\n        {\n            id: '2',\n            name: 'Vinsobres Cuvée « Claude »',\n            slug: 'vinsobres-cuvee-claude-2018',\n            description: 'From 67-year-old vines, this wine benefits from barrel aging for exceptional complexity.',\n            price_eur: 14.50,\n            price: 1450,\n            vintage: 2018,\n            grape_variety: 'Old vine Syrah',\n            producer: 'Domaine Vallot',\n            region: 'Vinsobres',\n            stock_quantity: 30,\n            is_organic: true,\n            is_biodynamic: true,\n            featured: true,\n            image_url: '/images/wine-bottle-red.svg',\n            image: '/images/wine-bottle-red.svg',\n            created_at: new Date().toISOString()\n        },\n        {\n            id: '3',\n            name: 'Vinsobres Le Haut des Côtes',\n            slug: 'vinsobres-le-haut-des-cotes-2018',\n            description: 'Deep red color with intense bouquet of vanilla and forest floor notes.',\n            price_eur: 16.50,\n            price: 1650,\n            vintage: 2018,\n            grape_variety: 'Syrah, Grenache',\n            producer: 'Domaine Vallot',\n            region: 'Vinsobres',\n            stock_quantity: 25,\n            is_organic: true,\n            is_biodynamic: true,\n            featured: true,\n            image_url: '/images/wine-bottle-red.svg',\n            image: '/images/wine-bottle-red.svg',\n            created_at: new Date().toISOString()\n        }\n    ];\n}\nconst getProductById = async (id)=>{\n    return safeAnonymousQuery(async (supabase)=>{\n        return supabase.from('wine_products').select('*').eq('id', id).eq('is_active', true).single();\n    });\n};\nconst getProductBySlug = async (slug)=>{\n    return safeAnonymousQuery(async (supabase)=>{\n        return supabase.from('wine_products').select('*').eq('slug', slug).eq('is_active', true).single();\n    });\n};\n// Cart queries\nconst getCartItems = async (userId)=>{\n    return safeQuery(async (supabase)=>{\n        return supabase.from('cart_items').select(`\n        *,\n        wine_products (*)\n      `).eq('customer_id', userId);\n    });\n};\nconst addToCart = async (userId, productId, quantity)=>{\n    return safeQuery(async (supabase)=>{\n        // Check if item already exists in cart\n        const { data: existingItem } = await supabase.from('cart_items').select('*').eq('customer_id', userId).eq('product_id', productId).single();\n        if (existingItem) {\n            // Update quantity\n            return supabase.from('cart_items').update({\n                quantity: existingItem.quantity + quantity\n            }).eq('id', existingItem.id).select().single();\n        } else {\n            // Insert new item\n            return supabase.from('cart_items').insert({\n                customer_id: userId,\n                product_id: productId,\n                quantity\n            }).select().single();\n        }\n    });\n};\nconst updateCartItem = async (userId, itemId, quantity)=>{\n    return safeQuery(async (supabase)=>{\n        return supabase.from('cart_items').update({\n            quantity\n        }).eq('id', itemId).eq('customer_id', userId).select().single();\n    });\n};\nconst removeFromCart = async (userId, itemId)=>{\n    return safeQuery(async (supabase)=>{\n        return supabase.from('cart_items').delete().eq('id', itemId).eq('customer_id', userId);\n    });\n};\n// Order queries\nconst createOrder = async (orderData)=>{\n    return safeQuery(async (supabase)=>{\n        // Start transaction by creating order first\n        const { data: order, error: orderError } = await supabase.from('orders').insert({\n            user_id: orderData.user_id,\n            customer_email: orderData.customer_email,\n            customer_first_name: orderData.customer_first_name,\n            customer_last_name: orderData.customer_last_name,\n            shipping_address: orderData.shipping_address,\n            billing_address: orderData.billing_address || orderData.shipping_address,\n            subtotal: orderData.subtotal,\n            vat_amount: orderData.vat_amount,\n            shipping_cost: orderData.shipping_cost,\n            total_amount: orderData.total_amount,\n            payment_method: orderData.payment_method || 'mollie',\n            status: orderData.status || 'pending'\n        }).select().single();\n        if (orderError) throw orderError;\n        // Insert order items\n        const orderItems = orderData.items.map((item)=>({\n                order_id: order.id,\n                product_id: item.product_id,\n                quantity: item.quantity,\n                unit_price: item.unit_price,\n                total_price: item.quantity * item.unit_price\n            }));\n        const { error: itemsError } = await supabase.from('order_items').insert(orderItems);\n        if (itemsError) throw itemsError;\n        return {\n            data: order,\n            error: null\n        };\n    });\n};\nconst getOrderById = async (orderId, userId)=>{\n    return safeQuery(async (supabase)=>{\n        let query = supabase.from('orders').select(`\n        *,\n        order_items (\n          *,\n          wine_products (*)\n        )\n      `).eq('id', orderId);\n        if (userId) {\n            query = query.eq('user_id', userId);\n        }\n        return query.single();\n    });\n};\n// Customer queries\nconst createOrUpdateCustomer = async (userData)=>{\n    return safeQuery(async (supabase)=>{\n        return supabase.from('customers').upsert(userData, {\n            onConflict: 'user_id'\n        }).select().single();\n    });\n};\n// VAT rate queries - public data\nconst getVatRateByCountry = async (countryCode)=>{\n    return safeAnonymousQuery(async (supabase)=>{\n        return supabase.from('vat_rates').select('*').eq('country_code', countryCode.toUpperCase()).eq('is_active', true).single();\n    });\n};\n// ==============================================================================\n// ADMIN PRODUCT MANAGEMENT FUNCTIONS\n// ==============================================================================\n// Admin query helper - requires authentication\nconst safeAdminQuery = async (queryFn, userId)=>{\n    // Verify admin access\n    const adminUser = await getServerAdminUser();\n    const supabase = await createServerSupabaseClient();\n    const { data, error } = await queryFn(supabase);\n    if (error) {\n        console.error('Database query error:', error);\n        if (error.code === 'PGRST116') {\n            throw new Error('Resource not found');\n        }\n        if (error.code === '42501') {\n            throw new Error('Access denied');\n        }\n        throw new Error(error.message || 'Database query failed');\n    }\n    return data;\n};\n// Get all products for admin (including inactive)\nconst getAdminProducts = async (options)=>{\n    return safeAdminQuery(async (supabase)=>{\n        let query = supabase.from('wine_products').select(`\n        *,\n        product_images(\n          id,\n          url,\n          alt_text_en,\n          alt_text_fr,\n          is_primary,\n          display_order,\n          image_type\n        )\n      `);\n        // Filter by status\n        if (options?.status === 'active') {\n            query = query.eq('is_active', true);\n        } else if (options?.status === 'inactive') {\n            query = query.eq('is_active', false);\n        }\n        // 'all' means no filter on is_active\n        // Search functionality\n        if (options?.search) {\n            const searchTerm = options.search.toLowerCase();\n            query = query.or(`\n        name.ilike.%${searchTerm}%,\n        description_en.ilike.%${searchTerm}%,\n        description_fr.ilike.%${searchTerm}%,\n        varietal.ilike.%${searchTerm}%,\n        region.ilike.%${searchTerm}%,\n        sku.ilike.%${searchTerm}%\n      `);\n        }\n        if (options?.featured !== undefined) {\n            query = query.eq('featured', options.featured);\n        }\n        // Sorting\n        const sortBy = options?.sortBy || 'created_at';\n        const sortOrder = options?.sortOrder === 'asc' ? {\n            ascending: true\n        } : {\n            ascending: false\n        };\n        query = query.order(sortBy, sortOrder);\n        if (options?.limit) {\n            query = query.limit(options.limit);\n        }\n        if (options?.offset) {\n            query = query.range(options.offset, options.offset + (options.limit || 20) - 1);\n        }\n        return query;\n    });\n};\n// Get single product for admin\nconst getAdminProductById = async (id)=>{\n    return safeAdminQuery(async (supabase)=>{\n        return supabase.from('wine_products').select(`\n        *,\n        product_images(\n          id,\n          url,\n          alt_text_en,\n          alt_text_fr,\n          is_primary,\n          display_order,\n          image_type,\n          width,\n          height,\n          file_size\n        )\n      `).eq('id', id).single();\n    });\n};\n// Create new product\nconst createAdminProduct = async (productData, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        // Add audit fields\n        const dataWithAudit = {\n            ...productData,\n            created_by: userId,\n            updated_by: userId,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        };\n        return supabase.from('wine_products').insert(dataWithAudit).select().single();\n    }, userId);\n};\n// Update existing product\nconst updateAdminProduct = async (id, productData, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        // Add audit fields\n        const dataWithAudit = {\n            ...productData,\n            updated_by: userId,\n            updated_at: new Date().toISOString()\n        };\n        return supabase.from('wine_products').update(dataWithAudit).eq('id', id).select().single();\n    }, userId);\n};\n// Soft delete product (set is_active to false)\nconst deleteAdminProduct = async (id, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        // Check if product has pending orders\n        const { data: pendingOrders } = await supabase.from('order_items').select(`\n        id,\n        orders!inner(\n          id,\n          status\n        )\n      `).eq('product_id', id).in('orders.status', [\n            'pending',\n            'confirmed',\n            'processing'\n        ]);\n        if (pendingOrders && pendingOrders.length > 0) {\n            throw new Error('Cannot delete product with pending orders');\n        }\n        // Soft delete by setting is_active to false\n        return supabase.from('wine_products').update({\n            is_active: false,\n            updated_by: userId,\n            updated_at: new Date().toISOString()\n        }).eq('id', id).select().single();\n    }, userId);\n};\n// Hard delete product (actual deletion - use with caution)\nconst hardDeleteAdminProduct = async (id, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        // Check if product has any orders\n        const { data: orders } = await supabase.from('order_items').select('id').eq('product_id', id);\n        if (orders && orders.length > 0) {\n            throw new Error('Cannot permanently delete product with order history');\n        }\n        // Delete associated images first\n        await supabase.from('product_images').delete().eq('product_id', id);\n        // Delete the product\n        return supabase.from('wine_products').delete().eq('id', id);\n    }, userId);\n};\n// Product image management functions\nconst createProductImage = async (imageData, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        // If this is set as primary, unset other primary images for this product\n        if (imageData.is_primary) {\n            await supabase.from('product_images').update({\n                is_primary: false\n            }).eq('product_id', imageData.product_id);\n        }\n        return supabase.from('product_images').insert(imageData).select().single();\n    }, userId);\n};\nconst updateProductImage = async (imageId, imageData, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        // If this is set as primary, unset other primary images for this product\n        if (imageData.is_primary) {\n            // First get the product_id\n            const { data: currentImage } = await supabase.from('product_images').select('product_id').eq('id', imageId).single();\n            if (currentImage) {\n                await supabase.from('product_images').update({\n                    is_primary: false\n                }).eq('product_id', currentImage.product_id).neq('id', imageId);\n            }\n        }\n        return supabase.from('product_images').update(imageData).eq('id', imageId).select().single();\n    }, userId);\n};\nconst deleteProductImage = async (imageId, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        return supabase.from('product_images').delete().eq('id', imageId);\n    }, userId);\n};\n// Bulk operations\nconst bulkUpdateProductStatus = async (productIds, isActive, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        return supabase.from('wine_products').update({\n            is_active: isActive,\n            updated_by: userId,\n            updated_at: new Date().toISOString()\n        }).in('id', productIds).select();\n    }, userId);\n};\nconst bulkUpdateProductFeatured = async (productIds, featured, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        return supabase.from('wine_products').update({\n            featured: featured,\n            updated_by: userId,\n            updated_at: new Date().toISOString()\n        }).in('id', productIds).select();\n    }, userId);\n};\n// Stock management\nconst updateProductStock = async (id, stockQuantity, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        return supabase.from('wine_products').update({\n            stock_quantity: stockQuantity,\n            updated_by: userId,\n            updated_at: new Date().toISOString()\n        }).eq('id', id).select().single();\n    }, userId);\n};\n// Get products with low stock\nconst getLowStockProducts = async (threshold = 10)=>{\n    return safeAdminQuery(async (supabase)=>{\n        return supabase.from('wine_products').select('*').eq('is_active', true).lte('stock_quantity', threshold).order('stock_quantity', {\n            ascending: true\n        });\n    });\n};\n// Duplicate product\nconst duplicateProduct = async (id, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        // Get the original product\n        const { data: originalProduct } = await supabase.from('wine_products').select('*').eq('id', id).single();\n        if (!originalProduct) {\n            throw new Error('Product not found');\n        }\n        // Create new product data (remove id and update key fields)\n        const { id: _, created_at: __, updated_at: ___, created_by: ____, updated_by: _____, sku, slug_en, slug_fr, ...productData } = originalProduct;\n        const newProductData = {\n            ...productData,\n            name: `${originalProduct.name} (Copy)`,\n            sku: `${sku}-COPY-${Date.now()}`,\n            slug_en: `${slug_en}-copy-${Date.now()}`,\n            slug_fr: `${slug_fr}-copy-${Date.now()}`,\n            is_active: false,\n            featured: false,\n            created_by: userId,\n            updated_by: userId\n        };\n        // Create the new product\n        const { data: newProduct } = await supabase.from('wine_products').insert(newProductData).select().single();\n        // Copy images if they exist\n        const { data: originalImages } = await supabase.from('product_images').select('*').eq('product_id', id);\n        if (originalImages && originalImages.length > 0) {\n            const newImages = originalImages.map((img)=>({\n                    ...img,\n                    id: undefined,\n                    product_id: newProduct.id,\n                    created_at: undefined\n                }));\n            await supabase.from('product_images').insert(newImages);\n        }\n        return {\n            data: newProduct,\n            error: null\n        };\n    }, userId);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/supabase/server.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/validators/schemas.ts":
/*!***************************************!*\
  !*** ./src/lib/validators/schemas.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addToCartSchema: () => (/* binding */ addToCartSchema),\n/* harmony export */   addressSchema: () => (/* binding */ addressSchema),\n/* harmony export */   adminLoginSchema: () => (/* binding */ adminLoginSchema),\n/* harmony export */   adminUserSchema: () => (/* binding */ adminUserSchema),\n/* harmony export */   ageVerificationSchema: () => (/* binding */ ageVerificationSchema),\n/* harmony export */   changePasswordSchema: () => (/* binding */ changePasswordSchema),\n/* harmony export */   checkoutBillingSchema: () => (/* binding */ checkoutBillingSchema),\n/* harmony export */   checkoutCustomerSchema: () => (/* binding */ checkoutCustomerSchema),\n/* harmony export */   checkoutPaymentSchema: () => (/* binding */ checkoutPaymentSchema),\n/* harmony export */   checkoutShippingSchema: () => (/* binding */ checkoutShippingSchema),\n/* harmony export */   completeCheckoutSchema: () => (/* binding */ completeCheckoutSchema),\n/* harmony export */   contactFormSchema: () => (/* binding */ contactFormSchema),\n/* harmony export */   customerLoginSchema: () => (/* binding */ customerLoginSchema),\n/* harmony export */   customerRegistrationSchema: () => (/* binding */ customerRegistrationSchema),\n/* harmony export */   forgotPasswordSchema: () => (/* binding */ forgotPasswordSchema),\n/* harmony export */   getErrorMessage: () => (/* binding */ getErrorMessage),\n/* harmony export */   hasErrors: () => (/* binding */ hasErrors),\n/* harmony export */   imageUploadSchema: () => (/* binding */ imageUploadSchema),\n/* harmony export */   inventoryAdjustmentSchema: () => (/* binding */ inventoryAdjustmentSchema),\n/* harmony export */   loginSchema: () => (/* binding */ loginSchema),\n/* harmony export */   newsletterSchema: () => (/* binding */ newsletterSchema),\n/* harmony export */   orderSchema: () => (/* binding */ orderSchema),\n/* harmony export */   productImageSchema: () => (/* binding */ productImageSchema),\n/* harmony export */   productSchema: () => (/* binding */ productSchema),\n/* harmony export */   productSearchSchema: () => (/* binding */ productSearchSchema),\n/* harmony export */   registerSchema: () => (/* binding */ registerSchema),\n/* harmony export */   resetPasswordSchema: () => (/* binding */ resetPasswordSchema),\n/* harmony export */   shippingRateSchema: () => (/* binding */ shippingRateSchema),\n/* harmony export */   updateCartItemSchema: () => (/* binding */ updateCartItemSchema),\n/* harmony export */   updateWineProductSchema: () => (/* binding */ updateWineProductSchema),\n/* harmony export */   validateSchema: () => (/* binding */ validateSchema),\n/* harmony export */   vatCalculationSchema: () => (/* binding */ vatCalculationSchema),\n/* harmony export */   wineContactFormSchema: () => (/* binding */ wineContactFormSchema),\n/* harmony export */   wineProductSchema: () => (/* binding */ wineProductSchema)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/ZodError.js\");\n\n// Common validation patterns\nconst emailSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().email('Please enter a valid email address');\nconst phoneSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^(\\+\\d{1,3}[- ]?)?\\d{8,15}$/, 'Please enter a valid phone number').optional();\nconst postalCodeSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().min(3, 'Postal code must be at least 3 characters').max(10, 'Postal code cannot exceed 10 characters');\nconst passwordSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().min(8, 'Password must be at least 8 characters').regex(/[A-Z]/, 'Password must contain at least one uppercase letter').regex(/[a-z]/, 'Password must contain at least one lowercase letter').regex(/\\d/, 'Password must contain at least one number').regex(/[!@#$%^&*]/, 'Password must contain at least one special character');\n// Age verification schemas\nconst ageVerificationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    birthDay: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Please select a valid day').max(31, 'Please select a valid day'),\n    birthMonth: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Please select a valid month').max(12, 'Please select a valid month'),\n    birthYear: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1900, 'Please enter a realistic birth year').max(new Date().getFullYear(), 'Birth year cannot be in the future'),\n    documentType: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'id_card',\n        'passport',\n        'drivers_license'\n    ]).optional(),\n    documentNumber: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    country: zod__WEBPACK_IMPORTED_MODULE_0__.string().length(2, 'Country must be a 2-letter code').optional()\n}).refine((data)=>{\n    // Validate birth date\n    const birthDate = new Date(data.birthYear, data.birthMonth - 1, data.birthDay);\n    return !isNaN(birthDate.getTime()) && birthDate <= new Date();\n}, {\n    message: 'Please enter a valid birth date',\n    path: [\n        'birthDay'\n    ]\n});\n// Customer registration schemas\nconst customerRegistrationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    email: emailSchema,\n    password: passwordSchema,\n    confirmPassword: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    firstName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'First name must be at least 2 characters').max(50, 'First name cannot exceed 50 characters').regex(/^[a-zA-ZÀ-ÿ\\s'-]+$/, 'First name contains invalid characters'),\n    lastName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Last name must be at least 2 characters').max(50, 'Last name cannot exceed 50 characters').regex(/^[a-zA-ZÀ-ÿ\\s'-]+$/, 'Last name contains invalid characters'),\n    phone: phoneSchema,\n    birthDate: zod__WEBPACK_IMPORTED_MODULE_0__.string().refine((date)=>{\n        const birthDate = new Date(date);\n        const age = new Date().getFullYear() - birthDate.getFullYear();\n        return !isNaN(birthDate.getTime()) && age >= 16 && age <= 120;\n    }, 'You must be at least 16 years old to register'),\n    acceptTerms: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().refine((val)=>val === true, 'You must accept the terms and conditions'),\n    acceptPrivacy: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().refine((val)=>val === true, 'You must accept the privacy policy'),\n    acceptMarketing: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    country: zod__WEBPACK_IMPORTED_MODULE_0__.string().length(2, 'Please select a country')\n}).refine((data)=>data.password === data.confirmPassword, {\n    message: 'Passwords do not match',\n    path: [\n        'confirmPassword'\n    ]\n});\n// Authentication schemas\nconst loginSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    email: emailSchema,\n    password: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, 'Password is required'),\n    rememberMe: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional()\n});\nconst registerSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    email: emailSchema,\n    password: passwordSchema,\n    confirmPassword: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    firstName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'First name must be at least 2 characters').max(50, 'First name cannot exceed 50 characters').regex(/^[a-zA-ZÀ-ÿ\\s'-]+$/, 'First name contains invalid characters'),\n    lastName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Last name must be at least 2 characters').max(50, 'Last name cannot exceed 50 characters').regex(/^[a-zA-ZÀ-ÿ\\s'-]+$/, 'Last name contains invalid characters'),\n    phone: phoneSchema,\n    birthDate: zod__WEBPACK_IMPORTED_MODULE_0__.string().refine((date)=>{\n        const birthDate = new Date(date);\n        const age = new Date().getFullYear() - birthDate.getFullYear();\n        return !isNaN(birthDate.getTime()) && age >= 18 && age <= 120;\n    }, 'You must be at least 18 years old to register'),\n    preferredLanguage: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'en',\n        'fr'\n    ]),\n    marketingConsent: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    newsletterConsent: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    isBusiness: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    companyName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Company name is required').optional(),\n    vatNumber: zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^[A-Z]{2}[0-9A-Z]+$/, 'Invalid VAT number format').optional(),\n    termsAccepted: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().refine((val)=>val === true, 'You must accept the terms and conditions'),\n    privacyAccepted: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().refine((val)=>val === true, 'You must accept the privacy policy')\n}).refine((data)=>data.password === data.confirmPassword, {\n    message: 'Passwords do not match',\n    path: [\n        'confirmPassword'\n    ]\n}).refine((data)=>{\n    if (data.isBusiness) {\n        return data.companyName && data.companyName.length >= 2;\n    }\n    return true;\n}, {\n    message: 'Company name is required for business accounts',\n    path: [\n        'companyName'\n    ]\n});\nconst forgotPasswordSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    email: emailSchema\n});\nconst resetPasswordSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    token: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, 'Reset token is required'),\n    password: passwordSchema,\n    confirmPassword: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n}).refine((data)=>data.password === data.confirmPassword, {\n    message: 'Passwords do not match',\n    path: [\n        'confirmPassword'\n    ]\n});\nconst changePasswordSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    currentPassword: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, 'Current password is required'),\n    newPassword: passwordSchema,\n    confirmPassword: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n}).refine((data)=>data.newPassword === data.confirmPassword, {\n    message: 'Passwords do not match',\n    path: [\n        'confirmPassword'\n    ]\n});\n// Legacy alias for backward compatibility\nconst customerLoginSchema = loginSchema;\n// Address schemas\nconst addressSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    firstName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'First name is required'),\n    lastName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Last name is required'),\n    company: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    address: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(5, 'Street address is required'),\n    address2: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    city: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'City is required'),\n    postalCode: postalCodeSchema,\n    country: zod__WEBPACK_IMPORTED_MODULE_0__.string().length(2, 'Please select a country'),\n    phone: phoneSchema\n});\n// Checkout schemas\nconst checkoutCustomerSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    email: emailSchema,\n    firstName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'First name is required'),\n    lastName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Last name is required'),\n    phone: phoneSchema,\n    createAccount: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    password: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n}).refine((data)=>{\n    if (data.createAccount) {\n        return data.password && data.password.length >= 8;\n    }\n    return true;\n}, {\n    message: 'Password is required when creating an account',\n    path: [\n        'password'\n    ]\n});\nconst checkoutShippingSchema = addressSchema;\nconst checkoutBillingSchema = addressSchema.extend({\n    sameAsShipping: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional()\n});\nconst checkoutPaymentSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    paymentMethod: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'mollie',\n        'stripe',\n        'paypal'\n    ]),\n    savePaymentMethod: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    acceptTerms: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().refine((val)=>val === true, 'You must accept the terms and conditions')\n});\nconst completeCheckoutSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    customer: checkoutCustomerSchema,\n    shipping: checkoutShippingSchema,\n    billing: checkoutBillingSchema,\n    payment: checkoutPaymentSchema,\n    ageVerification: ageVerificationSchema,\n    vatNumber: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    specialInstructions: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(500, 'Special instructions cannot exceed 500 characters').optional()\n});\n// Cart schemas\nconst addToCartSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    productId: zod__WEBPACK_IMPORTED_MODULE_0__.string().uuid('Invalid product ID'),\n    quantity: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Quantity must be at least 1').max(24, 'Maximum 24 bottles per product').int('Quantity must be a whole number'),\n    variantId: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\nconst updateCartItemSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    quantity: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Quantity must be 0 or more').max(24, 'Maximum 24 bottles per product').int('Quantity must be a whole number')\n});\n// Product schemas (for admin)\nconst wineProductSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    sku: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(3, 'SKU must be at least 3 characters').max(50, 'SKU cannot exceed 50 characters').regex(/^[A-Z0-9-]+$/, 'SKU must contain only uppercase letters, numbers, and hyphens'),\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(3, 'Product name must be at least 3 characters').max(100, 'Product name cannot exceed 100 characters'),\n    vintage: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1800, 'Vintage must be realistic').max(new Date().getFullYear() + 1, 'Vintage cannot be too far in the future').int('Vintage must be a whole number'),\n    varietal: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Varietal must be at least 2 characters').max(100, 'Varietal cannot exceed 100 characters'),\n    region: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(100, 'Region name too long').optional(),\n    alcohol_content: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0.5, 'Alcohol content must be at least 0.5%').max(20, 'Alcohol content cannot exceed 20%'),\n    volume_ml: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(187, 'Minimum volume is 187ml').max(3000, 'Maximum volume is 3000ml').int('Volume must be a whole number').default(750),\n    price_eur: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Price cannot be negative').max(10000, 'Price cannot exceed €10,000.00'),\n    cost_eur: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Cost cannot be negative').max(10000, 'Cost cannot exceed €10,000.00').optional(),\n    stock_quantity: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Stock quantity cannot be negative').max(10000, 'Stock quantity cannot exceed 10,000').int('Stock quantity must be a whole number').default(0),\n    reserved_quantity: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Reserved quantity cannot be negative').int('Reserved quantity must be a whole number').default(0),\n    reorder_level: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Reorder level cannot be negative').int('Reorder level must be a whole number').optional(),\n    weight_grams: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(100, 'Weight must be at least 100g').max(5000, 'Weight cannot exceed 5kg').int('Weight must be a whole number').default(1200),\n    description_en: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(10, 'English description must be at least 10 characters').max(2000, 'English description cannot exceed 2000 characters'),\n    description_fr: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(10, 'French description must be at least 10 characters').max(2000, 'French description cannot exceed 2000 characters'),\n    tasting_notes_en: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(1000, 'English tasting notes cannot exceed 1000 characters').optional(),\n    tasting_notes_fr: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(1000, 'French tasting notes cannot exceed 1000 characters').optional(),\n    food_pairing_en: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(500, 'English food pairing cannot exceed 500 characters').optional(),\n    food_pairing_fr: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(500, 'French food pairing cannot exceed 500 characters').optional(),\n    production_notes_en: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(1000, 'English production notes cannot exceed 1000 characters').optional(),\n    production_notes_fr: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(1000, 'French production notes cannot exceed 1000 characters').optional(),\n    allergens: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    organic_certified: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().default(false),\n    biodynamic_certified: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().default(false),\n    vegan_friendly: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().default(false),\n    google_product_category: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(200).optional(),\n    meta_product_category: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(200).optional(),\n    is_active: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().default(true),\n    featured: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().default(false),\n    sort_order: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Sort order cannot be negative').int('Sort order must be a whole number').default(0),\n    seo_title_en: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(60, 'English SEO title cannot exceed 60 characters').optional(),\n    seo_title_fr: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(60, 'French SEO title cannot exceed 60 characters').optional(),\n    seo_description_en: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(160, 'English SEO description cannot exceed 160 characters').optional(),\n    seo_description_fr: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(160, 'French SEO description cannot exceed 160 characters').optional(),\n    slug_en: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(3, 'English slug must be at least 3 characters').max(100, 'English slug cannot exceed 100 characters').regex(/^[a-z0-9-]+$/, 'English slug must contain only lowercase letters, numbers, and hyphens'),\n    slug_fr: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(3, 'French slug must be at least 3 characters').max(100, 'French slug cannot exceed 100 characters').regex(/^[a-z0-9-]+$/, 'French slug must contain only lowercase letters, numbers, and hyphens')\n});\n// Product image schema\nconst productImageSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    url: zod__WEBPACK_IMPORTED_MODULE_0__.string().url('Please enter a valid image URL'),\n    alt_text_en: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(200, 'English alt text cannot exceed 200 characters').optional(),\n    alt_text_fr: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(200, 'French alt text cannot exceed 200 characters').optional(),\n    display_order: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Display order cannot be negative').int('Display order must be a whole number').default(0),\n    image_type: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'bottle',\n        'label',\n        'vineyard',\n        'winemaker'\n    ]).default('bottle'),\n    width: zod__WEBPACK_IMPORTED_MODULE_0__.number().int().optional(),\n    height: zod__WEBPACK_IMPORTED_MODULE_0__.number().int().optional(),\n    file_size: zod__WEBPACK_IMPORTED_MODULE_0__.number().int().optional(),\n    is_primary: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().default(false)\n});\n// Update wine product schema (for PUT requests)\nconst updateWineProductSchema = wineProductSchema.partial().extend({\n    id: zod__WEBPACK_IMPORTED_MODULE_0__.string().uuid('Invalid product ID')\n});\n// Legacy product schema for backward compatibility\nconst productSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(3, 'Product name must be at least 3 characters').max(100, 'Product name cannot exceed 100 characters'),\n    sku: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(3, 'SKU must be at least 3 characters').max(50, 'SKU cannot exceed 50 characters').regex(/^[A-Z0-9-]+$/, 'SKU must contain only uppercase letters, numbers, and hyphens'),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(10, 'Description must be at least 10 characters').max(2000, 'Description cannot exceed 2000 characters'),\n    price: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Price must be at least €0.01').max(100000, 'Price cannot exceed €1,000.00'),\n    stockQuantity: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Stock quantity cannot be negative').max(10000, 'Stock quantity cannot exceed 10,000').int('Stock quantity must be a whole number'),\n    category: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'red_wine',\n        'white_wine',\n        'rose_wine',\n        'sparkling_wine',\n        'dessert_wine',\n        'fortified_wine'\n    ]),\n    vintage: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1800, 'Vintage must be realistic').max(new Date().getFullYear(), 'Vintage cannot be in the future').optional(),\n    alcoholContent: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0.5, 'Alcohol content must be at least 0.5%').max(20, 'Alcohol content cannot exceed 20%').optional(),\n    grapeVariety: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(100, 'Grape variety name too long').optional(),\n    region: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(100, 'Region name too long').optional(),\n    producer: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(100, 'Producer name too long').optional(),\n    volume: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(187, 'Minimum volume is 187ml').max(3000, 'Maximum volume is 3000ml').optional(),\n    servingTemperature: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(50, 'Serving temperature description too long').optional(),\n    agingPotential: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(100, 'Aging potential description too long').optional(),\n    pairingNotes: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(500, 'Pairing notes too long').optional(),\n    status: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'active',\n        'inactive',\n        'out_of_stock',\n        'discontinued'\n    ]),\n    isFeatured: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    isOrganic: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    isBiodynamic: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    imageUrl: zod__WEBPACK_IMPORTED_MODULE_0__.string().url('Please enter a valid image URL').optional(),\n    galleryImages: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string().url()).max(10, 'Maximum 10 gallery images').optional()\n});\n// Order schemas\nconst orderSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    customerId: zod__WEBPACK_IMPORTED_MODULE_0__.string().uuid('Invalid customer ID').optional(),\n    customerEmail: emailSchema,\n    customerFirstName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'First name is required'),\n    customerLastName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Last name is required'),\n    shippingAddress: addressSchema,\n    billingAddress: addressSchema,\n    items: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        productId: zod__WEBPACK_IMPORTED_MODULE_0__.string().uuid('Invalid product ID'),\n        quantity: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Quantity must be at least 1').int(),\n        unitPrice: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Unit price must be positive')\n    })).min(1, 'Order must contain at least one item'),\n    subtotal: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Subtotal cannot be negative'),\n    vatAmount: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'VAT amount cannot be negative'),\n    shippingCost: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Shipping cost cannot be negative'),\n    totalAmount: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Total amount must be positive'),\n    paymentMethod: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, 'Payment method is required'),\n    specialInstructions: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(500, 'Special instructions too long').optional(),\n    giftMessage: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(200, 'Gift message too long').optional()\n});\n// Contact form schemas\nconst contactFormSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Name must be at least 2 characters').max(100, 'Name cannot exceed 100 characters'),\n    email: emailSchema,\n    subject: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(5, 'Subject must be at least 5 characters').max(100, 'Subject cannot exceed 100 characters'),\n    message: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(10, 'Message must be at least 10 characters').max(1000, 'Message cannot exceed 1000 characters'),\n    phone: phoneSchema,\n    category: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'general',\n        'orders',\n        'products',\n        'shipping',\n        'returns',\n        'technical'\n    ]).optional()\n});\n// Wine estate contact form schema - specialized for Domaine Vallot\nconst frenchPhoneSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^(\\+33|0)[1-9](\\d{8})$/, 'Veuillez entrer un numéro de téléphone français valide (ex: 01 23 45 67 89)').optional();\nconst wineContactFormSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    firstName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Le prénom doit contenir au moins 2 caractères').max(50, 'Le prénom ne peut pas dépasser 50 caractères').regex(/^[a-zA-ZÀ-ÿ\\s'-]+$/, 'Le prénom contient des caractères invalides'),\n    lastName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Le nom doit contenir au moins 2 caractères').max(50, 'Le nom ne peut pas dépasser 50 caractères').regex(/^[a-zA-ZÀ-ÿ\\s'-]+$/, 'Le nom contient des caractères invalides'),\n    email: zod__WEBPACK_IMPORTED_MODULE_0__.string().email('Veuillez entrer une adresse email valide').max(255, 'L\\'adresse email est trop longue'),\n    phone: frenchPhoneSchema,\n    company: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(100, 'Le nom de la société ne peut pas dépasser 100 caractères').optional(),\n    inquiryType: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'wine_tasting',\n        'group_visit',\n        'wine_orders',\n        'business_partnership',\n        'press_media',\n        'general_inquiry'\n    ], {\n        errorMap: ()=>({\n                message: 'Veuillez sélectionner le type de demande'\n            })\n    }),\n    groupSize: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Le nombre de personnes doit être d\\'au moins 1').max(50, 'Nous ne pouvons accueillir plus de 50 personnes par groupe').int('Le nombre de personnes doit être un nombre entier').optional(),\n    preferredDate: zod__WEBPACK_IMPORTED_MODULE_0__.string().refine((date)=>{\n        if (!date) return true // Optional field\n        ;\n        const selectedDate = new Date(date);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        return selectedDate >= today;\n    }, 'La date préférée ne peut pas être dans le passé').optional(),\n    message: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(20, 'Votre message doit contenir au moins 20 caractères').max(1500, 'Votre message ne peut pas dépasser 1500 caractères').refine((msg)=>!/<[^>]*>/g.test(msg), 'Le message ne peut pas contenir de HTML'),\n    // Wine-specific fields\n    winePreferences: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(300, 'Les préférences vinicoles ne peuvent pas dépasser 300 caractères').optional(),\n    budgetRange: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(50, 'La fourchette budgétaire ne peut pas dépasser 50 caractères').optional(),\n    specialRequirements: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(300, 'Les exigences spéciales ne peuvent pas dépasser 300 caractères').optional(),\n    // Compliance fields\n    ageVerified: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().refine((val)=>val === true, 'Vous devez confirmer avoir l\\'âge légal pour consommer de l\\'alcool'),\n    privacyAccepted: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().refine((val)=>val === true, 'Vous devez accepter la politique de confidentialité'),\n    marketingConsent: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    // Anti-spam field (honeypot)\n    website: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(0, 'Ce champ doit rester vide').optional()\n}).refine((data)=>{\n    // Require group size for group visits and tastings\n    if ([\n        'wine_tasting',\n        'group_visit'\n    ].includes(data.inquiryType)) {\n        return data.groupSize && data.groupSize >= 1;\n    }\n    return true;\n}, {\n    message: 'Le nombre de personnes est requis pour les dégustations et visites de groupe',\n    path: [\n        'groupSize'\n    ]\n}).refine((data)=>{\n    // Validate business partnership requires company name\n    if (data.inquiryType === 'business_partnership') {\n        return data.company && data.company.trim().length >= 2;\n    }\n    return true;\n}, {\n    message: 'Le nom de la société est requis pour les partenariats commerciaux',\n    path: [\n        'company'\n    ]\n});\n// Newsletter subscription schema\nconst newsletterSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    email: emailSchema,\n    firstName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'First name is required').optional(),\n    preferences: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        newProducts: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n        specialOffers: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n        wineEvents: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n        wineEducation: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional()\n    }).optional(),\n    acceptTerms: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().refine((val)=>val === true, 'You must accept the terms and conditions')\n});\n// Admin schemas\nconst adminLoginSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    email: emailSchema,\n    password: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, 'Password is required'),\n    twoFactorCode: zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^\\d{6}$/, '2FA code must be 6 digits').optional()\n});\nconst adminUserSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    email: emailSchema,\n    firstName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'First name is required'),\n    lastName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Last name is required'),\n    role: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'admin',\n        'manager',\n        'staff'\n    ]),\n    permissions: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    isActive: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n    password: passwordSchema.optional()\n});\n// Inventory management schemas\nconst inventoryAdjustmentSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    productId: zod__WEBPACK_IMPORTED_MODULE_0__.string().uuid('Invalid product ID'),\n    adjustment: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(-1000, 'Adjustment too large').max(1000, 'Adjustment too large').int('Adjustment must be a whole number'),\n    reason: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'received',\n        'sold',\n        'damaged',\n        'expired',\n        'returned',\n        'correction',\n        'other'\n    ]),\n    notes: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(500, 'Notes cannot exceed 500 characters').optional(),\n    reference: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(100, 'Reference cannot exceed 100 characters').optional()\n});\n// Shipping rate calculation schema\nconst shippingRateSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    destination: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        country: zod__WEBPACK_IMPORTED_MODULE_0__.string().length(2, 'Country must be a 2-letter code'),\n        postalCode: postalCodeSchema,\n        city: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'City is required')\n    }),\n    items: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        productId: zod__WEBPACK_IMPORTED_MODULE_0__.string().uuid('Invalid product ID'),\n        quantity: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Quantity must be at least 1').int(),\n        weight: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Weight must be positive').optional()\n    })).min(1, 'At least one item is required'),\n    totalValue: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Total value must be positive')\n});\n// VAT calculation schema\nconst vatCalculationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    amount: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Amount must be positive'),\n    shippingAmount: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Shipping amount cannot be negative').optional(),\n    country: zod__WEBPACK_IMPORTED_MODULE_0__.string().length(2, 'Country must be a 2-letter code'),\n    customerType: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'consumer',\n        'business'\n    ]).optional(),\n    vatNumber: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n// Search and filter schemas\nconst productSearchSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    query: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(100, 'Search query too long').optional(),\n    category: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'red_wine',\n        'white_wine',\n        'rose_wine',\n        'sparkling_wine',\n        'dessert_wine',\n        'fortified_wine'\n    ]).optional(),\n    minPrice: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Minimum price cannot be negative').optional(),\n    maxPrice: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Maximum price cannot be negative').optional(),\n    vintage: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1800, 'Vintage too old').max(new Date().getFullYear(), 'Vintage cannot be in the future').optional(),\n    region: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(100, 'Region name too long').optional(),\n    inStock: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    isOrganic: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    sortBy: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'name',\n        'price',\n        'vintage',\n        'created_at',\n        'popularity'\n    ]).optional(),\n    sortOrder: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'asc',\n        'desc'\n    ]).optional(),\n    limit: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Limit must be at least 1').max(100, 'Limit cannot exceed 100').optional(),\n    offset: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Offset cannot be negative').optional()\n});\n// File upload schemas\nconst imageUploadSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    file: zod__WEBPACK_IMPORTED_MODULE_0__.any().refine((file)=>file instanceof File, 'Please select a valid file').refine((file)=>file.size <= 5 * 1024 * 1024, 'File size must be less than 5MB').refine((file)=>[\n            'image/jpeg',\n            'image/png',\n            'image/webp'\n        ].includes(file.type), 'File must be JPEG, PNG, or WebP format'),\n    alt: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(200, 'Alt text cannot exceed 200 characters').optional()\n});\n// Validation helper functions\nconst validateSchema = (schema, data)=>{\n    try {\n        const result = schema.parse(data);\n        return {\n            success: true,\n            data: result\n        };\n    } catch (error) {\n        if (error instanceof zod__WEBPACK_IMPORTED_MODULE_1__.ZodError) {\n            const errors = {};\n            for (const issue of error.issues){\n                const path = issue.path.join('.');\n                if (!errors[path]) {\n                    errors[path] = [];\n                }\n                errors[path].push(issue.message);\n            }\n            return {\n                success: false,\n                errors\n            };\n        }\n        return {\n            success: false,\n            errors: {\n                general: [\n                    'Validation failed'\n                ]\n            }\n        };\n    }\n};\nconst getErrorMessage = (errors, field)=>{\n    return errors[field]?.[0] || '';\n};\nconst hasErrors = (errors)=>{\n    return Object.keys(errors).length > 0;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/validators/schemas.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/vat/calculator.ts":
/*!***********************************!*\
  !*** ./src/lib/vat/calculator.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VatCalculator: () => (/* binding */ VatCalculator),\n/* harmony export */   calculateVat: () => (/* binding */ calculateVat),\n/* harmony export */   formatVatAmount: () => (/* binding */ formatVatAmount),\n/* harmony export */   formatVatRate: () => (/* binding */ formatVatRate),\n/* harmony export */   isEuCountry: () => (/* binding */ isEuCountry),\n/* harmony export */   validateVatCalculationInput: () => (/* binding */ validateVatCalculationInput),\n/* harmony export */   vatCalculator: () => (/* binding */ vatCalculator)\n/* harmony export */ });\n// VAT calculation service for EU wine sales compliance\n// EU VAT rates for wine (as of 2024)\nconst EU_VAT_RATES = {\n    'AT': {\n        country_code: 'AT',\n        country_name: 'Austria',\n        rate: 0.20,\n        is_eu_member: true,\n        is_active: true\n    },\n    'BE': {\n        country_code: 'BE',\n        country_name: 'Belgium',\n        rate: 0.21,\n        is_eu_member: true,\n        is_active: true\n    },\n    'BG': {\n        country_code: 'BG',\n        country_name: 'Bulgaria',\n        rate: 0.20,\n        is_eu_member: true,\n        is_active: true\n    },\n    'HR': {\n        country_code: 'HR',\n        country_name: 'Croatia',\n        rate: 0.25,\n        is_eu_member: true,\n        is_active: true\n    },\n    'CY': {\n        country_code: 'CY',\n        country_name: 'Cyprus',\n        rate: 0.19,\n        is_eu_member: true,\n        is_active: true\n    },\n    'CZ': {\n        country_code: 'CZ',\n        country_name: 'Czech Republic',\n        rate: 0.21,\n        is_eu_member: true,\n        is_active: true\n    },\n    'DK': {\n        country_code: 'DK',\n        country_name: 'Denmark',\n        rate: 0.25,\n        is_eu_member: true,\n        is_active: true\n    },\n    'EE': {\n        country_code: 'EE',\n        country_name: 'Estonia',\n        rate: 0.20,\n        is_eu_member: true,\n        is_active: true\n    },\n    'FI': {\n        country_code: 'FI',\n        country_name: 'Finland',\n        rate: 0.24,\n        is_eu_member: true,\n        is_active: true\n    },\n    'FR': {\n        country_code: 'FR',\n        country_name: 'France',\n        rate: 0.20,\n        is_eu_member: true,\n        is_active: true\n    },\n    'DE': {\n        country_code: 'DE',\n        country_name: 'Germany',\n        rate: 0.19,\n        is_eu_member: true,\n        is_active: true\n    },\n    'GR': {\n        country_code: 'GR',\n        country_name: 'Greece',\n        rate: 0.24,\n        is_eu_member: true,\n        is_active: true\n    },\n    'HU': {\n        country_code: 'HU',\n        country_name: 'Hungary',\n        rate: 0.27,\n        is_eu_member: true,\n        is_active: true\n    },\n    'IE': {\n        country_code: 'IE',\n        country_name: 'Ireland',\n        rate: 0.23,\n        is_eu_member: true,\n        is_active: true\n    },\n    'IT': {\n        country_code: 'IT',\n        country_name: 'Italy',\n        rate: 0.22,\n        is_eu_member: true,\n        is_active: true\n    },\n    'LV': {\n        country_code: 'LV',\n        country_name: 'Latvia',\n        rate: 0.21,\n        is_eu_member: true,\n        is_active: true\n    },\n    'LT': {\n        country_code: 'LT',\n        country_name: 'Lithuania',\n        rate: 0.21,\n        is_eu_member: true,\n        is_active: true\n    },\n    'LU': {\n        country_code: 'LU',\n        country_name: 'Luxembourg',\n        rate: 0.17,\n        is_eu_member: true,\n        is_active: true\n    },\n    'MT': {\n        country_code: 'MT',\n        country_name: 'Malta',\n        rate: 0.18,\n        is_eu_member: true,\n        is_active: true\n    },\n    'NL': {\n        country_code: 'NL',\n        country_name: 'Netherlands',\n        rate: 0.21,\n        is_eu_member: true,\n        is_active: true\n    },\n    'PL': {\n        country_code: 'PL',\n        country_name: 'Poland',\n        rate: 0.23,\n        is_eu_member: true,\n        is_active: true\n    },\n    'PT': {\n        country_code: 'PT',\n        country_name: 'Portugal',\n        rate: 0.23,\n        is_eu_member: true,\n        is_active: true\n    },\n    'RO': {\n        country_code: 'RO',\n        country_name: 'Romania',\n        rate: 0.19,\n        is_eu_member: true,\n        is_active: true\n    },\n    'SK': {\n        country_code: 'SK',\n        country_name: 'Slovakia',\n        rate: 0.20,\n        is_eu_member: true,\n        is_active: true\n    },\n    'SI': {\n        country_code: 'SI',\n        country_name: 'Slovenia',\n        rate: 0.22,\n        is_eu_member: true,\n        is_active: true\n    },\n    'ES': {\n        country_code: 'ES',\n        country_name: 'Spain',\n        rate: 0.21,\n        is_eu_member: true,\n        is_active: true\n    },\n    'SE': {\n        country_code: 'SE',\n        country_name: 'Sweden',\n        rate: 0.25,\n        is_eu_member: true,\n        is_active: true\n    }\n};\n// Seller location (assumed to be France for Domaine Vallot)\nconst SELLER_COUNTRY = 'FR';\nclass VatCalculator {\n    constructor(customRates){\n        this.vatRates = customRates || EU_VAT_RATES;\n    }\n    /**\n   * Calculate VAT for a transaction based on EU rules\n   */ calculateVat(input) {\n        const { amount, shipping_amount = 0, country_code, product_type = 'wine', customer_type = 'consumer', business_vat_number } = input;\n        const countryCode = country_code.toUpperCase();\n        const vatRate = this.getVatRate(countryCode);\n        // Determine if reverse charge applies (B2B within EU, excluding seller country)\n        const isReverseCharge = this.shouldApplyReverseCharge(countryCode, customer_type, business_vat_number);\n        // Calculate VAT amounts\n        const effectiveVatRate = isReverseCharge ? 0 : vatRate?.rate || 0;\n        const productVat = Math.round(amount * effectiveVatRate);\n        const shippingVat = Math.round(shipping_amount * effectiveVatRate);\n        const totalVat = productVat + shippingVat;\n        const totalAmount = amount + shipping_amount + totalVat;\n        return {\n            base_amount: amount,\n            shipping_amount,\n            vat_rate: effectiveVatRate,\n            vat_amount: totalVat,\n            total_amount: totalAmount,\n            country: vatRate?.country_name || 'Unknown',\n            country_code: countryCode,\n            is_reverse_charge: isReverseCharge,\n            breakdown: {\n                product_vat: productVat,\n                shipping_vat: shippingVat\n            },\n            exemption_reason: isReverseCharge ? 'Reverse charge - B2B transaction' : !vatRate?.is_eu_member ? 'Non-EU country' : undefined\n        };\n    }\n    /**\n   * Get VAT rate for a country\n   */ getVatRate(countryCode) {\n        return this.vatRates[countryCode] || null;\n    }\n    /**\n   * Determine if reverse charge should apply\n   * Reverse charge applies for:\n   * - B2B transactions within EU (excluding seller's country)\n   * - Valid VAT number provided\n   */ shouldApplyReverseCharge(countryCode, customerType, businessVatNumber) {\n        // Only applies to business customers\n        if (customerType !== 'business') return false;\n        // Must have valid VAT number\n        if (!businessVatNumber || !this.isValidVatNumber(businessVatNumber)) return false;\n        // Must be EU country\n        const vatRate = this.getVatRate(countryCode);\n        if (!vatRate?.is_eu_member) return false;\n        // Must not be seller's country\n        if (countryCode === SELLER_COUNTRY) return false;\n        return true;\n    }\n    /**\n   * Basic VAT number validation\n   * In production, this should use a proper VAT validation service\n   */ isValidVatNumber(vatNumber) {\n        // Remove spaces and convert to uppercase\n        const cleanVat = vatNumber.replace(/\\s/g, '').toUpperCase();\n        // Basic format check - should start with country code + digits/letters\n        const vatPattern = /^[A-Z]{2}[A-Z0-9]{2,12}$/;\n        return vatPattern.test(cleanVat);\n    }\n    /**\n   * Calculate VAT for multiple items\n   */ calculateVatForItems(items, commonData) {\n        const totalAmount = items.reduce((sum, item)=>sum + item.amount, 0);\n        return this.calculateVat({\n            ...commonData,\n            amount: totalAmount\n        });\n    }\n    /**\n   * Get all available VAT rates\n   */ getAllVatRates() {\n        return Object.values(this.vatRates).filter((rate)=>rate.is_active);\n    }\n    /**\n   * Get EU member countries\n   */ getEuCountries() {\n        return this.getAllVatRates().filter((rate)=>rate.is_eu_member);\n    }\n    /**\n   * Check if country is in EU\n   */ isEuCountry(countryCode) {\n        const rate = this.getVatRate(countryCode.toUpperCase());\n        return rate?.is_eu_member || false;\n    }\n    /**\n   * Format VAT amount for display\n   */ formatVatAmount(amount, currency = 'EUR') {\n        const displayAmount = amount / 100 // Convert from cents\n        ;\n        return new Intl.NumberFormat('fr-FR', {\n            style: 'currency',\n            currency\n        }).format(displayAmount);\n    }\n    /**\n   * Format VAT rate for display\n   */ formatVatRate(rate) {\n        return `${(rate * 100).toFixed(0)}%`;\n    }\n}\n// Export singleton instance\nconst vatCalculator = new VatCalculator();\n// Export helper functions\nconst calculateVat = (input)=>vatCalculator.calculateVat(input);\nconst isEuCountry = (countryCode)=>vatCalculator.isEuCountry(countryCode);\nconst formatVatAmount = (amount, currency = 'EUR')=>vatCalculator.formatVatAmount(amount, currency);\nconst formatVatRate = (rate)=>vatCalculator.formatVatRate(rate);\n// Validation helpers\nconst validateVatCalculationInput = (input)=>{\n    const errors = [];\n    if (input.amount < 0) {\n        errors.push('Amount must be positive');\n    }\n    if (input.shipping_amount && input.shipping_amount < 0) {\n        errors.push('Shipping amount must be positive');\n    }\n    if (!input.country_code || input.country_code.length !== 2) {\n        errors.push('Valid country code is required');\n    }\n    if (input.customer_type && ![\n        'business',\n        'consumer'\n    ].includes(input.customer_type)) {\n        errors.push('Customer type must be business or consumer');\n    }\n    return errors;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/vat/calculator.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "@supabase/supabase-js":
/*!****************************************!*\
  !*** external "@supabase/supabase-js" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@supabase/supabase-js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/zod","vendor-chunks/@supabase","vendor-chunks/cookie","vendor-chunks/@mollie","vendor-chunks/mime-db","vendor-chunks/axios","vendor-chunks/follow-redirects","vendor-chunks/debug","vendor-chunks/form-data","vendor-chunks/get-intrinsic","vendor-chunks/asynckit","vendor-chunks/combined-stream","vendor-chunks/mime-types","vendor-chunks/ms","vendor-chunks/supports-color","vendor-chunks/has-symbols","vendor-chunks/delayed-stream","vendor-chunks/function-bind","vendor-chunks/es-set-tostringtag","vendor-chunks/get-proto","vendor-chunks/call-bind-apply-helpers","vendor-chunks/dunder-proto","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/has-flag","vendor-chunks/gopd","vendor-chunks/es-define-property","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/es-object-atoms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Forders%2Froute&page=%2Fapi%2Forders%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2Froute.ts&appDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();