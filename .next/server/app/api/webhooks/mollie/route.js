/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/webhooks/mollie/route";
exports.ids = ["app/api/webhooks/mollie/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fwebhooks%2Fmollie%2Froute&page=%2Fapi%2Fwebhooks%2Fmollie%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fwebhooks%2Fmollie%2Froute.ts&appDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fwebhooks%2Fmollie%2Froute&page=%2Fapi%2Fwebhooks%2Fmollie%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fwebhooks%2Fmollie%2Froute.ts&appDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var C_Users_olivi_Domaine_Vallot_src_app_api_webhooks_mollie_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/webhooks/mollie/route.ts */ \"(rsc)/./src/app/api/webhooks/mollie/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/webhooks/mollie/route\",\n        pathname: \"/api/webhooks/mollie\",\n        filename: \"route\",\n        bundlePath: \"app/api/webhooks/mollie/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"C:\\\\Users\\\\olivi\\\\Domaine Vallot\\\\src\\\\app\\\\api\\\\webhooks\\\\mollie\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_olivi_Domaine_Vallot_src_app_api_webhooks_mollie_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/webhooks/mollie/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        if (!(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fwebhooks%2Fmollie%2Froute&page=%2Fapi%2Fwebhooks%2Fmollie%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fwebhooks%2Fmollie%2Froute.ts&appDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/webhooks/mollie/route.ts":
/*!**********************************************!*\
  !*** ./src/app/api/webhooks/mollie/route.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_mollie_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/mollie/client */ \"(rsc)/./src/lib/mollie/client.ts\");\n/* harmony import */ var _lib_supabase_server__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/supabase/server */ \"(rsc)/./src/lib/supabase/server.ts\");\n\n\n\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { id: paymentId } = body;\n        if (!paymentId) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Payment ID is required'\n            }, {\n                status: 400\n            });\n        }\n        // Verify webhook and get payment details\n        const { payment, isSuccessful, isFailed } = await (0,_lib_mollie_client__WEBPACK_IMPORTED_MODULE_1__.handlePaymentWebhook)(paymentId);\n        if (!payment) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Invalid payment webhook'\n            }, {\n                status: 400\n            });\n        }\n        // Update order status in database\n        const supabase = (0,_lib_supabase_server__WEBPACK_IMPORTED_MODULE_2__.createRouteHandlerSupabaseClient)();\n        const orderId = payment.metadata?.orderId;\n        if (orderId) {\n            let newStatus = 'pending';\n            if (isSuccessful) newStatus = 'confirmed';\n            if (isFailed) newStatus = 'payment_failed';\n            await supabase.from('orders').update({\n                status: newStatus,\n                payment_id: paymentId,\n                payment_status: payment.status,\n                updated_at: new Date().toISOString()\n            }).eq('id', orderId);\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            received: true\n        });\n    } catch (error) {\n        console.error('Mollie webhook error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Webhook processing failed'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS93ZWJob29rcy9tb2xsaWUvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF1RDtBQUNHO0FBQ2M7QUFFakUsZUFBZUcsS0FBS0MsT0FBb0I7SUFDN0MsSUFBSTtRQUNGLE1BQU1DLE9BQU8sTUFBTUQsUUFBUUUsSUFBSTtRQUMvQixNQUFNLEVBQUVDLElBQUlDLFNBQVMsRUFBRSxHQUFHSDtRQUUxQixJQUFJLENBQUNHLFdBQVc7WUFDZCxPQUFPUixxREFBWUEsQ0FBQ00sSUFBSSxDQUN0QjtnQkFBRUcsT0FBTztZQUF5QixHQUNsQztnQkFBRUMsUUFBUTtZQUFJO1FBRWxCO1FBRUEseUNBQXlDO1FBQ3pDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxZQUFZLEVBQUVDLFFBQVEsRUFBRSxHQUFHLE1BQU1aLHdFQUFvQkEsQ0FBQ087UUFFdkUsSUFBSSxDQUFDRyxTQUFTO1lBQ1osT0FBT1gscURBQVlBLENBQUNNLElBQUksQ0FDdEI7Z0JBQUVHLE9BQU87WUFBMEIsR0FDbkM7Z0JBQUVDLFFBQVE7WUFBSTtRQUVsQjtRQUVBLGtDQUFrQztRQUNsQyxNQUFNSSxXQUFXWixzRkFBZ0NBO1FBQ2pELE1BQU1hLFVBQVVKLFFBQVFLLFFBQVEsRUFBRUQ7UUFFbEMsSUFBSUEsU0FBUztZQUNYLElBQUlFLFlBQVk7WUFDaEIsSUFBSUwsY0FBY0ssWUFBWTtZQUM5QixJQUFJSixVQUFVSSxZQUFZO1lBRTFCLE1BQU1ILFNBQ0hJLElBQUksQ0FBQyxVQUNMQyxNQUFNLENBQUM7Z0JBQ05ULFFBQVFPO2dCQUNSRyxZQUFZWjtnQkFDWmEsZ0JBQWdCVixRQUFRRCxNQUFNO2dCQUM5QlksWUFBWSxJQUFJQyxPQUFPQyxXQUFXO1lBQ3BDLEdBQ0NDLEVBQUUsQ0FBQyxNQUFNVjtRQUNkO1FBRUEsT0FBT2YscURBQVlBLENBQUNNLElBQUksQ0FBQztZQUFFb0IsVUFBVTtRQUFLO0lBRTVDLEVBQUUsT0FBT2pCLE9BQU87UUFDZGtCLFFBQVFsQixLQUFLLENBQUMseUJBQXlCQTtRQUN2QyxPQUFPVCxxREFBWUEsQ0FBQ00sSUFBSSxDQUN0QjtZQUFFRyxPQUFPO1FBQTRCLEdBQ3JDO1lBQUVDLFFBQVE7UUFBSTtJQUVsQjtBQUNGIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXG9saXZpXFxEb21haW5lIFZhbGxvdFxcc3JjXFxhcHBcXGFwaVxcd2ViaG9va3NcXG1vbGxpZVxccm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJ1xuaW1wb3J0IHsgaGFuZGxlUGF5bWVudFdlYmhvb2sgfSBmcm9tICdAL2xpYi9tb2xsaWUvY2xpZW50J1xuaW1wb3J0IHsgY3JlYXRlUm91dGVIYW5kbGVyU3VwYWJhc2VDbGllbnQgfSBmcm9tICdAL2xpYi9zdXBhYmFzZS9zZXJ2ZXInXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QuanNvbigpXG4gICAgY29uc3QgeyBpZDogcGF5bWVudElkIH0gPSBib2R5XG5cbiAgICBpZiAoIXBheW1lbnRJZCkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiAnUGF5bWVudCBJRCBpcyByZXF1aXJlZCcgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApXG4gICAgfVxuXG4gICAgLy8gVmVyaWZ5IHdlYmhvb2sgYW5kIGdldCBwYXltZW50IGRldGFpbHNcbiAgICBjb25zdCB7IHBheW1lbnQsIGlzU3VjY2Vzc2Z1bCwgaXNGYWlsZWQgfSA9IGF3YWl0IGhhbmRsZVBheW1lbnRXZWJob29rKHBheW1lbnRJZClcblxuICAgIGlmICghcGF5bWVudCkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiAnSW52YWxpZCBwYXltZW50IHdlYmhvb2snIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgKVxuICAgIH1cblxuICAgIC8vIFVwZGF0ZSBvcmRlciBzdGF0dXMgaW4gZGF0YWJhc2VcbiAgICBjb25zdCBzdXBhYmFzZSA9IGNyZWF0ZVJvdXRlSGFuZGxlclN1cGFiYXNlQ2xpZW50KClcbiAgICBjb25zdCBvcmRlcklkID0gcGF5bWVudC5tZXRhZGF0YT8ub3JkZXJJZFxuXG4gICAgaWYgKG9yZGVySWQpIHtcbiAgICAgIGxldCBuZXdTdGF0dXMgPSAncGVuZGluZydcbiAgICAgIGlmIChpc1N1Y2Nlc3NmdWwpIG5ld1N0YXR1cyA9ICdjb25maXJtZWQnXG4gICAgICBpZiAoaXNGYWlsZWQpIG5ld1N0YXR1cyA9ICdwYXltZW50X2ZhaWxlZCdcblxuICAgICAgYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ29yZGVycycpXG4gICAgICAgIC51cGRhdGUoe1xuICAgICAgICAgIHN0YXR1czogbmV3U3RhdHVzLFxuICAgICAgICAgIHBheW1lbnRfaWQ6IHBheW1lbnRJZCxcbiAgICAgICAgICBwYXltZW50X3N0YXR1czogcGF5bWVudC5zdGF0dXMsXG4gICAgICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICAgIH0pXG4gICAgICAgIC5lcSgnaWQnLCBvcmRlcklkKVxuICAgIH1cblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IHJlY2VpdmVkOiB0cnVlIH0pXG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdNb2xsaWUgd2ViaG9vayBlcnJvcjonLCBlcnJvcilcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IGVycm9yOiAnV2ViaG9vayBwcm9jZXNzaW5nIGZhaWxlZCcgfSxcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgIClcbiAgfVxufSJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJoYW5kbGVQYXltZW50V2ViaG9vayIsImNyZWF0ZVJvdXRlSGFuZGxlclN1cGFiYXNlQ2xpZW50IiwiUE9TVCIsInJlcXVlc3QiLCJib2R5IiwianNvbiIsImlkIiwicGF5bWVudElkIiwiZXJyb3IiLCJzdGF0dXMiLCJwYXltZW50IiwiaXNTdWNjZXNzZnVsIiwiaXNGYWlsZWQiLCJzdXBhYmFzZSIsIm9yZGVySWQiLCJtZXRhZGF0YSIsIm5ld1N0YXR1cyIsImZyb20iLCJ1cGRhdGUiLCJwYXltZW50X2lkIiwicGF5bWVudF9zdGF0dXMiLCJ1cGRhdGVkX2F0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiZXEiLCJyZWNlaXZlZCIsImNvbnNvbGUiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/webhooks/mollie/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/mollie/client.ts":
/*!**********************************!*\
  !*** ./src/lib/mollie/client.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MollieError: () => (/* binding */ MollieError),\n/* harmony export */   createWinePayment: () => (/* binding */ createWinePayment),\n/* harmony export */   formatPaymentAmount: () => (/* binding */ formatPaymentAmount),\n/* harmony export */   getPaymentStatusColor: () => (/* binding */ getPaymentStatusColor),\n/* harmony export */   getPaymentStatusLabel: () => (/* binding */ getPaymentStatusLabel),\n/* harmony export */   handlePaymentWebhook: () => (/* binding */ handlePaymentWebhook),\n/* harmony export */   mollieClient: () => (/* binding */ mollieClient)\n/* harmony export */ });\n/* harmony import */ var _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @mollie/api-client */ \"(rsc)/./node_modules/@mollie/api-client/dist/mollie.esm.js\");\n// Mollie payment service for wine e-commerce\n// Updated to use latest @mollie/api-client patterns\n\nclass MollieClient {\n    constructor(){\n        this.apiKey = process.env.MOLLIE_API_KEY || '';\n        this.isTestMode = this.apiKey.startsWith('test_');\n        if (!this.apiKey) {\n            throw new Error('MOLLIE_API_KEY environment variable is required');\n        }\n        // Use the official @mollie/api-client factory function\n        this.mollieClient = (0,_mollie_api_client__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n            apiKey: this.apiKey\n        });\n    }\n    /**\n   * Create a new payment using the official client\n   */ async createPayment(paymentData) {\n        const payload = {\n            amount: {\n                currency: paymentData.currency || 'EUR',\n                value: this.formatAmount(paymentData.amount, paymentData.currency || 'EUR')\n            },\n            description: paymentData.description,\n            redirectUrl: paymentData.redirectUrl,\n            webhookUrl: paymentData.webhookUrl,\n            metadata: {\n                orderId: paymentData.orderId,\n                customerEmail: paymentData.customerEmail,\n                ...paymentData.metadata\n            },\n            locale: paymentData.locale || 'en_US',\n            method: paymentData.method || undefined\n        };\n        try {\n            const payment = await this.mollieClient.payments.create(payload);\n            return this.transformPayment(payment);\n        } catch (error) {\n            throw new MollieError(error.title || 'Payment creation failed', error.status || 500, error.detail || error.message || 'Unknown error', error);\n        }\n    }\n    /**\n   * Get payment details using the official client\n   */ async getPayment(paymentId) {\n        try {\n            const payment = await this.mollieClient.payments.get(paymentId);\n            return this.transformPayment(payment);\n        } catch (error) {\n            throw new MollieError(error.title || 'Payment fetch failed', error.status || 500, error.detail || error.message || 'Unknown error', error);\n        }\n    }\n    /**\n   * Cancel a payment using the official client\n   */ async cancelPayment(paymentId) {\n        try {\n            const payment = await this.mollieClient.payments.cancel(paymentId);\n            return this.transformPayment(payment);\n        } catch (error) {\n            throw new MollieError(error.title || 'Payment cancellation failed', error.status || 500, error.detail || error.message || 'Unknown error', error);\n        }\n    }\n    /**\n   * Create a refund\n   */ async createRefund(paymentId, amount, description, currency = 'EUR') {\n        const payload = {};\n        if (amount) {\n            payload.amount = {\n                currency,\n                value: this.formatAmount(amount, currency)\n            };\n        }\n        if (description) {\n            payload.description = description;\n        }\n        const response = await this.makeRequest('POST', `/payments/${paymentId}/refunds`, payload);\n        return response;\n    }\n    /**\n   * Get available payment methods using the official client\n   */ async getPaymentMethods(amount, currency = 'EUR', locale) {\n        try {\n            const options = {};\n            if (amount) {\n                options.amount = {\n                    currency,\n                    value: this.formatAmount(amount, currency)\n                };\n            }\n            if (locale) {\n                options.locale = locale;\n            }\n            const methodsResponse = await this.mollieClient.methods.list(options);\n            return methodsResponse.map((method)=>({\n                    id: method.id,\n                    name: method.description,\n                    minimumAmount: method.minimumAmount ? parseFloat(method.minimumAmount.value) * 100 : undefined,\n                    maximumAmount: method.maximumAmount ? parseFloat(method.maximumAmount.value) * 100 : undefined,\n                    image: method.image?.size2x || method.image?.size1x\n                }));\n        } catch (error) {\n            throw new MollieError(error.title || 'Payment methods fetch failed', error.status || 500, error.detail || error.message || 'Unknown error', error);\n        }\n    }\n    /**\n   * Verify webhook signature\n   */ verifyWebhookSignature(body, signature) {\n        // Mollie doesn't use webhook signatures by default\n        // Instead, verify by making API call to get payment status\n        // This is handled in the webhook verification method\n        return true;\n    }\n    /**\n   * Verify webhook by fetching payment from Mollie\n   */ async verifyWebhook(paymentId) {\n        try {\n            return await this.getPayment(paymentId);\n        } catch (error) {\n            console.error('Failed to verify webhook:', error);\n            return null;\n        }\n    }\n    /**\n   * Check if payment is successful (using official enum)\n   */ isPaymentSuccessful(status) {\n        return status === _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.paid || status === _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.authorized;\n    }\n    /**\n   * Check if payment is pending (using official enum)\n   */ isPaymentPending(status) {\n        return status === _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.open || status === _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.pending;\n    }\n    /**\n   * Check if payment failed (using official enum)\n   */ isPaymentFailed(status) {\n        return status === _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.failed || status === _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.canceled || status === _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.expired;\n    }\n    /**\n   * Get wine-appropriate payment methods (using official enum)\n   * Excludes methods not suitable for alcohol sales\n   */ getWineCompatibleMethods() {\n        return [\n            _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentMethod.ideal,\n            _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentMethod.creditcard,\n            _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentMethod.bancontact,\n            _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentMethod.sofort,\n            _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentMethod.eps,\n            _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentMethod.giropay,\n            _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentMethod.belfius,\n            _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentMethod.paypal,\n            _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentMethod.applepay,\n            _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentMethod.przelewy24\n        ];\n    }\n    /**\n   * Format amount for Mollie API (string with 2 decimals)\n   */ formatAmount(amount, currency) {\n        // Amount is in cents, convert to decimal string\n        const decimalAmount = amount / 100;\n        return decimalAmount.toFixed(2);\n    }\n    /**\n   * Transform Mollie API response to our internal format\n   */ transformPayment(payment) {\n        return {\n            id: payment.id,\n            status: payment.status,\n            amount: {\n                value: payment.amount.value,\n                currency: payment.amount.currency\n            },\n            description: payment.description,\n            method: payment.method,\n            metadata: payment.metadata,\n            createdAt: payment.createdAt,\n            paidAt: payment.paidAt,\n            canceledAt: payment.canceledAt,\n            expiredAt: payment.expiredAt,\n            failedAt: payment.failedAt,\n            links: {\n                checkout: payment.getCheckoutUrl?.() || payment._links?.checkout?.href,\n                self: payment._links?.self?.href\n            },\n            orderId: payment.metadata?.orderId\n        };\n    }\n}\nclass MollieError extends Error {\n    constructor(message, status, detail, data){\n        super(message);\n        this.name = 'MollieError';\n        this.status = status;\n        this.detail = detail;\n        this.data = data;\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            status: this.status,\n            detail: this.detail,\n            data: this.data\n        };\n    }\n}\n// Export singleton instance\nconst mollieClient = new MollieClient();\n// Helper functions\nconst createWinePayment = async (orderData)=>{\n    const baseUrl = \"http://localhost:3000\" || 0 || (0);\n    return mollieClient.createPayment({\n        orderId: orderData.orderId,\n        amount: orderData.amount,\n        currency: 'EUR',\n        description: orderData.description || `Wine order ${orderData.orderId}`,\n        customerEmail: orderData.customerEmail,\n        customerName: orderData.customerName,\n        redirectUrl: `${baseUrl}/orders/${orderData.orderId}?payment=success`,\n        webhookUrl: `${baseUrl}/api/webhooks/mollie`,\n        locale: orderData.locale || 'en_US',\n        method: mollieClient.getWineCompatibleMethods(),\n        metadata: {\n            orderType: 'wine',\n            customerAge: 'verified' // Assume age verification completed\n        }\n    });\n};\nconst handlePaymentWebhook = async (paymentId)=>{\n    const payment = await mollieClient.verifyWebhook(paymentId);\n    if (!payment) {\n        throw new Error('Invalid payment webhook');\n    }\n    return {\n        payment,\n        isSuccessful: mollieClient.isPaymentSuccessful(payment.status),\n        isPending: mollieClient.isPaymentPending(payment.status),\n        isFailed: mollieClient.isPaymentFailed(payment.status)\n    };\n};\nconst formatPaymentAmount = (amount, currency = 'EUR')=>{\n    return new Intl.NumberFormat('fr-FR', {\n        style: 'currency',\n        currency\n    }).format(amount / 100);\n};\n// Payment status helpers for UI\nconst getPaymentStatusColor = (status)=>{\n    switch(status){\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.paid:\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.authorized:\n            return 'green';\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.open:\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.pending:\n            return 'blue';\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.failed:\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.canceled:\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.expired:\n            return 'red';\n        default:\n            return 'gray';\n    }\n};\nconst getPaymentStatusLabel = (status)=>{\n    switch(status){\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.open:\n            return 'Awaiting payment';\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.paid:\n            return 'Paid';\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.authorized:\n            return 'Authorized';\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.pending:\n            return 'Processing';\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.canceled:\n            return 'Canceled';\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.expired:\n            return 'Expired';\n        case _mollie_api_client__WEBPACK_IMPORTED_MODULE_0__.PaymentStatus.failed:\n            return 'Failed';\n        default:\n            return 'Unknown';\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/mollie/client.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/supabase/server.ts":
/*!************************************!*\
  !*** ./src/lib/supabase/server.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addToCart: () => (/* binding */ addToCart),\n/* harmony export */   bulkUpdateProductFeatured: () => (/* binding */ bulkUpdateProductFeatured),\n/* harmony export */   bulkUpdateProductStatus: () => (/* binding */ bulkUpdateProductStatus),\n/* harmony export */   createAdminProduct: () => (/* binding */ createAdminProduct),\n/* harmony export */   createAnonymousSupabaseClient: () => (/* binding */ createAnonymousSupabaseClient),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   createOrUpdateCustomer: () => (/* binding */ createOrUpdateCustomer),\n/* harmony export */   createOrder: () => (/* binding */ createOrder),\n/* harmony export */   createProductImage: () => (/* binding */ createProductImage),\n/* harmony export */   createRouteHandlerSupabaseClient: () => (/* binding */ createRouteHandlerSupabaseClient),\n/* harmony export */   createServerSupabaseClient: () => (/* binding */ createServerSupabaseClient),\n/* harmony export */   deleteAdminProduct: () => (/* binding */ deleteAdminProduct),\n/* harmony export */   deleteProductImage: () => (/* binding */ deleteProductImage),\n/* harmony export */   duplicateProduct: () => (/* binding */ duplicateProduct),\n/* harmony export */   fixSupabaseImageUrl: () => (/* binding */ fixSupabaseImageUrl),\n/* harmony export */   getAdminProductById: () => (/* binding */ getAdminProductById),\n/* harmony export */   getAdminProducts: () => (/* binding */ getAdminProducts),\n/* harmony export */   getCartItems: () => (/* binding */ getCartItems),\n/* harmony export */   getFeaturedProducts: () => (/* binding */ getFeaturedProducts),\n/* harmony export */   getLowStockProducts: () => (/* binding */ getLowStockProducts),\n/* harmony export */   getOrderById: () => (/* binding */ getOrderById),\n/* harmony export */   getProductById: () => (/* binding */ getProductById),\n/* harmony export */   getProductBySlug: () => (/* binding */ getProductBySlug),\n/* harmony export */   getProducts: () => (/* binding */ getProducts),\n/* harmony export */   getServerAdminUser: () => (/* binding */ getServerAdminUser),\n/* harmony export */   getServerSession: () => (/* binding */ getServerSession),\n/* harmony export */   getServerUser: () => (/* binding */ getServerUser),\n/* harmony export */   getVatRateByCountry: () => (/* binding */ getVatRateByCountry),\n/* harmony export */   getWineFallbackImage: () => (/* binding */ getWineFallbackImage),\n/* harmony export */   hardDeleteAdminProduct: () => (/* binding */ hardDeleteAdminProduct),\n/* harmony export */   removeFromCart: () => (/* binding */ removeFromCart),\n/* harmony export */   safeAdminQuery: () => (/* binding */ safeAdminQuery),\n/* harmony export */   safeAnonymousQuery: () => (/* binding */ safeAnonymousQuery),\n/* harmony export */   safeQuery: () => (/* binding */ safeQuery),\n/* harmony export */   updateAdminProduct: () => (/* binding */ updateAdminProduct),\n/* harmony export */   updateCartItem: () => (/* binding */ updateCartItem),\n/* harmony export */   updateProductImage: () => (/* binding */ updateProductImage),\n/* harmony export */   updateProductStock: () => (/* binding */ updateProductStock)\n/* harmony export */ });\n/* harmony import */ var _supabase_ssr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/ssr */ \"(rsc)/./node_modules/@supabase/ssr/dist/module/index.js\");\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n\n\n// Helper function to fix Supabase image URLs\nfunction fixSupabaseImageUrl(url) {\n    if (url.includes('supabase.co/storage/v1/object/public/wines/')) {\n        // Fix missing /Public/ in the URL path\n        return url.replace('/object/public/wines/', '/object/public/Public/wines/');\n    }\n    return url;\n}\n// Helper function to get wine-specific fallback images\nfunction getWineFallbackImage(wineName) {\n    const name = wineName.toLowerCase();\n    if (name.includes('magnaneraie')) {\n        return '/images/wine-magnaneraie.svg';\n    } else if (name.includes('rosé') || name.includes('rose')) {\n        return '/images/wine-bottle-rose.svg';\n    } else if (name.includes('blanc') || name.includes('white')) {\n        return '/images/wine-bottle-white.svg';\n    } else if (name.includes('rouge') || name.includes('red')) {\n        return '/images/wine-bottle-red.svg';\n    } else {\n        return '/images/default-wine.svg';\n    }\n}\n// Helper function to generate slug from product name\nfunction generateSlug(name) {\n    return name.toLowerCase().replace(/[àáâãäå]/g, 'a').replace(/[èéêë]/g, 'e').replace(/[ìíîï]/g, 'i').replace(/[òóôõö]/g, 'o').replace(/[ùúûü]/g, 'u').replace(/[ÿý]/g, 'y').replace(/[ñ]/g, 'n').replace(/[ç]/g, 'c').replace(/[«»\\\"']/g, '') // Remove quotes and guillemets\n    .replace(/[^\\w\\s-]/g, '') // Remove special characters\n    .replace(/[\\s_-]+/g, '-') // Replace spaces and underscores with hyphens\n    .replace(/^-+|-+$/g, '') // Remove leading/trailing hyphens\n    ;\n}\n// Create read-only server client for Server Components (cannot modify cookies)\nconst createServerSupabaseClient = async ()=>{\n    // Check if we're in a build context where cookies are not available\n    try {\n        const cookieStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n        return (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createServerClient)(\"https://vmtudbupajnjyauvqnej.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZtdHVkYnVwYWpuanlhdXZxbmVqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5MzkwNTcsImV4cCI6MjA3MzUxNTA1N30.7SZ6RUgXQdI-nf1Dun7XnQ2sRIL-R_KcV2EoECuXsGs\", {\n            cookies: {\n                get (name) {\n                    return cookieStore.get(name)?.value;\n                },\n                set (name, value, options) {\n                // Don't set cookies in Server Components - this prevents the error\n                // Cookie modifications should only happen in Route Handlers or Server Actions\n                },\n                remove (name, options) {\n                // Don't remove cookies in Server Components - this prevents the error\n                }\n            }\n        });\n    } catch (error) {\n        // During build time or when cookies are not available, create a client without cookies\n        return (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createServerClient)(\"https://vmtudbupajnjyauvqnej.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZtdHVkYnVwYWpuanlhdXZxbmVqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5MzkwNTcsImV4cCI6MjA3MzUxNTA1N30.7SZ6RUgXQdI-nf1Dun7XnQ2sRIL-R_KcV2EoECuXsGs\", {\n            cookies: {\n                get () {\n                    return undefined;\n                },\n                set () {},\n                remove () {}\n            }\n        });\n    }\n};\n// Create a completely anonymous client for public data queries (no auth)\nconst createAnonymousSupabaseClient = ()=>{\n    return (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createServerClient)(\"https://vmtudbupajnjyauvqnej.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZtdHVkYnVwYWpuanlhdXZxbmVqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5MzkwNTcsImV4cCI6MjA3MzUxNTA1N30.7SZ6RUgXQdI-nf1Dun7XnQ2sRIL-R_KcV2EoECuXsGs\", {\n        cookies: {\n            get () {\n                return undefined;\n            },\n            set () {},\n            remove () {}\n        }\n    });\n};\n// Create client for API Route Handlers\nconst createRouteHandlerSupabaseClient = (request)=>{\n    return (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createServerClient)(\"https://vmtudbupajnjyauvqnej.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZtdHVkYnVwYWpuanlhdXZxbmVqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5MzkwNTcsImV4cCI6MjA3MzUxNTA1N30.7SZ6RUgXQdI-nf1Dun7XnQ2sRIL-R_KcV2EoECuXsGs\", {\n        cookies: {\n            get (name) {\n                return request?.cookies.get(name)?.value;\n            },\n            set (name, value, options) {\n            // For route handlers, we need to set cookies differently\n            // This will be handled by the response\n            },\n            remove (name, options) {\n            // For route handlers, we need to remove cookies differently\n            // This will be handled by the response\n            }\n        }\n    });\n};\n// Export createClient alias for backward compatibility\nconst createClient = createServerSupabaseClient;\n// Authentication helpers for server-side\nconst getServerUser = async ()=>{\n    try {\n        const supabase = await createServerSupabaseClient();\n        const { data: { user }, error } = await supabase.auth.getUser();\n        if (error) {\n            console.error('Error getting server user:', error);\n            return null;\n        }\n        return user;\n    } catch (error) {\n        // During build time, return null for user\n        return null;\n    }\n};\nconst getServerSession = async ()=>{\n    try {\n        const supabase = await createServerSupabaseClient();\n        const { data: { session }, error } = await supabase.auth.getSession();\n        if (error) {\n            console.error('Error getting server session:', error);\n            return null;\n        }\n        return session;\n    } catch (error) {\n        // During build time, return null for session\n        return null;\n    }\n};\n// Admin authentication helper\nconst getServerAdminUser = async ()=>{\n    try {\n        const user = await getServerUser();\n        if (!user) {\n            throw new Error('Not authenticated');\n        }\n        // Check if user has admin role in user metadata or in a separate admin table\n        const supabase = await createServerSupabaseClient();\n        // Option 1: Check user metadata\n        if (user.user_metadata?.role === 'admin') {\n            return user;\n        }\n        // Option 2: Check admin table (if exists)\n        try {\n            const { data: adminRecord, error } = await supabase.from('admin_users').select('*').eq('user_id', user.id).single();\n            if (error && error.code !== 'PGRST116') {\n                console.warn('Admin table check failed:', error);\n                throw new Error('Admin access required');\n            }\n            if (!adminRecord) {\n                throw new Error('Admin access required');\n            }\n        } catch (error) {\n            console.warn('Admin table not found or accessible, falling back to metadata check');\n            throw new Error('Admin access required');\n        }\n        return user;\n    } catch (error) {\n        // During build time, throw error for admin access\n        throw new Error('Admin access required');\n    }\n};\n// Database query helpers with error handling\nconst safeQuery = async (queryFn)=>{\n    const supabase = await createServerSupabaseClient();\n    const { data, error } = await queryFn(supabase);\n    if (error) {\n        console.error('Database query error:', error);\n        if (error.code === 'PGRST116') {\n            throw new Error('Resource not found');\n        }\n        if (error.code === '42501') {\n            throw new Error('Access denied');\n        }\n        throw new Error(error.message || 'Database query failed');\n    }\n    return data;\n};\n// Database query helper for public data (no authentication required)\nconst safeAnonymousQuery = async (queryFn)=>{\n    const supabase = createAnonymousSupabaseClient();\n    const { data, error } = await queryFn(supabase);\n    if (error) {\n        console.error('Database query error:', error);\n        if (error.code === 'PGRST116') {\n            throw new Error('Resource not found');\n        }\n        if (error.code === '42501') {\n            throw new Error('Access denied');\n        }\n        throw new Error(error.message || 'Database query failed');\n    }\n    return data;\n};\n// Product queries - using anonymous client for public data\nconst getProducts = async (options)=>{\n    return safeAnonymousQuery(async (supabase)=>{\n        let query = supabase.from('wine_products').select(`\n        *,\n        product_images(\n          url,\n          alt_text_en,\n          alt_text_fr,\n          is_primary,\n          display_order\n        )\n      `).eq('is_active', true);\n        if (options?.category) {\n            query = query.eq('category', options.category);\n        }\n        if (options?.inStock) {\n            query = query.gt('stock_quantity', 0);\n        }\n        if (options?.featured) {\n            query = query.eq('featured', true);\n        }\n        if (options?.limit) {\n            query = query.limit(options.limit);\n        }\n        if (options?.offset) {\n            query = query.range(options.offset, options.offset + (options.limit || 10) - 1);\n        }\n        return query.order('created_at', {\n            ascending: false\n        });\n    });\n};\n// Get featured products for homepage\nconst getFeaturedProducts = async (limit = 6)=>{\n    try {\n        const products = await getProducts({\n            featured: true,\n            limit,\n            inStock: true\n        });\n        // Transform the data to match the expected format\n        return products.map((product)=>({\n                ...product,\n                // Map key fields to expected names for backward compatibility\n                description: product.description_en || product.description_fr || 'Fine wine from Domaine Vallot',\n                grape_variety: product.varietal,\n                producer: 'Domaine Vallot',\n                alcohol_content: product.alcohol_content || 13.5,\n                // Price handling\n                price_display: product.price_eur ? product.price_eur.toString() : '0.00',\n                price: product.price_eur ? Math.round(parseFloat(product.price_eur.toString()) * 100) : 0,\n                // Stock status\n                in_stock: product.stock_quantity > 0,\n                // Image handling with proper fallback and URL fix\n                image_url: product.product_images?.[0]?.url ? fixSupabaseImageUrl(product.product_images[0].url) : getWineFallbackImage(product.name),\n                image: product.product_images?.[0]?.url ? fixSupabaseImageUrl(product.product_images[0].url) : getWineFallbackImage(product.name),\n                // Additional fields for UI\n                is_organic: product.organic_certified || false,\n                is_biodynamic: product.biodynamic_certified || false,\n                is_featured: product.featured || false,\n                // Ensure proper slug generation\n                slug: product.slug_en || product.slug_fr || generateSlug(`${product.name}-${product.vintage}`)\n            }));\n    } catch (error) {\n        console.error('Error fetching featured products from database:', error);\n        // Return fallback mock data if database fails\n        return getFallbackProducts();\n    }\n};\n// Fallback mock data for development\nfunction getFallbackProducts() {\n    return [\n        {\n            id: '1',\n            name: 'Vinsobres rouge « François »',\n            slug: 'vinsobres-rouge-francois-2022',\n            description: 'A premium red wine with notes of dark fruit and traditional terroir expression.',\n            price_eur: 12.00,\n            price: 1200,\n            vintage: 2022,\n            grape_variety: 'Syrah blend',\n            producer: 'Domaine Vallot',\n            region: 'Vinsobres',\n            stock_quantity: 50,\n            is_organic: true,\n            is_biodynamic: true,\n            featured: true,\n            image_url: '/images/wine-bottle-red.svg',\n            image: '/images/wine-bottle-red.svg',\n            created_at: new Date().toISOString()\n        },\n        {\n            id: '2',\n            name: 'Vinsobres Cuvée « Claude »',\n            slug: 'vinsobres-cuvee-claude-2018',\n            description: 'From 67-year-old vines, this wine benefits from barrel aging for exceptional complexity.',\n            price_eur: 14.50,\n            price: 1450,\n            vintage: 2018,\n            grape_variety: 'Old vine Syrah',\n            producer: 'Domaine Vallot',\n            region: 'Vinsobres',\n            stock_quantity: 30,\n            is_organic: true,\n            is_biodynamic: true,\n            featured: true,\n            image_url: '/images/wine-bottle-red.svg',\n            image: '/images/wine-bottle-red.svg',\n            created_at: new Date().toISOString()\n        },\n        {\n            id: '3',\n            name: 'Vinsobres Le Haut des Côtes',\n            slug: 'vinsobres-le-haut-des-cotes-2018',\n            description: 'Deep red color with intense bouquet of vanilla and forest floor notes.',\n            price_eur: 16.50,\n            price: 1650,\n            vintage: 2018,\n            grape_variety: 'Syrah, Grenache',\n            producer: 'Domaine Vallot',\n            region: 'Vinsobres',\n            stock_quantity: 25,\n            is_organic: true,\n            is_biodynamic: true,\n            featured: true,\n            image_url: '/images/wine-bottle-red.svg',\n            image: '/images/wine-bottle-red.svg',\n            created_at: new Date().toISOString()\n        }\n    ];\n}\nconst getProductById = async (id)=>{\n    return safeAnonymousQuery(async (supabase)=>{\n        return supabase.from('wine_products').select('*').eq('id', id).eq('is_active', true).single();\n    });\n};\nconst getProductBySlug = async (slug)=>{\n    return safeAnonymousQuery(async (supabase)=>{\n        return supabase.from('wine_products').select('*').eq('slug', slug).eq('is_active', true).single();\n    });\n};\n// Cart queries\nconst getCartItems = async (userId)=>{\n    return safeQuery(async (supabase)=>{\n        return supabase.from('cart_items').select(`\n        *,\n        wine_products (*)\n      `).eq('customer_id', userId);\n    });\n};\nconst addToCart = async (userId, productId, quantity)=>{\n    return safeQuery(async (supabase)=>{\n        // Check if item already exists in cart\n        const { data: existingItem } = await supabase.from('cart_items').select('*').eq('customer_id', userId).eq('product_id', productId).single();\n        if (existingItem) {\n            // Update quantity\n            return supabase.from('cart_items').update({\n                quantity: existingItem.quantity + quantity\n            }).eq('id', existingItem.id).select().single();\n        } else {\n            // Insert new item\n            return supabase.from('cart_items').insert({\n                customer_id: userId,\n                product_id: productId,\n                quantity\n            }).select().single();\n        }\n    });\n};\nconst updateCartItem = async (userId, itemId, quantity)=>{\n    return safeQuery(async (supabase)=>{\n        return supabase.from('cart_items').update({\n            quantity\n        }).eq('id', itemId).eq('customer_id', userId).select().single();\n    });\n};\nconst removeFromCart = async (userId, itemId)=>{\n    return safeQuery(async (supabase)=>{\n        return supabase.from('cart_items').delete().eq('id', itemId).eq('customer_id', userId);\n    });\n};\n// Order queries\nconst createOrder = async (orderData)=>{\n    return safeQuery(async (supabase)=>{\n        // Start transaction by creating order first\n        const { data: order, error: orderError } = await supabase.from('orders').insert({\n            user_id: orderData.user_id,\n            customer_email: orderData.customer_email,\n            customer_first_name: orderData.customer_first_name,\n            customer_last_name: orderData.customer_last_name,\n            shipping_address: orderData.shipping_address,\n            billing_address: orderData.billing_address || orderData.shipping_address,\n            subtotal: orderData.subtotal,\n            vat_amount: orderData.vat_amount,\n            shipping_cost: orderData.shipping_cost,\n            total_amount: orderData.total_amount,\n            payment_method: orderData.payment_method || 'mollie',\n            status: orderData.status || 'pending'\n        }).select().single();\n        if (orderError) throw orderError;\n        // Insert order items\n        const orderItems = orderData.items.map((item)=>({\n                order_id: order.id,\n                product_id: item.product_id,\n                quantity: item.quantity,\n                unit_price: item.unit_price,\n                total_price: item.quantity * item.unit_price\n            }));\n        const { error: itemsError } = await supabase.from('order_items').insert(orderItems);\n        if (itemsError) throw itemsError;\n        return {\n            data: order,\n            error: null\n        };\n    });\n};\nconst getOrderById = async (orderId, userId)=>{\n    return safeQuery(async (supabase)=>{\n        let query = supabase.from('orders').select(`\n        *,\n        order_items (\n          *,\n          wine_products (*)\n        )\n      `).eq('id', orderId);\n        if (userId) {\n            query = query.eq('user_id', userId);\n        }\n        return query.single();\n    });\n};\n// Customer queries\nconst createOrUpdateCustomer = async (userData)=>{\n    return safeQuery(async (supabase)=>{\n        return supabase.from('customers').upsert(userData, {\n            onConflict: 'user_id'\n        }).select().single();\n    });\n};\n// VAT rate queries - public data\nconst getVatRateByCountry = async (countryCode)=>{\n    return safeAnonymousQuery(async (supabase)=>{\n        return supabase.from('vat_rates').select('*').eq('country_code', countryCode.toUpperCase()).eq('is_active', true).single();\n    });\n};\n// ==============================================================================\n// ADMIN PRODUCT MANAGEMENT FUNCTIONS\n// ==============================================================================\n// Admin query helper - requires authentication\nconst safeAdminQuery = async (queryFn, userId)=>{\n    // Verify admin access\n    const adminUser = await getServerAdminUser();\n    const supabase = await createServerSupabaseClient();\n    const { data, error } = await queryFn(supabase);\n    if (error) {\n        console.error('Database query error:', error);\n        if (error.code === 'PGRST116') {\n            throw new Error('Resource not found');\n        }\n        if (error.code === '42501') {\n            throw new Error('Access denied');\n        }\n        throw new Error(error.message || 'Database query failed');\n    }\n    return data;\n};\n// Get all products for admin (including inactive)\nconst getAdminProducts = async (options)=>{\n    return safeAdminQuery(async (supabase)=>{\n        let query = supabase.from('wine_products').select(`\n        *,\n        product_images(\n          id,\n          url,\n          alt_text_en,\n          alt_text_fr,\n          is_primary,\n          display_order,\n          image_type\n        )\n      `);\n        // Filter by status\n        if (options?.status === 'active') {\n            query = query.eq('is_active', true);\n        } else if (options?.status === 'inactive') {\n            query = query.eq('is_active', false);\n        }\n        // 'all' means no filter on is_active\n        // Search functionality\n        if (options?.search) {\n            const searchTerm = options.search.toLowerCase();\n            query = query.or(`\n        name.ilike.%${searchTerm}%,\n        description_en.ilike.%${searchTerm}%,\n        description_fr.ilike.%${searchTerm}%,\n        varietal.ilike.%${searchTerm}%,\n        region.ilike.%${searchTerm}%,\n        sku.ilike.%${searchTerm}%\n      `);\n        }\n        if (options?.featured !== undefined) {\n            query = query.eq('featured', options.featured);\n        }\n        // Sorting\n        const sortBy = options?.sortBy || 'created_at';\n        const sortOrder = options?.sortOrder === 'asc' ? {\n            ascending: true\n        } : {\n            ascending: false\n        };\n        query = query.order(sortBy, sortOrder);\n        if (options?.limit) {\n            query = query.limit(options.limit);\n        }\n        if (options?.offset) {\n            query = query.range(options.offset, options.offset + (options.limit || 20) - 1);\n        }\n        return query;\n    });\n};\n// Get single product for admin\nconst getAdminProductById = async (id)=>{\n    return safeAdminQuery(async (supabase)=>{\n        return supabase.from('wine_products').select(`\n        *,\n        product_images(\n          id,\n          url,\n          alt_text_en,\n          alt_text_fr,\n          is_primary,\n          display_order,\n          image_type,\n          width,\n          height,\n          file_size\n        )\n      `).eq('id', id).single();\n    });\n};\n// Create new product\nconst createAdminProduct = async (productData, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        // Add audit fields\n        const dataWithAudit = {\n            ...productData,\n            created_by: userId,\n            updated_by: userId,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        };\n        return supabase.from('wine_products').insert(dataWithAudit).select().single();\n    }, userId);\n};\n// Update existing product\nconst updateAdminProduct = async (id, productData, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        // Add audit fields\n        const dataWithAudit = {\n            ...productData,\n            updated_by: userId,\n            updated_at: new Date().toISOString()\n        };\n        return supabase.from('wine_products').update(dataWithAudit).eq('id', id).select().single();\n    }, userId);\n};\n// Soft delete product (set is_active to false)\nconst deleteAdminProduct = async (id, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        // Check if product has pending orders\n        const { data: pendingOrders } = await supabase.from('order_items').select(`\n        id,\n        orders!inner(\n          id,\n          status\n        )\n      `).eq('product_id', id).in('orders.status', [\n            'pending',\n            'confirmed',\n            'processing'\n        ]);\n        if (pendingOrders && pendingOrders.length > 0) {\n            throw new Error('Cannot delete product with pending orders');\n        }\n        // Soft delete by setting is_active to false\n        return supabase.from('wine_products').update({\n            is_active: false,\n            updated_by: userId,\n            updated_at: new Date().toISOString()\n        }).eq('id', id).select().single();\n    }, userId);\n};\n// Hard delete product (actual deletion - use with caution)\nconst hardDeleteAdminProduct = async (id, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        // Check if product has any orders\n        const { data: orders } = await supabase.from('order_items').select('id').eq('product_id', id);\n        if (orders && orders.length > 0) {\n            throw new Error('Cannot permanently delete product with order history');\n        }\n        // Delete associated images first\n        await supabase.from('product_images').delete().eq('product_id', id);\n        // Delete the product\n        return supabase.from('wine_products').delete().eq('id', id);\n    }, userId);\n};\n// Product image management functions\nconst createProductImage = async (imageData, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        // If this is set as primary, unset other primary images for this product\n        if (imageData.is_primary) {\n            await supabase.from('product_images').update({\n                is_primary: false\n            }).eq('product_id', imageData.product_id);\n        }\n        return supabase.from('product_images').insert(imageData).select().single();\n    }, userId);\n};\nconst updateProductImage = async (imageId, imageData, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        // If this is set as primary, unset other primary images for this product\n        if (imageData.is_primary) {\n            // First get the product_id\n            const { data: currentImage } = await supabase.from('product_images').select('product_id').eq('id', imageId).single();\n            if (currentImage) {\n                await supabase.from('product_images').update({\n                    is_primary: false\n                }).eq('product_id', currentImage.product_id).neq('id', imageId);\n            }\n        }\n        return supabase.from('product_images').update(imageData).eq('id', imageId).select().single();\n    }, userId);\n};\nconst deleteProductImage = async (imageId, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        return supabase.from('product_images').delete().eq('id', imageId);\n    }, userId);\n};\n// Bulk operations\nconst bulkUpdateProductStatus = async (productIds, isActive, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        return supabase.from('wine_products').update({\n            is_active: isActive,\n            updated_by: userId,\n            updated_at: new Date().toISOString()\n        }).in('id', productIds).select();\n    }, userId);\n};\nconst bulkUpdateProductFeatured = async (productIds, featured, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        return supabase.from('wine_products').update({\n            featured: featured,\n            updated_by: userId,\n            updated_at: new Date().toISOString()\n        }).in('id', productIds).select();\n    }, userId);\n};\n// Stock management\nconst updateProductStock = async (id, stockQuantity, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        return supabase.from('wine_products').update({\n            stock_quantity: stockQuantity,\n            updated_by: userId,\n            updated_at: new Date().toISOString()\n        }).eq('id', id).select().single();\n    }, userId);\n};\n// Get products with low stock\nconst getLowStockProducts = async (threshold = 10)=>{\n    return safeAdminQuery(async (supabase)=>{\n        return supabase.from('wine_products').select('*').eq('is_active', true).lte('stock_quantity', threshold).order('stock_quantity', {\n            ascending: true\n        });\n    });\n};\n// Duplicate product\nconst duplicateProduct = async (id, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        // Get the original product\n        const { data: originalProduct } = await supabase.from('wine_products').select('*').eq('id', id).single();\n        if (!originalProduct) {\n            throw new Error('Product not found');\n        }\n        // Create new product data (remove id and update key fields)\n        const { id: _, created_at: __, updated_at: ___, created_by: ____, updated_by: _____, sku, slug_en, slug_fr, ...productData } = originalProduct;\n        const newProductData = {\n            ...productData,\n            name: `${originalProduct.name} (Copy)`,\n            sku: `${sku}-COPY-${Date.now()}`,\n            slug_en: `${slug_en}-copy-${Date.now()}`,\n            slug_fr: `${slug_fr}-copy-${Date.now()}`,\n            is_active: false,\n            featured: false,\n            created_by: userId,\n            updated_by: userId\n        };\n        // Create the new product\n        const { data: newProduct } = await supabase.from('wine_products').insert(newProductData).select().single();\n        // Copy images if they exist\n        const { data: originalImages } = await supabase.from('product_images').select('*').eq('product_id', id);\n        if (originalImages && originalImages.length > 0) {\n            const newImages = originalImages.map((img)=>({\n                    ...img,\n                    id: undefined,\n                    product_id: newProduct.id,\n                    created_at: undefined\n                }));\n            await supabase.from('product_images').insert(newImages);\n        }\n        return {\n            data: newProduct,\n            error: null\n        };\n    }, userId);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/supabase/server.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "@supabase/supabase-js":
/*!****************************************!*\
  !*** external "@supabase/supabase-js" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@supabase/supabase-js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/cookie","vendor-chunks/@mollie","vendor-chunks/mime-db","vendor-chunks/axios","vendor-chunks/follow-redirects","vendor-chunks/debug","vendor-chunks/form-data","vendor-chunks/get-intrinsic","vendor-chunks/asynckit","vendor-chunks/combined-stream","vendor-chunks/mime-types","vendor-chunks/ms","vendor-chunks/supports-color","vendor-chunks/has-symbols","vendor-chunks/delayed-stream","vendor-chunks/function-bind","vendor-chunks/es-set-tostringtag","vendor-chunks/get-proto","vendor-chunks/call-bind-apply-helpers","vendor-chunks/dunder-proto","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/has-flag","vendor-chunks/gopd","vendor-chunks/es-define-property","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/es-object-atoms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fwebhooks%2Fmollie%2Froute&page=%2Fapi%2Fwebhooks%2Fmollie%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fwebhooks%2Fmollie%2Froute.ts&appDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();