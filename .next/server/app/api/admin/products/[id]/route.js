/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/admin/products/[id]/route";
exports.ids = ["app/api/admin/products/[id]/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fproducts%2F%5Bid%5D%2Froute&page=%2Fapi%2Fadmin%2Fproducts%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fproducts%2F%5Bid%5D%2Froute.ts&appDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fproducts%2F%5Bid%5D%2Froute&page=%2Fapi%2Fadmin%2Fproducts%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fproducts%2F%5Bid%5D%2Froute.ts&appDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var C_Users_olivi_Domaine_Vallot_src_app_api_admin_products_id_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/admin/products/[id]/route.ts */ \"(rsc)/./src/app/api/admin/products/[id]/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/admin/products/[id]/route\",\n        pathname: \"/api/admin/products/[id]\",\n        filename: \"route\",\n        bundlePath: \"app/api/admin/products/[id]/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"C:\\\\Users\\\\olivi\\\\Domaine Vallot\\\\src\\\\app\\\\api\\\\admin\\\\products\\\\[id]\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_olivi_Domaine_Vallot_src_app_api_admin_products_id_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/admin/products/[id]/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        if (!(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fproducts%2F%5Bid%5D%2Froute&page=%2Fapi%2Fadmin%2Fproducts%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fproducts%2F%5Bid%5D%2Froute.ts&appDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/admin/products/[id]/route.ts":
/*!**************************************************!*\
  !*** ./src/app/api/admin/products/[id]/route.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   PATCH: () => (/* binding */ PATCH),\n/* harmony export */   PUT: () => (/* binding */ PUT)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_supabase_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase/server */ \"(rsc)/./src/lib/supabase/server.ts\");\n/* harmony import */ var _lib_admin_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/admin/auth */ \"(rsc)/./src/lib/admin/auth.ts\");\n/* harmony import */ var _lib_admin_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/admin/utils */ \"(rsc)/./src/lib/admin/utils.ts\");\n/* harmony import */ var _lib_validators_schemas__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/validators/schemas */ \"(rsc)/./src/lib/validators/schemas.ts\");\n\n\n\n\n\n/**\n * GET /api/admin/products/[id] - Get single product with all details\n */ async function GET(request, { params }) {\n    try {\n        // Require admin authentication\n        const admin = await (0,_lib_admin_auth__WEBPACK_IMPORTED_MODULE_2__.requireAdminAuth)(request);\n        (0,_lib_admin_auth__WEBPACK_IMPORTED_MODULE_2__.requirePermission)(admin, 'products.read');\n        const supabase = (0,_lib_supabase_server__WEBPACK_IMPORTED_MODULE_1__.createRouteHandlerSupabaseClient)(request);\n        // Validate UUID format\n        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n        if (!uuidRegex.test(params.id)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Invalid product ID format'\n            }, {\n                status: 400\n            });\n        }\n        // Fetch product with all related data\n        const { data: product, error } = await supabase.from('wine_products').select(`\n        *,\n        product_images(*),\n        product_certifications(*)\n      `).eq('id', params.id).single();\n        if (error) {\n            if (error.code === 'PGRST116') {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Product not found'\n                }, {\n                    status: 404\n                });\n            }\n            console.error('Error fetching product:', error);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Failed to fetch product'\n            }, {\n                status: 500\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            product\n        });\n    } catch (error) {\n        console.error('Admin product GET error:', error);\n        if (error instanceof Error) {\n            if (error.message === 'Authentication required') {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Authentication required'\n                }, {\n                    status: 401\n                });\n            }\n            if (error.message === 'Admin access required' || error.message.startsWith('Permission denied')) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Admin access required'\n                }, {\n                    status: 403\n                });\n            }\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error'\n        }, {\n            status: 500\n        });\n    }\n}\n/**\n * PUT /api/admin/products/[id] - Update existing wine product\n */ async function PUT(request, { params }) {\n    try {\n        // Require admin authentication\n        const admin = await (0,_lib_admin_auth__WEBPACK_IMPORTED_MODULE_2__.requireAdminAuth)(request);\n        (0,_lib_admin_auth__WEBPACK_IMPORTED_MODULE_2__.requirePermission)(admin, 'products.update');\n        const supabase = (0,_lib_supabase_server__WEBPACK_IMPORTED_MODULE_1__.createRouteHandlerSupabaseClient)(request);\n        // Validate UUID format\n        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n        if (!uuidRegex.test(params.id)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Invalid product ID format'\n            }, {\n                status: 400\n            });\n        }\n        const body = await request.json();\n        // Validate the request body\n        const validation = (0,_lib_validators_schemas__WEBPACK_IMPORTED_MODULE_4__.validateSchema)(_lib_validators_schemas__WEBPACK_IMPORTED_MODULE_4__.updateWineProductSchema, {\n            ...body,\n            id: params.id\n        });\n        if (!validation.success) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Validation failed',\n                details: validation.errors\n            }, {\n                status: 400\n            });\n        }\n        const updateData = validation.data;\n        // Remove id from update data\n        const { id, ...productData } = updateData;\n        // Check if product exists\n        const { data: existingProduct, error: fetchError } = await supabase.from('wine_products').select('*').eq('id', params.id).single();\n        if (fetchError) {\n            if (fetchError.code === 'PGRST116') {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Product not found'\n                }, {\n                    status: 404\n                });\n            }\n            console.error('Error fetching existing product:', fetchError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Failed to fetch product'\n            }, {\n                status: 500\n            });\n        }\n        // Generate slugs if name or vintage changed\n        if (productData.name || productData.vintage) {\n            const newName = productData.name || existingProduct.name;\n            const newVintage = productData.vintage || existingProduct.vintage;\n            if (!productData.slug_en) {\n                productData.slug_en = (0,_lib_admin_utils__WEBPACK_IMPORTED_MODULE_3__.generateSlug)(newName, newVintage);\n            }\n            if (!productData.slug_fr) {\n                productData.slug_fr = (0,_lib_admin_utils__WEBPACK_IMPORTED_MODULE_3__.generateSlug)(newName, newVintage);\n            }\n        }\n        // Validate business rules if we have enough data\n        const mergedData = {\n            ...existingProduct,\n            ...productData\n        };\n        const businessErrors = (0,_lib_admin_utils__WEBPACK_IMPORTED_MODULE_3__.validateWineProduct)(mergedData);\n        if (businessErrors.length > 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Business validation failed',\n                details: {\n                    general: businessErrors\n                }\n            }, {\n                status: 400\n            });\n        }\n        // Check for duplicate SKU (if SKU is being changed)\n        if (productData.sku && productData.sku !== existingProduct.sku) {\n            const { data: existingSku, error: skuError } = await supabase.from('wine_products').select('id').eq('sku', productData.sku).neq('id', params.id).single();\n            if (existingSku) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Validation failed',\n                    details: {\n                        sku: [\n                            'SKU already exists'\n                        ]\n                    }\n                }, {\n                    status: 400\n                });\n            }\n        }\n        // Check for duplicate slug_en (if slug_en is being changed)\n        if (productData.slug_en && productData.slug_en !== existingProduct.slug_en) {\n            const { data: existingSlugEn, error: slugEnError } = await supabase.from('wine_products').select('id').eq('slug_en', productData.slug_en).neq('id', params.id).single();\n            if (existingSlugEn) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Validation failed',\n                    details: {\n                        slug_en: [\n                            'English slug already exists'\n                        ]\n                    }\n                }, {\n                    status: 400\n                });\n            }\n        }\n        // Check for duplicate slug_fr (if slug_fr is being changed)\n        if (productData.slug_fr && productData.slug_fr !== existingProduct.slug_fr) {\n            const { data: existingSlugFr, error: slugFrError } = await supabase.from('wine_products').select('id').eq('slug_fr', productData.slug_fr).neq('id', params.id).single();\n            if (existingSlugFr) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Validation failed',\n                    details: {\n                        slug_fr: [\n                            'French slug already exists'\n                        ]\n                    }\n                }, {\n                    status: 400\n                });\n            }\n        }\n        // Sanitize data for database update\n        const sanitizedData = (0,_lib_admin_utils__WEBPACK_IMPORTED_MODULE_3__.sanitizeProductData)({\n            ...productData,\n            updated_by: admin.id,\n            updated_at: new Date().toISOString()\n        });\n        // Update the wine product\n        const { data: updatedProduct, error: updateError } = await supabase.from('wine_products').update(sanitizedData).eq('id', params.id).select().single();\n        if (updateError) {\n            console.error('Error updating wine product:', updateError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Failed to update wine product'\n            }, {\n                status: 500\n            });\n        }\n        // Handle image updates if provided\n        if (body.images && Array.isArray(body.images)) {\n            // First, remove all existing images for this product\n            const { error: deleteImagesError } = await supabase.from('product_images').delete().eq('product_id', params.id);\n            if (deleteImagesError) {\n                console.error('Error deleting existing images:', deleteImagesError);\n            // Continue with the process even if image deletion fails\n            }\n            // Then insert new images\n            if (body.images.length > 0) {\n                const imageInserts = [];\n                for(let i = 0; i < body.images.length; i++){\n                    const image = body.images[i];\n                    const processedUrl = (0,_lib_admin_utils__WEBPACK_IMPORTED_MODULE_3__.processImageUrl)(image.url);\n                    if (processedUrl) {\n                        imageInserts.push({\n                            product_id: params.id,\n                            url: processedUrl,\n                            alt_text_en: image.alt_text_en || updatedProduct.name,\n                            alt_text_fr: image.alt_text_fr || updatedProduct.name,\n                            display_order: image.display_order || i,\n                            image_type: image.image_type || 'bottle',\n                            width: image.width || null,\n                            height: image.height || null,\n                            file_size: image.file_size || null,\n                            is_primary: i === 0 || image.is_primary || false,\n                            created_at: new Date().toISOString()\n                        });\n                    }\n                }\n                if (imageInserts.length > 0) {\n                    const { error: imageError } = await supabase.from('product_images').insert(imageInserts);\n                    if (imageError) {\n                        console.error('Error inserting updated product images:', imageError);\n                    // Don't fail the entire request for image errors, just log them\n                    }\n                }\n            }\n        }\n        // Fetch the complete updated product with images for response\n        const { data: completeProduct, error: fetchCompleteError } = await supabase.from('wine_products').select(`\n        *,\n        product_images(*)\n      `).eq('id', params.id).single();\n        if (fetchCompleteError) {\n            console.error('Error fetching complete updated product:', fetchCompleteError);\n            // Return the basic product if we can't fetch with images\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: 'Wine product updated successfully',\n                product: updatedProduct\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: 'Wine product updated successfully',\n            product: completeProduct\n        });\n    } catch (error) {\n        console.error('Admin product PUT error:', error);\n        if (error instanceof Error) {\n            if (error.message === 'Authentication required') {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Authentication required'\n                }, {\n                    status: 401\n                });\n            }\n            if (error.message === 'Admin access required' || error.message.startsWith('Permission denied')) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Admin access required'\n                }, {\n                    status: 403\n                });\n            }\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error'\n        }, {\n            status: 500\n        });\n    }\n}\n/**\n * PATCH /api/admin/products/[id] - Partially update wine product\n */ async function PATCH(request, { params }) {\n    try {\n        // Require admin authentication\n        const admin = await (0,_lib_admin_auth__WEBPACK_IMPORTED_MODULE_2__.requireAdminAuth)(request);\n        (0,_lib_admin_auth__WEBPACK_IMPORTED_MODULE_2__.requirePermission)(admin, 'products.update');\n        const supabase = (0,_lib_supabase_server__WEBPACK_IMPORTED_MODULE_1__.createRouteHandlerSupabaseClient)(request);\n        // Validate UUID format\n        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n        if (!uuidRegex.test(params.id)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Invalid product ID format'\n            }, {\n                status: 400\n            });\n        }\n        const body = await request.json();\n        // Check if product exists\n        const { data: existingProduct, error: fetchError } = await supabase.from('wine_products').select('*').eq('id', params.id).single();\n        if (fetchError) {\n            if (fetchError.code === 'PGRST116') {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Product not found'\n                }, {\n                    status: 404\n                });\n            }\n            console.error('Error fetching existing product:', fetchError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Failed to fetch product'\n            }, {\n                status: 500\n            });\n        }\n        // Sanitize the partial update data\n        const updateData = {\n            ...body,\n            updated_by: admin.id,\n            updated_at: new Date().toISOString()\n        };\n        // Remove undefined values\n        Object.keys(updateData).forEach((key)=>{\n            if (updateData[key] === undefined) {\n                delete updateData[key];\n            }\n        });\n        // Update the wine product\n        const { data: updatedProduct, error: updateError } = await supabase.from('wine_products').update(updateData).eq('id', params.id).select().single();\n        if (updateError) {\n            console.error('Error updating wine product:', updateError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Failed to update wine product'\n            }, {\n                status: 500\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: 'Wine product updated successfully',\n            product: updatedProduct\n        });\n    } catch (error) {\n        console.error('Admin product PATCH error:', error);\n        if (error instanceof Error) {\n            if (error.message === 'Authentication required') {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Authentication required'\n                }, {\n                    status: 401\n                });\n            }\n            if (error.message === 'Admin access required' || error.message.startsWith('Permission denied')) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Admin access required'\n                }, {\n                    status: 403\n                });\n            }\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error'\n        }, {\n            status: 500\n        });\n    }\n}\n/**\n * DELETE /api/admin/products/[id] - Delete wine product (soft delete)\n */ async function DELETE(request, { params }) {\n    try {\n        // Require admin authentication\n        const admin = await (0,_lib_admin_auth__WEBPACK_IMPORTED_MODULE_2__.requireAdminAuth)(request);\n        (0,_lib_admin_auth__WEBPACK_IMPORTED_MODULE_2__.requirePermission)(admin, 'products.delete');\n        const supabase = (0,_lib_supabase_server__WEBPACK_IMPORTED_MODULE_1__.createRouteHandlerSupabaseClient)(request);\n        // Validate UUID format\n        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n        if (!uuidRegex.test(params.id)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Invalid product ID format'\n            }, {\n                status: 400\n            });\n        }\n        // Check if product exists\n        const { data: existingProduct, error: fetchError } = await supabase.from('wine_products').select('id, name, sku, is_active').eq('id', params.id).single();\n        if (fetchError) {\n            if (fetchError.code === 'PGRST116') {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Product not found'\n                }, {\n                    status: 404\n                });\n            }\n            console.error('Error fetching product for deletion:', fetchError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Failed to fetch product'\n            }, {\n                status: 500\n            });\n        }\n        // Check if product has any pending orders\n        const { data: pendingOrders, error: ordersError } = await supabase.from('order_items').select('id').eq('product_id', params.id).in('orders.status', [\n            'pending',\n            'confirmed',\n            'processing'\n        ]).limit(1);\n        if (ordersError) {\n            console.error('Error checking pending orders:', ordersError);\n        // Continue with deletion even if we can't check orders\n        }\n        if (pendingOrders && pendingOrders.length > 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Cannot delete product with pending orders',\n                details: {\n                    general: [\n                        'Product has pending orders and cannot be deleted'\n                    ]\n                }\n            }, {\n                status: 409\n            });\n        }\n        // Check for cart items with this product\n        const { data: cartItems, error: cartError } = await supabase.from('cart_items').select('id').eq('product_id', params.id).limit(1);\n        if (cartError) {\n            console.error('Error checking cart items:', cartError);\n        }\n        if (cartItems && cartItems.length > 0) {\n            // Remove from carts before deletion\n            const { error: removeCartError } = await supabase.from('cart_items').delete().eq('product_id', params.id);\n            if (removeCartError) {\n                console.error('Error removing product from carts:', removeCartError);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Failed to remove product from carts'\n                }, {\n                    status: 500\n                });\n            }\n        }\n        // Perform soft delete by setting is_active to false\n        const { data: deletedProduct, error: deleteError } = await supabase.from('wine_products').update({\n            is_active: false,\n            updated_by: admin.id,\n            updated_at: new Date().toISOString()\n        }).eq('id', params.id).select('id, name, sku').single();\n        if (deleteError) {\n            console.error('Error soft-deleting product:', deleteError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Failed to delete product'\n            }, {\n                status: 500\n            });\n        }\n        // Also soft-delete associated images by setting a flag (if your schema supports it)\n        // For now, we'll just leave the images as they are\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: 'Wine product deleted successfully',\n            product: deletedProduct\n        });\n    } catch (error) {\n        console.error('Admin product DELETE error:', error);\n        if (error instanceof Error) {\n            if (error.message === 'Authentication required') {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Authentication required'\n                }, {\n                    status: 401\n                });\n            }\n            if (error.message === 'Admin access required' || error.message.startsWith('Permission denied')) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Admin access required'\n                }, {\n                    status: 403\n                });\n            }\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/admin/products/[id]/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/admin/auth.ts":
/*!*******************************!*\
  !*** ./src/lib/admin/auth.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasPermission: () => (/* binding */ hasPermission),\n/* harmony export */   requireAdminAuth: () => (/* binding */ requireAdminAuth),\n/* harmony export */   requirePermission: () => (/* binding */ requirePermission)\n/* harmony export */ });\n/* harmony import */ var _lib_supabase_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase/server */ \"(rsc)/./src/lib/supabase/server.ts\");\n\n/**\n * Require admin authentication for API routes\n * @param request NextRequest object\n * @returns Promise<AdminUser> if authenticated\n * @throws Error if not authenticated or not admin\n */ async function requireAdminAuth(request) {\n    const supabase = (0,_lib_supabase_server__WEBPACK_IMPORTED_MODULE_0__.createRouteHandlerSupabaseClient)(request);\n    // Get the current user\n    const { data: { user }, error: userError } = await supabase.auth.getUser();\n    if (userError || !user) {\n        throw new Error('Authentication required');\n    }\n    // Check if user has admin role in metadata\n    const userRole = user.user_metadata?.role || user.app_metadata?.role;\n    // First check metadata for quick access\n    if ([\n        'admin',\n        'manager',\n        'staff'\n    ].includes(userRole)) {\n        return {\n            id: user.id,\n            email: user.email,\n            role: userRole,\n            first_name: user.user_metadata?.first_name,\n            last_name: user.user_metadata?.last_name\n        };\n    }\n    // Check admin_users table if metadata check fails\n    try {\n        const { data: adminRecord, error } = await supabase.from('admin_users').select('*').eq('user_id', user.id).eq('is_active', true).single();\n        if (error || !adminRecord) {\n            throw new Error('Admin access required');\n        }\n        return {\n            id: user.id,\n            email: user.email,\n            role: adminRecord.role || 'staff',\n            first_name: adminRecord.first_name,\n            last_name: adminRecord.last_name\n        };\n    } catch (error) {\n        // If admin table doesn't exist or isn't accessible, deny access\n        throw new Error('Admin access required');\n    }\n}\n/**\n * Check if user has specific permission\n * @param user AdminUser\n * @param permission string\n * @returns boolean\n */ function hasPermission(user, permission) {\n    // Admin has all permissions\n    if (user.role === 'admin') {\n        return true;\n    }\n    // Manager has most permissions\n    if (user.role === 'manager') {\n        const managerPermissions = [\n            'products.read',\n            'products.create',\n            'products.update',\n            'orders.read',\n            'orders.update',\n            'inquiries.read',\n            'inquiries.update',\n            'customers.read'\n        ];\n        return managerPermissions.includes(permission);\n    }\n    // Staff has limited permissions\n    if (user.role === 'staff') {\n        const staffPermissions = [\n            'products.read',\n            'orders.read',\n            'inquiries.read',\n            'inquiries.update'\n        ];\n        return staffPermissions.includes(permission);\n    }\n    return false;\n}\n/**\n * Require specific permission for an action\n * @param user AdminUser\n * @param permission string\n * @throws Error if permission denied\n */ function requirePermission(user, permission) {\n    if (!hasPermission(user, permission)) {\n        throw new Error(`Permission denied: ${permission}`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2FkbWluL2F1dGgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF3RTtBQVl4RTs7Ozs7Q0FLQyxHQUNNLGVBQWVDLGlCQUFpQkMsT0FBcUI7SUFDMUQsTUFBTUMsV0FBV0gsc0ZBQWdDQSxDQUFDRTtJQUVsRCx1QkFBdUI7SUFDdkIsTUFBTSxFQUFFRSxNQUFNLEVBQUVDLElBQUksRUFBRSxFQUFFQyxPQUFPQyxTQUFTLEVBQUUsR0FBRyxNQUFNSixTQUFTSyxJQUFJLENBQUNDLE9BQU87SUFFeEUsSUFBSUYsYUFBYSxDQUFDRixNQUFNO1FBQ3RCLE1BQU0sSUFBSUssTUFBTTtJQUNsQjtJQUVBLDJDQUEyQztJQUMzQyxNQUFNQyxXQUFXTixLQUFLTyxhQUFhLEVBQUVDLFFBQVFSLEtBQUtTLFlBQVksRUFBRUQ7SUFFaEUsd0NBQXdDO0lBQ3hDLElBQUk7UUFBQztRQUFTO1FBQVc7S0FBUSxDQUFDRSxRQUFRLENBQUNKLFdBQVc7UUFDcEQsT0FBTztZQUNMSyxJQUFJWCxLQUFLVyxFQUFFO1lBQ1hDLE9BQU9aLEtBQUtZLEtBQUs7WUFDakJKLE1BQU1GO1lBQ05PLFlBQVliLEtBQUtPLGFBQWEsRUFBRU07WUFDaENDLFdBQVdkLEtBQUtPLGFBQWEsRUFBRU87UUFDakM7SUFDRjtJQUVBLGtEQUFrRDtJQUNsRCxJQUFJO1FBQ0YsTUFBTSxFQUFFZixNQUFNZ0IsV0FBVyxFQUFFZCxLQUFLLEVBQUUsR0FBRyxNQUFNSCxTQUN4Q2tCLElBQUksQ0FBQyxlQUNMQyxNQUFNLENBQUMsS0FDUEMsRUFBRSxDQUFDLFdBQVdsQixLQUFLVyxFQUFFLEVBQ3JCTyxFQUFFLENBQUMsYUFBYSxNQUNoQkMsTUFBTTtRQUVULElBQUlsQixTQUFTLENBQUNjLGFBQWE7WUFDekIsTUFBTSxJQUFJVixNQUFNO1FBQ2xCO1FBRUEsT0FBTztZQUNMTSxJQUFJWCxLQUFLVyxFQUFFO1lBQ1hDLE9BQU9aLEtBQUtZLEtBQUs7WUFDakJKLE1BQU1PLFlBQVlQLElBQUksSUFBSTtZQUMxQkssWUFBWUUsWUFBWUYsVUFBVTtZQUNsQ0MsV0FBV0MsWUFBWUQsU0FBUztRQUNsQztJQUNGLEVBQUUsT0FBT2IsT0FBTztRQUNkLGdFQUFnRTtRQUNoRSxNQUFNLElBQUlJLE1BQU07SUFDbEI7QUFDRjtBQUVBOzs7OztDQUtDLEdBQ00sU0FBU2UsY0FBY3BCLElBQWUsRUFBRXFCLFVBQWtCO0lBQy9ELDRCQUE0QjtJQUM1QixJQUFJckIsS0FBS1EsSUFBSSxLQUFLLFNBQVM7UUFDekIsT0FBTztJQUNUO0lBRUEsK0JBQStCO0lBQy9CLElBQUlSLEtBQUtRLElBQUksS0FBSyxXQUFXO1FBQzNCLE1BQU1jLHFCQUFxQjtZQUN6QjtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1NBQ0Q7UUFDRCxPQUFPQSxtQkFBbUJaLFFBQVEsQ0FBQ1c7SUFDckM7SUFFQSxnQ0FBZ0M7SUFDaEMsSUFBSXJCLEtBQUtRLElBQUksS0FBSyxTQUFTO1FBQ3pCLE1BQU1lLG1CQUFtQjtZQUN2QjtZQUNBO1lBQ0E7WUFDQTtTQUNEO1FBQ0QsT0FBT0EsaUJBQWlCYixRQUFRLENBQUNXO0lBQ25DO0lBRUEsT0FBTztBQUNUO0FBRUE7Ozs7O0NBS0MsR0FDTSxTQUFTRyxrQkFBa0J4QixJQUFlLEVBQUVxQixVQUFrQjtJQUNuRSxJQUFJLENBQUNELGNBQWNwQixNQUFNcUIsYUFBYTtRQUNwQyxNQUFNLElBQUloQixNQUFNLENBQUMsbUJBQW1CLEVBQUVnQixZQUFZO0lBQ3BEO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcb2xpdmlcXERvbWFpbmUgVmFsbG90XFxzcmNcXGxpYlxcYWRtaW5cXGF1dGgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlUm91dGVIYW5kbGVyU3VwYWJhc2VDbGllbnQgfSBmcm9tICdAL2xpYi9zdXBhYmFzZS9zZXJ2ZXInXG5pbXBvcnQgeyBOZXh0UmVxdWVzdCB9IGZyb20gJ25leHQvc2VydmVyJ1xuaW1wb3J0IHR5cGUgeyBEYXRhYmFzZSB9IGZyb20gJ0AvdHlwZXMvZGF0YWJhc2UudHlwZXMnXG5cbmV4cG9ydCBpbnRlcmZhY2UgQWRtaW5Vc2VyIHtcbiAgaWQ6IHN0cmluZ1xuICBlbWFpbDogc3RyaW5nXG4gIHJvbGU6IHN0cmluZ1xuICBmaXJzdF9uYW1lPzogc3RyaW5nXG4gIGxhc3RfbmFtZT86IHN0cmluZ1xufVxuXG4vKipcbiAqIFJlcXVpcmUgYWRtaW4gYXV0aGVudGljYXRpb24gZm9yIEFQSSByb3V0ZXNcbiAqIEBwYXJhbSByZXF1ZXN0IE5leHRSZXF1ZXN0IG9iamVjdFxuICogQHJldHVybnMgUHJvbWlzZTxBZG1pblVzZXI+IGlmIGF1dGhlbnRpY2F0ZWRcbiAqIEB0aHJvd3MgRXJyb3IgaWYgbm90IGF1dGhlbnRpY2F0ZWQgb3Igbm90IGFkbWluXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXF1aXJlQWRtaW5BdXRoKHJlcXVlc3Q/OiBOZXh0UmVxdWVzdCk6IFByb21pc2U8QWRtaW5Vc2VyPiB7XG4gIGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlUm91dGVIYW5kbGVyU3VwYWJhc2VDbGllbnQocmVxdWVzdClcblxuICAvLyBHZXQgdGhlIGN1cnJlbnQgdXNlclxuICBjb25zdCB7IGRhdGE6IHsgdXNlciB9LCBlcnJvcjogdXNlckVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLmdldFVzZXIoKVxuXG4gIGlmICh1c2VyRXJyb3IgfHwgIXVzZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0F1dGhlbnRpY2F0aW9uIHJlcXVpcmVkJylcbiAgfVxuXG4gIC8vIENoZWNrIGlmIHVzZXIgaGFzIGFkbWluIHJvbGUgaW4gbWV0YWRhdGFcbiAgY29uc3QgdXNlclJvbGUgPSB1c2VyLnVzZXJfbWV0YWRhdGE/LnJvbGUgfHwgdXNlci5hcHBfbWV0YWRhdGE/LnJvbGVcblxuICAvLyBGaXJzdCBjaGVjayBtZXRhZGF0YSBmb3IgcXVpY2sgYWNjZXNzXG4gIGlmIChbJ2FkbWluJywgJ21hbmFnZXInLCAnc3RhZmYnXS5pbmNsdWRlcyh1c2VyUm9sZSkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IHVzZXIuaWQsXG4gICAgICBlbWFpbDogdXNlci5lbWFpbCEsXG4gICAgICByb2xlOiB1c2VyUm9sZSxcbiAgICAgIGZpcnN0X25hbWU6IHVzZXIudXNlcl9tZXRhZGF0YT8uZmlyc3RfbmFtZSxcbiAgICAgIGxhc3RfbmFtZTogdXNlci51c2VyX21ldGFkYXRhPy5sYXN0X25hbWVcbiAgICB9XG4gIH1cblxuICAvLyBDaGVjayBhZG1pbl91c2VycyB0YWJsZSBpZiBtZXRhZGF0YSBjaGVjayBmYWlsc1xuICB0cnkge1xuICAgIGNvbnN0IHsgZGF0YTogYWRtaW5SZWNvcmQsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oJ2FkbWluX3VzZXJzJylcbiAgICAgIC5zZWxlY3QoJyonKVxuICAgICAgLmVxKCd1c2VyX2lkJywgdXNlci5pZClcbiAgICAgIC5lcSgnaXNfYWN0aXZlJywgdHJ1ZSlcbiAgICAgIC5zaW5nbGUoKVxuXG4gICAgaWYgKGVycm9yIHx8ICFhZG1pblJlY29yZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBZG1pbiBhY2Nlc3MgcmVxdWlyZWQnKVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBpZDogdXNlci5pZCxcbiAgICAgIGVtYWlsOiB1c2VyLmVtYWlsISxcbiAgICAgIHJvbGU6IGFkbWluUmVjb3JkLnJvbGUgfHwgJ3N0YWZmJyxcbiAgICAgIGZpcnN0X25hbWU6IGFkbWluUmVjb3JkLmZpcnN0X25hbWUsXG4gICAgICBsYXN0X25hbWU6IGFkbWluUmVjb3JkLmxhc3RfbmFtZVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBJZiBhZG1pbiB0YWJsZSBkb2Vzbid0IGV4aXN0IG9yIGlzbid0IGFjY2Vzc2libGUsIGRlbnkgYWNjZXNzXG4gICAgdGhyb3cgbmV3IEVycm9yKCdBZG1pbiBhY2Nlc3MgcmVxdWlyZWQnKVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdXNlciBoYXMgc3BlY2lmaWMgcGVybWlzc2lvblxuICogQHBhcmFtIHVzZXIgQWRtaW5Vc2VyXG4gKiBAcGFyYW0gcGVybWlzc2lvbiBzdHJpbmdcbiAqIEByZXR1cm5zIGJvb2xlYW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc1Blcm1pc3Npb24odXNlcjogQWRtaW5Vc2VyLCBwZXJtaXNzaW9uOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgLy8gQWRtaW4gaGFzIGFsbCBwZXJtaXNzaW9uc1xuICBpZiAodXNlci5yb2xlID09PSAnYWRtaW4nKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8vIE1hbmFnZXIgaGFzIG1vc3QgcGVybWlzc2lvbnNcbiAgaWYgKHVzZXIucm9sZSA9PT0gJ21hbmFnZXInKSB7XG4gICAgY29uc3QgbWFuYWdlclBlcm1pc3Npb25zID0gW1xuICAgICAgJ3Byb2R1Y3RzLnJlYWQnLFxuICAgICAgJ3Byb2R1Y3RzLmNyZWF0ZScsXG4gICAgICAncHJvZHVjdHMudXBkYXRlJyxcbiAgICAgICdvcmRlcnMucmVhZCcsXG4gICAgICAnb3JkZXJzLnVwZGF0ZScsXG4gICAgICAnaW5xdWlyaWVzLnJlYWQnLFxuICAgICAgJ2lucXVpcmllcy51cGRhdGUnLFxuICAgICAgJ2N1c3RvbWVycy5yZWFkJ1xuICAgIF1cbiAgICByZXR1cm4gbWFuYWdlclBlcm1pc3Npb25zLmluY2x1ZGVzKHBlcm1pc3Npb24pXG4gIH1cblxuICAvLyBTdGFmZiBoYXMgbGltaXRlZCBwZXJtaXNzaW9uc1xuICBpZiAodXNlci5yb2xlID09PSAnc3RhZmYnKSB7XG4gICAgY29uc3Qgc3RhZmZQZXJtaXNzaW9ucyA9IFtcbiAgICAgICdwcm9kdWN0cy5yZWFkJyxcbiAgICAgICdvcmRlcnMucmVhZCcsXG4gICAgICAnaW5xdWlyaWVzLnJlYWQnLFxuICAgICAgJ2lucXVpcmllcy51cGRhdGUnXG4gICAgXVxuICAgIHJldHVybiBzdGFmZlBlcm1pc3Npb25zLmluY2x1ZGVzKHBlcm1pc3Npb24pXG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyoqXG4gKiBSZXF1aXJlIHNwZWNpZmljIHBlcm1pc3Npb24gZm9yIGFuIGFjdGlvblxuICogQHBhcmFtIHVzZXIgQWRtaW5Vc2VyXG4gKiBAcGFyYW0gcGVybWlzc2lvbiBzdHJpbmdcbiAqIEB0aHJvd3MgRXJyb3IgaWYgcGVybWlzc2lvbiBkZW5pZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcXVpcmVQZXJtaXNzaW9uKHVzZXI6IEFkbWluVXNlciwgcGVybWlzc2lvbjogc3RyaW5nKTogdm9pZCB7XG4gIGlmICghaGFzUGVybWlzc2lvbih1c2VyLCBwZXJtaXNzaW9uKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgUGVybWlzc2lvbiBkZW5pZWQ6ICR7cGVybWlzc2lvbn1gKVxuICB9XG59Il0sIm5hbWVzIjpbImNyZWF0ZVJvdXRlSGFuZGxlclN1cGFiYXNlQ2xpZW50IiwicmVxdWlyZUFkbWluQXV0aCIsInJlcXVlc3QiLCJzdXBhYmFzZSIsImRhdGEiLCJ1c2VyIiwiZXJyb3IiLCJ1c2VyRXJyb3IiLCJhdXRoIiwiZ2V0VXNlciIsIkVycm9yIiwidXNlclJvbGUiLCJ1c2VyX21ldGFkYXRhIiwicm9sZSIsImFwcF9tZXRhZGF0YSIsImluY2x1ZGVzIiwiaWQiLCJlbWFpbCIsImZpcnN0X25hbWUiLCJsYXN0X25hbWUiLCJhZG1pblJlY29yZCIsImZyb20iLCJzZWxlY3QiLCJlcSIsInNpbmdsZSIsImhhc1Blcm1pc3Npb24iLCJwZXJtaXNzaW9uIiwibWFuYWdlclBlcm1pc3Npb25zIiwic3RhZmZQZXJtaXNzaW9ucyIsInJlcXVpcmVQZXJtaXNzaW9uIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/admin/auth.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/admin/utils.ts":
/*!********************************!*\
  !*** ./src/lib/admin/utils.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateSKU: () => (/* binding */ generateSKU),\n/* harmony export */   generateSlug: () => (/* binding */ generateSlug),\n/* harmony export */   getCategoryFromVarietal: () => (/* binding */ getCategoryFromVarietal),\n/* harmony export */   processImageUrl: () => (/* binding */ processImageUrl),\n/* harmony export */   sanitizeProductData: () => (/* binding */ sanitizeProductData),\n/* harmony export */   validateWineProduct: () => (/* binding */ validateWineProduct)\n/* harmony export */ });\n/**\n * Generate SEO-friendly slug from product name and vintage\n * @param name Product name\n * @param vintage Product vintage\n * @returns SEO-friendly slug\n */ function generateSlug(name, vintage) {\n    let slug = name.toLowerCase().trim()// Replace French accented characters\n    .replace(/[àáâãäå]/g, 'a').replace(/[èéêë]/g, 'e').replace(/[ìíîï]/g, 'i').replace(/[òóôõö]/g, 'o').replace(/[ùúûü]/g, 'u').replace(/[ÿý]/g, 'y').replace(/[ñ]/g, 'n').replace(/[ç]/g, 'c')// Remove quotes and special characters\n    .replace(/[«»\"']/g, '').replace(/[^\\w\\s-]/g, '')// Replace spaces and underscores with hyphens\n    .replace(/[\\s_-]+/g, '-')// Remove leading/trailing hyphens\n    .replace(/^-+|-+$/g, '');\n    // Add vintage if provided\n    if (vintage) {\n        slug += `-${vintage}`;\n    }\n    return slug;\n}\n/**\n * Generate unique SKU for wine product\n * @param name Product name\n * @param vintage Product vintage\n * @param varietal Product varietal\n * @returns Unique SKU\n */ function generateSKU(name, vintage, varietal) {\n    // Extract initials from name\n    const nameInitials = name.split(' ').map((word)=>word.charAt(0)).join('').toUpperCase().substring(0, 3);\n    // Extract varietal code\n    const varietalCode = varietal.replace(/[^a-zA-Z]/g, '').toUpperCase().substring(0, 3);\n    // Combine with vintage\n    return `${nameInitials}${varietalCode}${vintage}`;\n}\n/**\n * Validate and process image URLs for Supabase storage\n * @param url Image URL\n * @returns Processed URL or null if invalid\n */ function processImageUrl(url) {\n    if (!url || typeof url !== 'string') {\n        return null;\n    }\n    // If it's already a Supabase URL, ensure it's properly formatted\n    if (url.includes('supabase.co/storage/v1/object/public/')) {\n        // Fix missing /Public/ in the URL path if needed\n        if (url.includes('/object/public/wines/') && !url.includes('/object/public/Public/wines/')) {\n            return url.replace('/object/public/wines/', '/object/public/Public/wines/');\n        }\n        return url;\n    }\n    // If it's a relative URL, assume it's correct\n    if (url.startsWith('/')) {\n        return url;\n    }\n    // If it's an absolute URL, validate it\n    try {\n        new URL(url);\n        return url;\n    } catch  {\n        return null;\n    }\n}\n/**\n * Calculate category from varietal\n * @param varietal Wine varietal\n * @returns Wine category\n */ function getCategoryFromVarietal(varietal) {\n    if (!varietal) return 'red_wine';\n    const lowerVarietal = varietal.toLowerCase();\n    // White wine varietals\n    if (lowerVarietal.includes('blanc') || lowerVarietal.includes('viognier') || lowerVarietal.includes('clairette') || lowerVarietal.includes('bourboulenc') || lowerVarietal.includes('chardonnay') || lowerVarietal.includes('sauvignon') || lowerVarietal.includes('riesling') || lowerVarietal.includes('pinot grigio') || lowerVarietal.includes('pinot gris')) {\n        return 'white_wine';\n    }\n    // Rosé wine varietals\n    if (lowerVarietal.includes('rosé') || lowerVarietal.includes('rose') || lowerVarietal.includes('cinsault rosé')) {\n        return 'rose_wine';\n    }\n    // Sparkling wine indicators\n    if (lowerVarietal.includes('champagne') || lowerVarietal.includes('crémant') || lowerVarietal.includes('pétillant') || lowerVarietal.includes('bulles')) {\n        return 'sparkling_wine';\n    }\n    // Default to red wine\n    return 'red_wine';\n}\n/**\n * Validate wine product data for completeness\n * @param product Wine product data\n * @returns Array of validation errors\n */ function validateWineProduct(product) {\n    const errors = [];\n    // Check required multilingual fields\n    if (!product.description_en || product.description_en.trim().length < 10) {\n        errors.push('English description must be at least 10 characters');\n    }\n    if (!product.description_fr || product.description_fr.trim().length < 10) {\n        errors.push('French description must be at least 10 characters');\n    }\n    // Check slug uniqueness requirements\n    if (!product.slug_en || !/^[a-z0-9-]+$/.test(product.slug_en)) {\n        errors.push('English slug must contain only lowercase letters, numbers, and hyphens');\n    }\n    if (!product.slug_fr || !/^[a-z0-9-]+$/.test(product.slug_fr)) {\n        errors.push('French slug must contain only lowercase letters, numbers, and hyphens');\n    }\n    // Check price logic\n    if (product.cost_eur && product.price_eur && product.cost_eur > product.price_eur) {\n        errors.push('Cost cannot be higher than selling price');\n    }\n    // Check stock logic\n    if (product.reserved_quantity > product.stock_quantity) {\n        errors.push('Reserved quantity cannot exceed stock quantity');\n    }\n    // Check vintage logic\n    const currentYear = new Date().getFullYear();\n    if (product.vintage > currentYear + 1) {\n        errors.push(`Vintage cannot be more than one year in the future (${currentYear + 1})`);\n    }\n    return errors;\n}\n/**\n * Sanitize product data for database insertion\n * @param product Raw product data\n * @returns Sanitized product data\n */ function sanitizeProductData(product) {\n    return {\n        ...product,\n        // Ensure numeric fields are properly typed\n        vintage: Number(product.vintage),\n        alcohol_content: Number(product.alcohol_content),\n        volume_ml: Number(product.volume_ml),\n        price_eur: Number(product.price_eur),\n        cost_eur: product.cost_eur ? Number(product.cost_eur) : null,\n        stock_quantity: Number(product.stock_quantity),\n        reserved_quantity: Number(product.reserved_quantity || 0),\n        reorder_level: product.reorder_level ? Number(product.reorder_level) : null,\n        weight_grams: Number(product.weight_grams),\n        sort_order: Number(product.sort_order || 0),\n        // Ensure boolean fields are properly typed\n        organic_certified: Boolean(product.organic_certified),\n        biodynamic_certified: Boolean(product.biodynamic_certified),\n        vegan_friendly: Boolean(product.vegan_friendly),\n        is_active: Boolean(product.is_active),\n        featured: Boolean(product.featured),\n        // Trim string fields\n        sku: product.sku?.trim(),\n        name: product.name?.trim(),\n        varietal: product.varietal?.trim(),\n        region: product.region?.trim(),\n        description_en: product.description_en?.trim(),\n        description_fr: product.description_fr?.trim(),\n        tasting_notes_en: product.tasting_notes_en?.trim() || null,\n        tasting_notes_fr: product.tasting_notes_fr?.trim() || null,\n        food_pairing_en: product.food_pairing_en?.trim() || null,\n        food_pairing_fr: product.food_pairing_fr?.trim() || null,\n        production_notes_en: product.production_notes_en?.trim() || null,\n        production_notes_fr: product.production_notes_fr?.trim() || null,\n        seo_title_en: product.seo_title_en?.trim() || null,\n        seo_title_fr: product.seo_title_fr?.trim() || null,\n        seo_description_en: product.seo_description_en?.trim() || null,\n        seo_description_fr: product.seo_description_fr?.trim() || null,\n        slug_en: product.slug_en?.trim(),\n        slug_fr: product.slug_fr?.trim(),\n        // Process arrays\n        allergens: Array.isArray(product.allergens) ? product.allergens : null,\n        // Set timestamps\n        updated_at: new Date().toISOString()\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/admin/utils.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/supabase/server.ts":
/*!************************************!*\
  !*** ./src/lib/supabase/server.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addToCart: () => (/* binding */ addToCart),\n/* harmony export */   bulkUpdateProductFeatured: () => (/* binding */ bulkUpdateProductFeatured),\n/* harmony export */   bulkUpdateProductStatus: () => (/* binding */ bulkUpdateProductStatus),\n/* harmony export */   createAdminProduct: () => (/* binding */ createAdminProduct),\n/* harmony export */   createAnonymousSupabaseClient: () => (/* binding */ createAnonymousSupabaseClient),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   createOrUpdateCustomer: () => (/* binding */ createOrUpdateCustomer),\n/* harmony export */   createOrder: () => (/* binding */ createOrder),\n/* harmony export */   createProductImage: () => (/* binding */ createProductImage),\n/* harmony export */   createRouteHandlerSupabaseClient: () => (/* binding */ createRouteHandlerSupabaseClient),\n/* harmony export */   createServerSupabaseClient: () => (/* binding */ createServerSupabaseClient),\n/* harmony export */   deleteAdminProduct: () => (/* binding */ deleteAdminProduct),\n/* harmony export */   deleteProductImage: () => (/* binding */ deleteProductImage),\n/* harmony export */   duplicateProduct: () => (/* binding */ duplicateProduct),\n/* harmony export */   fixSupabaseImageUrl: () => (/* binding */ fixSupabaseImageUrl),\n/* harmony export */   getAdminProductById: () => (/* binding */ getAdminProductById),\n/* harmony export */   getAdminProducts: () => (/* binding */ getAdminProducts),\n/* harmony export */   getCartItems: () => (/* binding */ getCartItems),\n/* harmony export */   getFeaturedProducts: () => (/* binding */ getFeaturedProducts),\n/* harmony export */   getLowStockProducts: () => (/* binding */ getLowStockProducts),\n/* harmony export */   getOrderById: () => (/* binding */ getOrderById),\n/* harmony export */   getProductById: () => (/* binding */ getProductById),\n/* harmony export */   getProductBySlug: () => (/* binding */ getProductBySlug),\n/* harmony export */   getProducts: () => (/* binding */ getProducts),\n/* harmony export */   getServerAdminUser: () => (/* binding */ getServerAdminUser),\n/* harmony export */   getServerSession: () => (/* binding */ getServerSession),\n/* harmony export */   getServerUser: () => (/* binding */ getServerUser),\n/* harmony export */   getVatRateByCountry: () => (/* binding */ getVatRateByCountry),\n/* harmony export */   getWineFallbackImage: () => (/* binding */ getWineFallbackImage),\n/* harmony export */   hardDeleteAdminProduct: () => (/* binding */ hardDeleteAdminProduct),\n/* harmony export */   removeFromCart: () => (/* binding */ removeFromCart),\n/* harmony export */   safeAdminQuery: () => (/* binding */ safeAdminQuery),\n/* harmony export */   safeAnonymousQuery: () => (/* binding */ safeAnonymousQuery),\n/* harmony export */   safeQuery: () => (/* binding */ safeQuery),\n/* harmony export */   updateAdminProduct: () => (/* binding */ updateAdminProduct),\n/* harmony export */   updateCartItem: () => (/* binding */ updateCartItem),\n/* harmony export */   updateProductImage: () => (/* binding */ updateProductImage),\n/* harmony export */   updateProductStock: () => (/* binding */ updateProductStock)\n/* harmony export */ });\n/* harmony import */ var _supabase_ssr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/ssr */ \"(rsc)/./node_modules/@supabase/ssr/dist/module/index.js\");\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n\n\n// Helper function to fix Supabase image URLs\nfunction fixSupabaseImageUrl(url) {\n    if (url.includes('supabase.co/storage/v1/object/public/wines/')) {\n        // Fix missing /Public/ in the URL path\n        return url.replace('/object/public/wines/', '/object/public/Public/wines/');\n    }\n    return url;\n}\n// Helper function to get wine-specific fallback images\nfunction getWineFallbackImage(wineName) {\n    const name = wineName.toLowerCase();\n    if (name.includes('magnaneraie')) {\n        return '/images/wine-magnaneraie.svg';\n    } else if (name.includes('rosé') || name.includes('rose')) {\n        return '/images/wine-bottle-rose.svg';\n    } else if (name.includes('blanc') || name.includes('white')) {\n        return '/images/wine-bottle-white.svg';\n    } else if (name.includes('rouge') || name.includes('red')) {\n        return '/images/wine-bottle-red.svg';\n    } else {\n        return '/images/default-wine.svg';\n    }\n}\n// Helper function to generate slug from product name\nfunction generateSlug(name) {\n    return name.toLowerCase().replace(/[àáâãäå]/g, 'a').replace(/[èéêë]/g, 'e').replace(/[ìíîï]/g, 'i').replace(/[òóôõö]/g, 'o').replace(/[ùúûü]/g, 'u').replace(/[ÿý]/g, 'y').replace(/[ñ]/g, 'n').replace(/[ç]/g, 'c').replace(/[«»\\\"']/g, '') // Remove quotes and guillemets\n    .replace(/[^\\w\\s-]/g, '') // Remove special characters\n    .replace(/[\\s_-]+/g, '-') // Replace spaces and underscores with hyphens\n    .replace(/^-+|-+$/g, '') // Remove leading/trailing hyphens\n    ;\n}\n// Create read-only server client for Server Components (cannot modify cookies)\nconst createServerSupabaseClient = async ()=>{\n    // Check if we're in a build context where cookies are not available\n    try {\n        const cookieStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n        return (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createServerClient)(\"https://vmtudbupajnjyauvqnej.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZtdHVkYnVwYWpuanlhdXZxbmVqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5MzkwNTcsImV4cCI6MjA3MzUxNTA1N30.7SZ6RUgXQdI-nf1Dun7XnQ2sRIL-R_KcV2EoECuXsGs\", {\n            cookies: {\n                get (name) {\n                    return cookieStore.get(name)?.value;\n                },\n                set (name, value, options) {\n                // Don't set cookies in Server Components - this prevents the error\n                // Cookie modifications should only happen in Route Handlers or Server Actions\n                },\n                remove (name, options) {\n                // Don't remove cookies in Server Components - this prevents the error\n                }\n            }\n        });\n    } catch (error) {\n        // During build time or when cookies are not available, create a client without cookies\n        return (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createServerClient)(\"https://vmtudbupajnjyauvqnej.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZtdHVkYnVwYWpuanlhdXZxbmVqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5MzkwNTcsImV4cCI6MjA3MzUxNTA1N30.7SZ6RUgXQdI-nf1Dun7XnQ2sRIL-R_KcV2EoECuXsGs\", {\n            cookies: {\n                get () {\n                    return undefined;\n                },\n                set () {},\n                remove () {}\n            }\n        });\n    }\n};\n// Create a completely anonymous client for public data queries (no auth)\nconst createAnonymousSupabaseClient = ()=>{\n    return (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createServerClient)(\"https://vmtudbupajnjyauvqnej.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZtdHVkYnVwYWpuanlhdXZxbmVqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5MzkwNTcsImV4cCI6MjA3MzUxNTA1N30.7SZ6RUgXQdI-nf1Dun7XnQ2sRIL-R_KcV2EoECuXsGs\", {\n        cookies: {\n            get () {\n                return undefined;\n            },\n            set () {},\n            remove () {}\n        }\n    });\n};\n// Create client for API Route Handlers\nconst createRouteHandlerSupabaseClient = (request)=>{\n    return (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createServerClient)(\"https://vmtudbupajnjyauvqnej.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZtdHVkYnVwYWpuanlhdXZxbmVqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5MzkwNTcsImV4cCI6MjA3MzUxNTA1N30.7SZ6RUgXQdI-nf1Dun7XnQ2sRIL-R_KcV2EoECuXsGs\", {\n        cookies: {\n            get (name) {\n                return request?.cookies.get(name)?.value;\n            },\n            set (name, value, options) {\n            // For route handlers, we need to set cookies differently\n            // This will be handled by the response\n            },\n            remove (name, options) {\n            // For route handlers, we need to remove cookies differently\n            // This will be handled by the response\n            }\n        }\n    });\n};\n// Export createClient alias for backward compatibility\nconst createClient = createServerSupabaseClient;\n// Authentication helpers for server-side\nconst getServerUser = async ()=>{\n    try {\n        const supabase = await createServerSupabaseClient();\n        const { data: { user }, error } = await supabase.auth.getUser();\n        if (error) {\n            console.error('Error getting server user:', error);\n            return null;\n        }\n        return user;\n    } catch (error) {\n        // During build time, return null for user\n        return null;\n    }\n};\nconst getServerSession = async ()=>{\n    try {\n        const supabase = await createServerSupabaseClient();\n        const { data: { session }, error } = await supabase.auth.getSession();\n        if (error) {\n            console.error('Error getting server session:', error);\n            return null;\n        }\n        return session;\n    } catch (error) {\n        // During build time, return null for session\n        return null;\n    }\n};\n// Admin authentication helper\nconst getServerAdminUser = async ()=>{\n    try {\n        const user = await getServerUser();\n        if (!user) {\n            throw new Error('Not authenticated');\n        }\n        // Check if user has admin role in user metadata or in a separate admin table\n        const supabase = await createServerSupabaseClient();\n        // Option 1: Check user metadata\n        if (user.user_metadata?.role === 'admin') {\n            return user;\n        }\n        // Option 2: Check admin table (if exists)\n        try {\n            const { data: adminRecord, error } = await supabase.from('admin_users').select('*').eq('user_id', user.id).single();\n            if (error && error.code !== 'PGRST116') {\n                console.warn('Admin table check failed:', error);\n                throw new Error('Admin access required');\n            }\n            if (!adminRecord) {\n                throw new Error('Admin access required');\n            }\n        } catch (error) {\n            console.warn('Admin table not found or accessible, falling back to metadata check');\n            throw new Error('Admin access required');\n        }\n        return user;\n    } catch (error) {\n        // During build time, throw error for admin access\n        throw new Error('Admin access required');\n    }\n};\n// Database query helpers with error handling\nconst safeQuery = async (queryFn)=>{\n    const supabase = await createServerSupabaseClient();\n    const { data, error } = await queryFn(supabase);\n    if (error) {\n        console.error('Database query error:', error);\n        if (error.code === 'PGRST116') {\n            throw new Error('Resource not found');\n        }\n        if (error.code === '42501') {\n            throw new Error('Access denied');\n        }\n        throw new Error(error.message || 'Database query failed');\n    }\n    return data;\n};\n// Database query helper for public data (no authentication required)\nconst safeAnonymousQuery = async (queryFn)=>{\n    const supabase = createAnonymousSupabaseClient();\n    const { data, error } = await queryFn(supabase);\n    if (error) {\n        console.error('Database query error:', error);\n        if (error.code === 'PGRST116') {\n            throw new Error('Resource not found');\n        }\n        if (error.code === '42501') {\n            throw new Error('Access denied');\n        }\n        throw new Error(error.message || 'Database query failed');\n    }\n    return data;\n};\n// Product queries - using anonymous client for public data\nconst getProducts = async (options)=>{\n    return safeAnonymousQuery(async (supabase)=>{\n        let query = supabase.from('wine_products').select(`\n        *,\n        product_images(\n          url,\n          alt_text_en,\n          alt_text_fr,\n          is_primary,\n          display_order\n        )\n      `).eq('is_active', true);\n        if (options?.category) {\n            query = query.eq('category', options.category);\n        }\n        if (options?.inStock) {\n            query = query.gt('stock_quantity', 0);\n        }\n        if (options?.featured) {\n            query = query.eq('featured', true);\n        }\n        if (options?.limit) {\n            query = query.limit(options.limit);\n        }\n        if (options?.offset) {\n            query = query.range(options.offset, options.offset + (options.limit || 10) - 1);\n        }\n        return query.order('created_at', {\n            ascending: false\n        });\n    });\n};\n// Get featured products for homepage\nconst getFeaturedProducts = async (limit = 6)=>{\n    try {\n        const products = await getProducts({\n            featured: true,\n            limit,\n            inStock: true\n        });\n        // Transform the data to match the expected format\n        return products.map((product)=>({\n                ...product,\n                // Map key fields to expected names for backward compatibility\n                description: product.description_en || product.description_fr || 'Fine wine from Domaine Vallot',\n                grape_variety: product.varietal,\n                producer: 'Domaine Vallot',\n                alcohol_content: product.alcohol_content || 13.5,\n                // Price handling\n                price_display: product.price_eur ? product.price_eur.toString() : '0.00',\n                price: product.price_eur ? Math.round(parseFloat(product.price_eur.toString()) * 100) : 0,\n                // Stock status\n                in_stock: product.stock_quantity > 0,\n                // Image handling with proper fallback and URL fix\n                image_url: product.product_images?.[0]?.url ? fixSupabaseImageUrl(product.product_images[0].url) : getWineFallbackImage(product.name),\n                image: product.product_images?.[0]?.url ? fixSupabaseImageUrl(product.product_images[0].url) : getWineFallbackImage(product.name),\n                // Additional fields for UI\n                is_organic: product.organic_certified || false,\n                is_biodynamic: product.biodynamic_certified || false,\n                is_featured: product.featured || false,\n                // Ensure proper slug generation\n                slug: product.slug_en || product.slug_fr || generateSlug(`${product.name}-${product.vintage}`)\n            }));\n    } catch (error) {\n        console.error('Error fetching featured products from database:', error);\n        // Return fallback mock data if database fails\n        return getFallbackProducts();\n    }\n};\n// Fallback mock data for development\nfunction getFallbackProducts() {\n    return [\n        {\n            id: '1',\n            name: 'Vinsobres rouge « François »',\n            slug: 'vinsobres-rouge-francois-2022',\n            description: 'A premium red wine with notes of dark fruit and traditional terroir expression.',\n            price_eur: 12.00,\n            price: 1200,\n            vintage: 2022,\n            grape_variety: 'Syrah blend',\n            producer: 'Domaine Vallot',\n            region: 'Vinsobres',\n            stock_quantity: 50,\n            is_organic: true,\n            is_biodynamic: true,\n            featured: true,\n            image_url: '/images/wine-bottle-red.svg',\n            image: '/images/wine-bottle-red.svg',\n            created_at: new Date().toISOString()\n        },\n        {\n            id: '2',\n            name: 'Vinsobres Cuvée « Claude »',\n            slug: 'vinsobres-cuvee-claude-2018',\n            description: 'From 67-year-old vines, this wine benefits from barrel aging for exceptional complexity.',\n            price_eur: 14.50,\n            price: 1450,\n            vintage: 2018,\n            grape_variety: 'Old vine Syrah',\n            producer: 'Domaine Vallot',\n            region: 'Vinsobres',\n            stock_quantity: 30,\n            is_organic: true,\n            is_biodynamic: true,\n            featured: true,\n            image_url: '/images/wine-bottle-red.svg',\n            image: '/images/wine-bottle-red.svg',\n            created_at: new Date().toISOString()\n        },\n        {\n            id: '3',\n            name: 'Vinsobres Le Haut des Côtes',\n            slug: 'vinsobres-le-haut-des-cotes-2018',\n            description: 'Deep red color with intense bouquet of vanilla and forest floor notes.',\n            price_eur: 16.50,\n            price: 1650,\n            vintage: 2018,\n            grape_variety: 'Syrah, Grenache',\n            producer: 'Domaine Vallot',\n            region: 'Vinsobres',\n            stock_quantity: 25,\n            is_organic: true,\n            is_biodynamic: true,\n            featured: true,\n            image_url: '/images/wine-bottle-red.svg',\n            image: '/images/wine-bottle-red.svg',\n            created_at: new Date().toISOString()\n        }\n    ];\n}\nconst getProductById = async (id)=>{\n    return safeAnonymousQuery(async (supabase)=>{\n        return supabase.from('wine_products').select('*').eq('id', id).eq('is_active', true).single();\n    });\n};\nconst getProductBySlug = async (slug)=>{\n    return safeAnonymousQuery(async (supabase)=>{\n        return supabase.from('wine_products').select('*').eq('slug', slug).eq('is_active', true).single();\n    });\n};\n// Cart queries\nconst getCartItems = async (userId)=>{\n    return safeQuery(async (supabase)=>{\n        return supabase.from('cart_items').select(`\n        *,\n        wine_products (*)\n      `).eq('customer_id', userId);\n    });\n};\nconst addToCart = async (userId, productId, quantity)=>{\n    return safeQuery(async (supabase)=>{\n        // Check if item already exists in cart\n        const { data: existingItem } = await supabase.from('cart_items').select('*').eq('customer_id', userId).eq('product_id', productId).single();\n        if (existingItem) {\n            // Update quantity\n            return supabase.from('cart_items').update({\n                quantity: existingItem.quantity + quantity\n            }).eq('id', existingItem.id).select().single();\n        } else {\n            // Insert new item\n            return supabase.from('cart_items').insert({\n                customer_id: userId,\n                product_id: productId,\n                quantity\n            }).select().single();\n        }\n    });\n};\nconst updateCartItem = async (userId, itemId, quantity)=>{\n    return safeQuery(async (supabase)=>{\n        return supabase.from('cart_items').update({\n            quantity\n        }).eq('id', itemId).eq('customer_id', userId).select().single();\n    });\n};\nconst removeFromCart = async (userId, itemId)=>{\n    return safeQuery(async (supabase)=>{\n        return supabase.from('cart_items').delete().eq('id', itemId).eq('customer_id', userId);\n    });\n};\n// Order queries\nconst createOrder = async (orderData)=>{\n    return safeQuery(async (supabase)=>{\n        // Start transaction by creating order first\n        const { data: order, error: orderError } = await supabase.from('orders').insert({\n            user_id: orderData.user_id,\n            customer_email: orderData.customer_email,\n            customer_first_name: orderData.customer_first_name,\n            customer_last_name: orderData.customer_last_name,\n            shipping_address: orderData.shipping_address,\n            billing_address: orderData.billing_address || orderData.shipping_address,\n            subtotal: orderData.subtotal,\n            vat_amount: orderData.vat_amount,\n            shipping_cost: orderData.shipping_cost,\n            total_amount: orderData.total_amount,\n            payment_method: orderData.payment_method || 'mollie',\n            status: orderData.status || 'pending'\n        }).select().single();\n        if (orderError) throw orderError;\n        // Insert order items\n        const orderItems = orderData.items.map((item)=>({\n                order_id: order.id,\n                product_id: item.product_id,\n                quantity: item.quantity,\n                unit_price: item.unit_price,\n                total_price: item.quantity * item.unit_price\n            }));\n        const { error: itemsError } = await supabase.from('order_items').insert(orderItems);\n        if (itemsError) throw itemsError;\n        return {\n            data: order,\n            error: null\n        };\n    });\n};\nconst getOrderById = async (orderId, userId)=>{\n    return safeQuery(async (supabase)=>{\n        let query = supabase.from('orders').select(`\n        *,\n        order_items (\n          *,\n          wine_products (*)\n        )\n      `).eq('id', orderId);\n        if (userId) {\n            query = query.eq('user_id', userId);\n        }\n        return query.single();\n    });\n};\n// Customer queries\nconst createOrUpdateCustomer = async (userData)=>{\n    return safeQuery(async (supabase)=>{\n        return supabase.from('customers').upsert(userData, {\n            onConflict: 'user_id'\n        }).select().single();\n    });\n};\n// VAT rate queries - public data\nconst getVatRateByCountry = async (countryCode)=>{\n    return safeAnonymousQuery(async (supabase)=>{\n        return supabase.from('vat_rates').select('*').eq('country_code', countryCode.toUpperCase()).eq('is_active', true).single();\n    });\n};\n// ==============================================================================\n// ADMIN PRODUCT MANAGEMENT FUNCTIONS\n// ==============================================================================\n// Admin query helper - requires authentication\nconst safeAdminQuery = async (queryFn, userId)=>{\n    // Verify admin access\n    const adminUser = await getServerAdminUser();\n    const supabase = await createServerSupabaseClient();\n    const { data, error } = await queryFn(supabase);\n    if (error) {\n        console.error('Database query error:', error);\n        if (error.code === 'PGRST116') {\n            throw new Error('Resource not found');\n        }\n        if (error.code === '42501') {\n            throw new Error('Access denied');\n        }\n        throw new Error(error.message || 'Database query failed');\n    }\n    return data;\n};\n// Get all products for admin (including inactive)\nconst getAdminProducts = async (options)=>{\n    return safeAdminQuery(async (supabase)=>{\n        let query = supabase.from('wine_products').select(`\n        *,\n        product_images(\n          id,\n          url,\n          alt_text_en,\n          alt_text_fr,\n          is_primary,\n          display_order,\n          image_type\n        )\n      `);\n        // Filter by status\n        if (options?.status === 'active') {\n            query = query.eq('is_active', true);\n        } else if (options?.status === 'inactive') {\n            query = query.eq('is_active', false);\n        }\n        // 'all' means no filter on is_active\n        // Search functionality\n        if (options?.search) {\n            const searchTerm = options.search.toLowerCase();\n            query = query.or(`\n        name.ilike.%${searchTerm}%,\n        description_en.ilike.%${searchTerm}%,\n        description_fr.ilike.%${searchTerm}%,\n        varietal.ilike.%${searchTerm}%,\n        region.ilike.%${searchTerm}%,\n        sku.ilike.%${searchTerm}%\n      `);\n        }\n        if (options?.featured !== undefined) {\n            query = query.eq('featured', options.featured);\n        }\n        // Sorting\n        const sortBy = options?.sortBy || 'created_at';\n        const sortOrder = options?.sortOrder === 'asc' ? {\n            ascending: true\n        } : {\n            ascending: false\n        };\n        query = query.order(sortBy, sortOrder);\n        if (options?.limit) {\n            query = query.limit(options.limit);\n        }\n        if (options?.offset) {\n            query = query.range(options.offset, options.offset + (options.limit || 20) - 1);\n        }\n        return query;\n    });\n};\n// Get single product for admin\nconst getAdminProductById = async (id)=>{\n    return safeAdminQuery(async (supabase)=>{\n        return supabase.from('wine_products').select(`\n        *,\n        product_images(\n          id,\n          url,\n          alt_text_en,\n          alt_text_fr,\n          is_primary,\n          display_order,\n          image_type,\n          width,\n          height,\n          file_size\n        )\n      `).eq('id', id).single();\n    });\n};\n// Create new product\nconst createAdminProduct = async (productData, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        // Add audit fields\n        const dataWithAudit = {\n            ...productData,\n            created_by: userId,\n            updated_by: userId,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        };\n        return supabase.from('wine_products').insert(dataWithAudit).select().single();\n    }, userId);\n};\n// Update existing product\nconst updateAdminProduct = async (id, productData, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        // Add audit fields\n        const dataWithAudit = {\n            ...productData,\n            updated_by: userId,\n            updated_at: new Date().toISOString()\n        };\n        return supabase.from('wine_products').update(dataWithAudit).eq('id', id).select().single();\n    }, userId);\n};\n// Soft delete product (set is_active to false)\nconst deleteAdminProduct = async (id, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        // Check if product has pending orders\n        const { data: pendingOrders } = await supabase.from('order_items').select(`\n        id,\n        orders!inner(\n          id,\n          status\n        )\n      `).eq('product_id', id).in('orders.status', [\n            'pending',\n            'confirmed',\n            'processing'\n        ]);\n        if (pendingOrders && pendingOrders.length > 0) {\n            throw new Error('Cannot delete product with pending orders');\n        }\n        // Soft delete by setting is_active to false\n        return supabase.from('wine_products').update({\n            is_active: false,\n            updated_by: userId,\n            updated_at: new Date().toISOString()\n        }).eq('id', id).select().single();\n    }, userId);\n};\n// Hard delete product (actual deletion - use with caution)\nconst hardDeleteAdminProduct = async (id, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        // Check if product has any orders\n        const { data: orders } = await supabase.from('order_items').select('id').eq('product_id', id);\n        if (orders && orders.length > 0) {\n            throw new Error('Cannot permanently delete product with order history');\n        }\n        // Delete associated images first\n        await supabase.from('product_images').delete().eq('product_id', id);\n        // Delete the product\n        return supabase.from('wine_products').delete().eq('id', id);\n    }, userId);\n};\n// Product image management functions\nconst createProductImage = async (imageData, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        // If this is set as primary, unset other primary images for this product\n        if (imageData.is_primary) {\n            await supabase.from('product_images').update({\n                is_primary: false\n            }).eq('product_id', imageData.product_id);\n        }\n        return supabase.from('product_images').insert(imageData).select().single();\n    }, userId);\n};\nconst updateProductImage = async (imageId, imageData, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        // If this is set as primary, unset other primary images for this product\n        if (imageData.is_primary) {\n            // First get the product_id\n            const { data: currentImage } = await supabase.from('product_images').select('product_id').eq('id', imageId).single();\n            if (currentImage) {\n                await supabase.from('product_images').update({\n                    is_primary: false\n                }).eq('product_id', currentImage.product_id).neq('id', imageId);\n            }\n        }\n        return supabase.from('product_images').update(imageData).eq('id', imageId).select().single();\n    }, userId);\n};\nconst deleteProductImage = async (imageId, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        return supabase.from('product_images').delete().eq('id', imageId);\n    }, userId);\n};\n// Bulk operations\nconst bulkUpdateProductStatus = async (productIds, isActive, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        return supabase.from('wine_products').update({\n            is_active: isActive,\n            updated_by: userId,\n            updated_at: new Date().toISOString()\n        }).in('id', productIds).select();\n    }, userId);\n};\nconst bulkUpdateProductFeatured = async (productIds, featured, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        return supabase.from('wine_products').update({\n            featured: featured,\n            updated_by: userId,\n            updated_at: new Date().toISOString()\n        }).in('id', productIds).select();\n    }, userId);\n};\n// Stock management\nconst updateProductStock = async (id, stockQuantity, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        return supabase.from('wine_products').update({\n            stock_quantity: stockQuantity,\n            updated_by: userId,\n            updated_at: new Date().toISOString()\n        }).eq('id', id).select().single();\n    }, userId);\n};\n// Get products with low stock\nconst getLowStockProducts = async (threshold = 10)=>{\n    return safeAdminQuery(async (supabase)=>{\n        return supabase.from('wine_products').select('*').eq('is_active', true).lte('stock_quantity', threshold).order('stock_quantity', {\n            ascending: true\n        });\n    });\n};\n// Duplicate product\nconst duplicateProduct = async (id, userId)=>{\n    return safeAdminQuery(async (supabase)=>{\n        // Get the original product\n        const { data: originalProduct } = await supabase.from('wine_products').select('*').eq('id', id).single();\n        if (!originalProduct) {\n            throw new Error('Product not found');\n        }\n        // Create new product data (remove id and update key fields)\n        const { id: _, created_at: __, updated_at: ___, created_by: ____, updated_by: _____, sku, slug_en, slug_fr, ...productData } = originalProduct;\n        const newProductData = {\n            ...productData,\n            name: `${originalProduct.name} (Copy)`,\n            sku: `${sku}-COPY-${Date.now()}`,\n            slug_en: `${slug_en}-copy-${Date.now()}`,\n            slug_fr: `${slug_fr}-copy-${Date.now()}`,\n            is_active: false,\n            featured: false,\n            created_by: userId,\n            updated_by: userId\n        };\n        // Create the new product\n        const { data: newProduct } = await supabase.from('wine_products').insert(newProductData).select().single();\n        // Copy images if they exist\n        const { data: originalImages } = await supabase.from('product_images').select('*').eq('product_id', id);\n        if (originalImages && originalImages.length > 0) {\n            const newImages = originalImages.map((img)=>({\n                    ...img,\n                    id: undefined,\n                    product_id: newProduct.id,\n                    created_at: undefined\n                }));\n            await supabase.from('product_images').insert(newImages);\n        }\n        return {\n            data: newProduct,\n            error: null\n        };\n    }, userId);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/supabase/server.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/validators/schemas.ts":
/*!***************************************!*\
  !*** ./src/lib/validators/schemas.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addToCartSchema: () => (/* binding */ addToCartSchema),\n/* harmony export */   addressSchema: () => (/* binding */ addressSchema),\n/* harmony export */   adminLoginSchema: () => (/* binding */ adminLoginSchema),\n/* harmony export */   adminUserSchema: () => (/* binding */ adminUserSchema),\n/* harmony export */   ageVerificationSchema: () => (/* binding */ ageVerificationSchema),\n/* harmony export */   changePasswordSchema: () => (/* binding */ changePasswordSchema),\n/* harmony export */   checkoutBillingSchema: () => (/* binding */ checkoutBillingSchema),\n/* harmony export */   checkoutCustomerSchema: () => (/* binding */ checkoutCustomerSchema),\n/* harmony export */   checkoutPaymentSchema: () => (/* binding */ checkoutPaymentSchema),\n/* harmony export */   checkoutShippingSchema: () => (/* binding */ checkoutShippingSchema),\n/* harmony export */   completeCheckoutSchema: () => (/* binding */ completeCheckoutSchema),\n/* harmony export */   contactFormSchema: () => (/* binding */ contactFormSchema),\n/* harmony export */   customerLoginSchema: () => (/* binding */ customerLoginSchema),\n/* harmony export */   customerRegistrationSchema: () => (/* binding */ customerRegistrationSchema),\n/* harmony export */   forgotPasswordSchema: () => (/* binding */ forgotPasswordSchema),\n/* harmony export */   getErrorMessage: () => (/* binding */ getErrorMessage),\n/* harmony export */   hasErrors: () => (/* binding */ hasErrors),\n/* harmony export */   imageUploadSchema: () => (/* binding */ imageUploadSchema),\n/* harmony export */   inventoryAdjustmentSchema: () => (/* binding */ inventoryAdjustmentSchema),\n/* harmony export */   loginSchema: () => (/* binding */ loginSchema),\n/* harmony export */   newsletterSchema: () => (/* binding */ newsletterSchema),\n/* harmony export */   orderSchema: () => (/* binding */ orderSchema),\n/* harmony export */   productImageSchema: () => (/* binding */ productImageSchema),\n/* harmony export */   productSchema: () => (/* binding */ productSchema),\n/* harmony export */   productSearchSchema: () => (/* binding */ productSearchSchema),\n/* harmony export */   registerSchema: () => (/* binding */ registerSchema),\n/* harmony export */   resetPasswordSchema: () => (/* binding */ resetPasswordSchema),\n/* harmony export */   shippingRateSchema: () => (/* binding */ shippingRateSchema),\n/* harmony export */   updateCartItemSchema: () => (/* binding */ updateCartItemSchema),\n/* harmony export */   updateWineProductSchema: () => (/* binding */ updateWineProductSchema),\n/* harmony export */   validateSchema: () => (/* binding */ validateSchema),\n/* harmony export */   vatCalculationSchema: () => (/* binding */ vatCalculationSchema),\n/* harmony export */   wineContactFormSchema: () => (/* binding */ wineContactFormSchema),\n/* harmony export */   wineProductSchema: () => (/* binding */ wineProductSchema)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/ZodError.js\");\n\n// Common validation patterns\nconst emailSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().email('Please enter a valid email address');\nconst phoneSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^(\\+\\d{1,3}[- ]?)?\\d{8,15}$/, 'Please enter a valid phone number').optional();\nconst postalCodeSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().min(3, 'Postal code must be at least 3 characters').max(10, 'Postal code cannot exceed 10 characters');\nconst passwordSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().min(8, 'Password must be at least 8 characters').regex(/[A-Z]/, 'Password must contain at least one uppercase letter').regex(/[a-z]/, 'Password must contain at least one lowercase letter').regex(/\\d/, 'Password must contain at least one number').regex(/[!@#$%^&*]/, 'Password must contain at least one special character');\n// Age verification schemas\nconst ageVerificationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    birthDay: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Please select a valid day').max(31, 'Please select a valid day'),\n    birthMonth: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Please select a valid month').max(12, 'Please select a valid month'),\n    birthYear: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1900, 'Please enter a realistic birth year').max(new Date().getFullYear(), 'Birth year cannot be in the future'),\n    documentType: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'id_card',\n        'passport',\n        'drivers_license'\n    ]).optional(),\n    documentNumber: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    country: zod__WEBPACK_IMPORTED_MODULE_0__.string().length(2, 'Country must be a 2-letter code').optional()\n}).refine((data)=>{\n    // Validate birth date\n    const birthDate = new Date(data.birthYear, data.birthMonth - 1, data.birthDay);\n    return !isNaN(birthDate.getTime()) && birthDate <= new Date();\n}, {\n    message: 'Please enter a valid birth date',\n    path: [\n        'birthDay'\n    ]\n});\n// Customer registration schemas\nconst customerRegistrationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    email: emailSchema,\n    password: passwordSchema,\n    confirmPassword: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    firstName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'First name must be at least 2 characters').max(50, 'First name cannot exceed 50 characters').regex(/^[a-zA-ZÀ-ÿ\\s'-]+$/, 'First name contains invalid characters'),\n    lastName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Last name must be at least 2 characters').max(50, 'Last name cannot exceed 50 characters').regex(/^[a-zA-ZÀ-ÿ\\s'-]+$/, 'Last name contains invalid characters'),\n    phone: phoneSchema,\n    birthDate: zod__WEBPACK_IMPORTED_MODULE_0__.string().refine((date)=>{\n        const birthDate = new Date(date);\n        const age = new Date().getFullYear() - birthDate.getFullYear();\n        return !isNaN(birthDate.getTime()) && age >= 16 && age <= 120;\n    }, 'You must be at least 16 years old to register'),\n    acceptTerms: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().refine((val)=>val === true, 'You must accept the terms and conditions'),\n    acceptPrivacy: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().refine((val)=>val === true, 'You must accept the privacy policy'),\n    acceptMarketing: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    country: zod__WEBPACK_IMPORTED_MODULE_0__.string().length(2, 'Please select a country')\n}).refine((data)=>data.password === data.confirmPassword, {\n    message: 'Passwords do not match',\n    path: [\n        'confirmPassword'\n    ]\n});\n// Authentication schemas\nconst loginSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    email: emailSchema,\n    password: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, 'Password is required'),\n    rememberMe: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional()\n});\nconst registerSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    email: emailSchema,\n    password: passwordSchema,\n    confirmPassword: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    firstName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'First name must be at least 2 characters').max(50, 'First name cannot exceed 50 characters').regex(/^[a-zA-ZÀ-ÿ\\s'-]+$/, 'First name contains invalid characters'),\n    lastName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Last name must be at least 2 characters').max(50, 'Last name cannot exceed 50 characters').regex(/^[a-zA-ZÀ-ÿ\\s'-]+$/, 'Last name contains invalid characters'),\n    phone: phoneSchema,\n    birthDate: zod__WEBPACK_IMPORTED_MODULE_0__.string().refine((date)=>{\n        const birthDate = new Date(date);\n        const age = new Date().getFullYear() - birthDate.getFullYear();\n        return !isNaN(birthDate.getTime()) && age >= 18 && age <= 120;\n    }, 'You must be at least 18 years old to register'),\n    preferredLanguage: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'en',\n        'fr'\n    ]),\n    marketingConsent: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    newsletterConsent: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    isBusiness: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    companyName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Company name is required').optional(),\n    vatNumber: zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^[A-Z]{2}[0-9A-Z]+$/, 'Invalid VAT number format').optional(),\n    termsAccepted: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().refine((val)=>val === true, 'You must accept the terms and conditions'),\n    privacyAccepted: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().refine((val)=>val === true, 'You must accept the privacy policy')\n}).refine((data)=>data.password === data.confirmPassword, {\n    message: 'Passwords do not match',\n    path: [\n        'confirmPassword'\n    ]\n}).refine((data)=>{\n    if (data.isBusiness) {\n        return data.companyName && data.companyName.length >= 2;\n    }\n    return true;\n}, {\n    message: 'Company name is required for business accounts',\n    path: [\n        'companyName'\n    ]\n});\nconst forgotPasswordSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    email: emailSchema\n});\nconst resetPasswordSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    token: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, 'Reset token is required'),\n    password: passwordSchema,\n    confirmPassword: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n}).refine((data)=>data.password === data.confirmPassword, {\n    message: 'Passwords do not match',\n    path: [\n        'confirmPassword'\n    ]\n});\nconst changePasswordSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    currentPassword: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, 'Current password is required'),\n    newPassword: passwordSchema,\n    confirmPassword: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n}).refine((data)=>data.newPassword === data.confirmPassword, {\n    message: 'Passwords do not match',\n    path: [\n        'confirmPassword'\n    ]\n});\n// Legacy alias for backward compatibility\nconst customerLoginSchema = loginSchema;\n// Address schemas\nconst addressSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    firstName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'First name is required'),\n    lastName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Last name is required'),\n    company: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    address: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(5, 'Street address is required'),\n    address2: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    city: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'City is required'),\n    postalCode: postalCodeSchema,\n    country: zod__WEBPACK_IMPORTED_MODULE_0__.string().length(2, 'Please select a country'),\n    phone: phoneSchema\n});\n// Checkout schemas\nconst checkoutCustomerSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    email: emailSchema,\n    firstName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'First name is required'),\n    lastName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Last name is required'),\n    phone: phoneSchema,\n    createAccount: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    password: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n}).refine((data)=>{\n    if (data.createAccount) {\n        return data.password && data.password.length >= 8;\n    }\n    return true;\n}, {\n    message: 'Password is required when creating an account',\n    path: [\n        'password'\n    ]\n});\nconst checkoutShippingSchema = addressSchema;\nconst checkoutBillingSchema = addressSchema.extend({\n    sameAsShipping: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional()\n});\nconst checkoutPaymentSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    paymentMethod: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'mollie',\n        'stripe',\n        'paypal'\n    ]),\n    savePaymentMethod: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    acceptTerms: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().refine((val)=>val === true, 'You must accept the terms and conditions')\n});\nconst completeCheckoutSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    customer: checkoutCustomerSchema,\n    shipping: checkoutShippingSchema,\n    billing: checkoutBillingSchema,\n    payment: checkoutPaymentSchema,\n    ageVerification: ageVerificationSchema,\n    vatNumber: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    specialInstructions: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(500, 'Special instructions cannot exceed 500 characters').optional()\n});\n// Cart schemas\nconst addToCartSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    productId: zod__WEBPACK_IMPORTED_MODULE_0__.string().uuid('Invalid product ID'),\n    quantity: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Quantity must be at least 1').max(24, 'Maximum 24 bottles per product').int('Quantity must be a whole number'),\n    variantId: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\nconst updateCartItemSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    quantity: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Quantity must be 0 or more').max(24, 'Maximum 24 bottles per product').int('Quantity must be a whole number')\n});\n// Product schemas (for admin)\nconst wineProductSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    sku: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(3, 'SKU must be at least 3 characters').max(50, 'SKU cannot exceed 50 characters').regex(/^[A-Z0-9-]+$/, 'SKU must contain only uppercase letters, numbers, and hyphens'),\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(3, 'Product name must be at least 3 characters').max(100, 'Product name cannot exceed 100 characters'),\n    vintage: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1800, 'Vintage must be realistic').max(new Date().getFullYear() + 1, 'Vintage cannot be too far in the future').int('Vintage must be a whole number'),\n    varietal: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Varietal must be at least 2 characters').max(100, 'Varietal cannot exceed 100 characters'),\n    region: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(100, 'Region name too long').optional(),\n    alcohol_content: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0.5, 'Alcohol content must be at least 0.5%').max(20, 'Alcohol content cannot exceed 20%'),\n    volume_ml: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(187, 'Minimum volume is 187ml').max(3000, 'Maximum volume is 3000ml').int('Volume must be a whole number').default(750),\n    price_eur: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Price cannot be negative').max(10000, 'Price cannot exceed €10,000.00'),\n    cost_eur: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Cost cannot be negative').max(10000, 'Cost cannot exceed €10,000.00').optional(),\n    stock_quantity: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Stock quantity cannot be negative').max(10000, 'Stock quantity cannot exceed 10,000').int('Stock quantity must be a whole number').default(0),\n    reserved_quantity: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Reserved quantity cannot be negative').int('Reserved quantity must be a whole number').default(0),\n    reorder_level: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Reorder level cannot be negative').int('Reorder level must be a whole number').optional(),\n    weight_grams: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(100, 'Weight must be at least 100g').max(5000, 'Weight cannot exceed 5kg').int('Weight must be a whole number').default(1200),\n    description_en: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(10, 'English description must be at least 10 characters').max(2000, 'English description cannot exceed 2000 characters'),\n    description_fr: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(10, 'French description must be at least 10 characters').max(2000, 'French description cannot exceed 2000 characters'),\n    tasting_notes_en: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(1000, 'English tasting notes cannot exceed 1000 characters').optional(),\n    tasting_notes_fr: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(1000, 'French tasting notes cannot exceed 1000 characters').optional(),\n    food_pairing_en: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(500, 'English food pairing cannot exceed 500 characters').optional(),\n    food_pairing_fr: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(500, 'French food pairing cannot exceed 500 characters').optional(),\n    production_notes_en: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(1000, 'English production notes cannot exceed 1000 characters').optional(),\n    production_notes_fr: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(1000, 'French production notes cannot exceed 1000 characters').optional(),\n    allergens: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    organic_certified: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().default(false),\n    biodynamic_certified: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().default(false),\n    vegan_friendly: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().default(false),\n    google_product_category: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(200).optional(),\n    meta_product_category: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(200).optional(),\n    is_active: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().default(true),\n    featured: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().default(false),\n    sort_order: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Sort order cannot be negative').int('Sort order must be a whole number').default(0),\n    seo_title_en: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(60, 'English SEO title cannot exceed 60 characters').optional(),\n    seo_title_fr: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(60, 'French SEO title cannot exceed 60 characters').optional(),\n    seo_description_en: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(160, 'English SEO description cannot exceed 160 characters').optional(),\n    seo_description_fr: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(160, 'French SEO description cannot exceed 160 characters').optional(),\n    slug_en: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(3, 'English slug must be at least 3 characters').max(100, 'English slug cannot exceed 100 characters').regex(/^[a-z0-9-]+$/, 'English slug must contain only lowercase letters, numbers, and hyphens'),\n    slug_fr: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(3, 'French slug must be at least 3 characters').max(100, 'French slug cannot exceed 100 characters').regex(/^[a-z0-9-]+$/, 'French slug must contain only lowercase letters, numbers, and hyphens')\n});\n// Product image schema\nconst productImageSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    url: zod__WEBPACK_IMPORTED_MODULE_0__.string().url('Please enter a valid image URL'),\n    alt_text_en: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(200, 'English alt text cannot exceed 200 characters').optional(),\n    alt_text_fr: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(200, 'French alt text cannot exceed 200 characters').optional(),\n    display_order: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Display order cannot be negative').int('Display order must be a whole number').default(0),\n    image_type: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'bottle',\n        'label',\n        'vineyard',\n        'winemaker'\n    ]).default('bottle'),\n    width: zod__WEBPACK_IMPORTED_MODULE_0__.number().int().optional(),\n    height: zod__WEBPACK_IMPORTED_MODULE_0__.number().int().optional(),\n    file_size: zod__WEBPACK_IMPORTED_MODULE_0__.number().int().optional(),\n    is_primary: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().default(false)\n});\n// Update wine product schema (for PUT requests)\nconst updateWineProductSchema = wineProductSchema.partial().extend({\n    id: zod__WEBPACK_IMPORTED_MODULE_0__.string().uuid('Invalid product ID')\n});\n// Legacy product schema for backward compatibility\nconst productSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(3, 'Product name must be at least 3 characters').max(100, 'Product name cannot exceed 100 characters'),\n    sku: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(3, 'SKU must be at least 3 characters').max(50, 'SKU cannot exceed 50 characters').regex(/^[A-Z0-9-]+$/, 'SKU must contain only uppercase letters, numbers, and hyphens'),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(10, 'Description must be at least 10 characters').max(2000, 'Description cannot exceed 2000 characters'),\n    price: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Price must be at least €0.01').max(100000, 'Price cannot exceed €1,000.00'),\n    stockQuantity: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Stock quantity cannot be negative').max(10000, 'Stock quantity cannot exceed 10,000').int('Stock quantity must be a whole number'),\n    category: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'red_wine',\n        'white_wine',\n        'rose_wine',\n        'sparkling_wine',\n        'dessert_wine',\n        'fortified_wine'\n    ]),\n    vintage: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1800, 'Vintage must be realistic').max(new Date().getFullYear(), 'Vintage cannot be in the future').optional(),\n    alcoholContent: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0.5, 'Alcohol content must be at least 0.5%').max(20, 'Alcohol content cannot exceed 20%').optional(),\n    grapeVariety: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(100, 'Grape variety name too long').optional(),\n    region: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(100, 'Region name too long').optional(),\n    producer: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(100, 'Producer name too long').optional(),\n    volume: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(187, 'Minimum volume is 187ml').max(3000, 'Maximum volume is 3000ml').optional(),\n    servingTemperature: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(50, 'Serving temperature description too long').optional(),\n    agingPotential: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(100, 'Aging potential description too long').optional(),\n    pairingNotes: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(500, 'Pairing notes too long').optional(),\n    status: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'active',\n        'inactive',\n        'out_of_stock',\n        'discontinued'\n    ]),\n    isFeatured: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    isOrganic: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    isBiodynamic: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    imageUrl: zod__WEBPACK_IMPORTED_MODULE_0__.string().url('Please enter a valid image URL').optional(),\n    galleryImages: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string().url()).max(10, 'Maximum 10 gallery images').optional()\n});\n// Order schemas\nconst orderSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    customerId: zod__WEBPACK_IMPORTED_MODULE_0__.string().uuid('Invalid customer ID').optional(),\n    customerEmail: emailSchema,\n    customerFirstName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'First name is required'),\n    customerLastName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Last name is required'),\n    shippingAddress: addressSchema,\n    billingAddress: addressSchema,\n    items: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        productId: zod__WEBPACK_IMPORTED_MODULE_0__.string().uuid('Invalid product ID'),\n        quantity: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Quantity must be at least 1').int(),\n        unitPrice: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Unit price must be positive')\n    })).min(1, 'Order must contain at least one item'),\n    subtotal: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Subtotal cannot be negative'),\n    vatAmount: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'VAT amount cannot be negative'),\n    shippingCost: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Shipping cost cannot be negative'),\n    totalAmount: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Total amount must be positive'),\n    paymentMethod: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, 'Payment method is required'),\n    specialInstructions: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(500, 'Special instructions too long').optional(),\n    giftMessage: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(200, 'Gift message too long').optional()\n});\n// Contact form schemas\nconst contactFormSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Name must be at least 2 characters').max(100, 'Name cannot exceed 100 characters'),\n    email: emailSchema,\n    subject: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(5, 'Subject must be at least 5 characters').max(100, 'Subject cannot exceed 100 characters'),\n    message: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(10, 'Message must be at least 10 characters').max(1000, 'Message cannot exceed 1000 characters'),\n    phone: phoneSchema,\n    category: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'general',\n        'orders',\n        'products',\n        'shipping',\n        'returns',\n        'technical'\n    ]).optional()\n});\n// Wine estate contact form schema - specialized for Domaine Vallot\nconst frenchPhoneSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^(\\+33|0)[1-9](\\d{8})$/, 'Veuillez entrer un numéro de téléphone français valide (ex: 01 23 45 67 89)').optional();\nconst wineContactFormSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    firstName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Le prénom doit contenir au moins 2 caractères').max(50, 'Le prénom ne peut pas dépasser 50 caractères').regex(/^[a-zA-ZÀ-ÿ\\s'-]+$/, 'Le prénom contient des caractères invalides'),\n    lastName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Le nom doit contenir au moins 2 caractères').max(50, 'Le nom ne peut pas dépasser 50 caractères').regex(/^[a-zA-ZÀ-ÿ\\s'-]+$/, 'Le nom contient des caractères invalides'),\n    email: zod__WEBPACK_IMPORTED_MODULE_0__.string().email('Veuillez entrer une adresse email valide').max(255, 'L\\'adresse email est trop longue'),\n    phone: frenchPhoneSchema,\n    company: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(100, 'Le nom de la société ne peut pas dépasser 100 caractères').optional(),\n    inquiryType: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'wine_tasting',\n        'group_visit',\n        'wine_orders',\n        'business_partnership',\n        'press_media',\n        'general_inquiry'\n    ], {\n        errorMap: ()=>({\n                message: 'Veuillez sélectionner le type de demande'\n            })\n    }),\n    groupSize: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Le nombre de personnes doit être d\\'au moins 1').max(50, 'Nous ne pouvons accueillir plus de 50 personnes par groupe').int('Le nombre de personnes doit être un nombre entier').optional(),\n    preferredDate: zod__WEBPACK_IMPORTED_MODULE_0__.string().refine((date)=>{\n        if (!date) return true // Optional field\n        ;\n        const selectedDate = new Date(date);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        return selectedDate >= today;\n    }, 'La date préférée ne peut pas être dans le passé').optional(),\n    message: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(20, 'Votre message doit contenir au moins 20 caractères').max(1500, 'Votre message ne peut pas dépasser 1500 caractères').refine((msg)=>!/<[^>]*>/g.test(msg), 'Le message ne peut pas contenir de HTML'),\n    // Wine-specific fields\n    winePreferences: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(300, 'Les préférences vinicoles ne peuvent pas dépasser 300 caractères').optional(),\n    budgetRange: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(50, 'La fourchette budgétaire ne peut pas dépasser 50 caractères').optional(),\n    specialRequirements: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(300, 'Les exigences spéciales ne peuvent pas dépasser 300 caractères').optional(),\n    // Compliance fields\n    ageVerified: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().refine((val)=>val === true, 'Vous devez confirmer avoir l\\'âge légal pour consommer de l\\'alcool'),\n    privacyAccepted: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().refine((val)=>val === true, 'Vous devez accepter la politique de confidentialité'),\n    marketingConsent: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    // Anti-spam field (honeypot)\n    website: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(0, 'Ce champ doit rester vide').optional()\n}).refine((data)=>{\n    // Require group size for group visits and tastings\n    if ([\n        'wine_tasting',\n        'group_visit'\n    ].includes(data.inquiryType)) {\n        return data.groupSize && data.groupSize >= 1;\n    }\n    return true;\n}, {\n    message: 'Le nombre de personnes est requis pour les dégustations et visites de groupe',\n    path: [\n        'groupSize'\n    ]\n}).refine((data)=>{\n    // Validate business partnership requires company name\n    if (data.inquiryType === 'business_partnership') {\n        return data.company && data.company.trim().length >= 2;\n    }\n    return true;\n}, {\n    message: 'Le nom de la société est requis pour les partenariats commerciaux',\n    path: [\n        'company'\n    ]\n});\n// Newsletter subscription schema\nconst newsletterSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    email: emailSchema,\n    firstName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'First name is required').optional(),\n    preferences: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        newProducts: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n        specialOffers: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n        wineEvents: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n        wineEducation: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional()\n    }).optional(),\n    acceptTerms: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().refine((val)=>val === true, 'You must accept the terms and conditions')\n});\n// Admin schemas\nconst adminLoginSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    email: emailSchema,\n    password: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, 'Password is required'),\n    twoFactorCode: zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^\\d{6}$/, '2FA code must be 6 digits').optional()\n});\nconst adminUserSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    email: emailSchema,\n    firstName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'First name is required'),\n    lastName: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Last name is required'),\n    role: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'admin',\n        'manager',\n        'staff'\n    ]),\n    permissions: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    isActive: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n    password: passwordSchema.optional()\n});\n// Inventory management schemas\nconst inventoryAdjustmentSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    productId: zod__WEBPACK_IMPORTED_MODULE_0__.string().uuid('Invalid product ID'),\n    adjustment: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(-1000, 'Adjustment too large').max(1000, 'Adjustment too large').int('Adjustment must be a whole number'),\n    reason: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'received',\n        'sold',\n        'damaged',\n        'expired',\n        'returned',\n        'correction',\n        'other'\n    ]),\n    notes: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(500, 'Notes cannot exceed 500 characters').optional(),\n    reference: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(100, 'Reference cannot exceed 100 characters').optional()\n});\n// Shipping rate calculation schema\nconst shippingRateSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    destination: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        country: zod__WEBPACK_IMPORTED_MODULE_0__.string().length(2, 'Country must be a 2-letter code'),\n        postalCode: postalCodeSchema,\n        city: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'City is required')\n    }),\n    items: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        productId: zod__WEBPACK_IMPORTED_MODULE_0__.string().uuid('Invalid product ID'),\n        quantity: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Quantity must be at least 1').int(),\n        weight: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Weight must be positive').optional()\n    })).min(1, 'At least one item is required'),\n    totalValue: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Total value must be positive')\n});\n// VAT calculation schema\nconst vatCalculationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    amount: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Amount must be positive'),\n    shippingAmount: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Shipping amount cannot be negative').optional(),\n    country: zod__WEBPACK_IMPORTED_MODULE_0__.string().length(2, 'Country must be a 2-letter code'),\n    customerType: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'consumer',\n        'business'\n    ]).optional(),\n    vatNumber: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n// Search and filter schemas\nconst productSearchSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    query: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(100, 'Search query too long').optional(),\n    category: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'red_wine',\n        'white_wine',\n        'rose_wine',\n        'sparkling_wine',\n        'dessert_wine',\n        'fortified_wine'\n    ]).optional(),\n    minPrice: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Minimum price cannot be negative').optional(),\n    maxPrice: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Maximum price cannot be negative').optional(),\n    vintage: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1800, 'Vintage too old').max(new Date().getFullYear(), 'Vintage cannot be in the future').optional(),\n    region: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(100, 'Region name too long').optional(),\n    inStock: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    isOrganic: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    sortBy: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'name',\n        'price',\n        'vintage',\n        'created_at',\n        'popularity'\n    ]).optional(),\n    sortOrder: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'asc',\n        'desc'\n    ]).optional(),\n    limit: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Limit must be at least 1').max(100, 'Limit cannot exceed 100').optional(),\n    offset: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Offset cannot be negative').optional()\n});\n// File upload schemas\nconst imageUploadSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    file: zod__WEBPACK_IMPORTED_MODULE_0__.any().refine((file)=>file instanceof File, 'Please select a valid file').refine((file)=>file.size <= 5 * 1024 * 1024, 'File size must be less than 5MB').refine((file)=>[\n            'image/jpeg',\n            'image/png',\n            'image/webp'\n        ].includes(file.type), 'File must be JPEG, PNG, or WebP format'),\n    alt: zod__WEBPACK_IMPORTED_MODULE_0__.string().max(200, 'Alt text cannot exceed 200 characters').optional()\n});\n// Validation helper functions\nconst validateSchema = (schema, data)=>{\n    try {\n        const result = schema.parse(data);\n        return {\n            success: true,\n            data: result\n        };\n    } catch (error) {\n        if (error instanceof zod__WEBPACK_IMPORTED_MODULE_1__.ZodError) {\n            const errors = {};\n            for (const issue of error.issues){\n                const path = issue.path.join('.');\n                if (!errors[path]) {\n                    errors[path] = [];\n                }\n                errors[path].push(issue.message);\n            }\n            return {\n                success: false,\n                errors\n            };\n        }\n        return {\n            success: false,\n            errors: {\n                general: [\n                    'Validation failed'\n                ]\n            }\n        };\n    }\n};\nconst getErrorMessage = (errors, field)=>{\n    return errors[field]?.[0] || '';\n};\nconst hasErrors = (errors)=>{\n    return Object.keys(errors).length > 0;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/validators/schemas.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "@supabase/supabase-js":
/*!****************************************!*\
  !*** external "@supabase/supabase-js" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@supabase/supabase-js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/zod","vendor-chunks/@supabase","vendor-chunks/cookie"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fadmin%2Fproducts%2F%5Bid%5D%2Froute&page=%2Fapi%2Fadmin%2Fproducts%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fproducts%2F%5Bid%5D%2Froute.ts&appDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Colivi%5CDomaine%20Vallot&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();